(function () {var vdb = {};
    vdb.plugins = {};
    vdb.ads = {};
    vdb.ads.AdStage = {LOADED:"loaded", WIN:"win", STARTING:"starting", STARTED:"started", BOOST:"boost", FINISHED:"finished", KILLED:"killed", SKIPPED:"skipped", FAILOVER:"failover", EARLY_STOP:"early-stop", SITE_MISMATCH:"site-mismatch", FIRST_QUARTILE:"q1", SECOND_QUARTILE:"q2", THIRD_QUARTILE:"q3", NON_LINEAR:"non-linear"};
    vdb.constants = {};
    vdb.constants.PlayerEvent = function() {
        var CONTENT_PREFIX = "content.";
        var api = {PLAYER_READY:"playerready", PLAYLIST_END:"playlistend", PLAYER_ERROR:"playererror", CONTEXT_INTENT:"contextintent", CONTEXT_STARTED:"contextstarted", CONTEXT_ENDED:"contextended", FINISHED_ADBLOCK_DETECTION:"finishedadblockdetection", MANIFEST_LOADED:"manifestloaded", LEVEL_LOADED:"levelloaded", LEVEL_SWITCHED:"levelswitched", BITRATE_UPDATE:"bitrateupdate", BUFFERING_START:"bufferingstart", BUFFERING_END:"bufferingend", VIDEO_META:"videometadata", VIDEO_DATA_LOADED:"videodataloaded",
            VIDEO_START:"videostart", VIDEO_CLICK:"videoclick", VIDEO_PAUSE:"videopause", VIDEO_PLAY:"videoplay", VIDEO_SEEKSTART:"videoseekstart", VIDEO_SEEKEND:"videoseekend", VIDEO_PROGRESS:"videoprogress", VIDEO_WAITING:"videowaiting", VIDEO_VOLUME_CHANGED:"videovolumechanged", VIDEO_TIMEUPDATE:"videotimeupdate", VIDEO_END:"videoend", VIDEO_SELECTED:"videoselected", VIDEO_MODULE_CREATED:"videomodulecreated", ALLOW_POSTER:"allowposter", VIDEO_POSTER_READY:"videoposterready", PLAY_TRIGGERED:"playtriggered",
            ADS_LOADED:"adsloaded", AD_META:"admeta", AD_PAUSED:"adpaused", AD_PLAY:"adplay", AD_START:"adstart", AD_STARTING:"adstarting", AD_LOADED:"adloaded", AD_END:"adend", AD_VOLUME_CHANGED:"advolumechanged", AD_TIMEUPDATE:"adtimeupdate", AD_QUARTILE:"adquartile", AD_WAITING:"adwaiting", AD_CLICK:"adclick", AD_BLOCKER_REQUEST:"adblockerrequest", AD_BLOCKER_COMPLETE:"adblockercomplete", AD_ENGINE_RESPONSE:"adengineresponse", AD_SHOW_COMPANIONS:"adshowcompanions", CONTENT_IMPRESSION:CONTENT_PREFIX + "impression",
            CONTENT_BEFORE_IMPRESSION:CONTENT_PREFIX + "beforeimpression", CONTENT_VIEW:CONTENT_PREFIX + "view", CONTENT_QUARTILE:CONTENT_PREFIX + "quartile", CONTENT_CLICK:CONTENT_PREFIX + "click", AGE_GATE_DISPLAYED:"agegatedisplayed", BIRTH_DATE_ENTERED:"birthdateentered", LIVE_IS_ON:"liveison", LIVE_IS_LOST:"liveislost", LIVE_IS_OFF:"liveisoff", TOOLTIP_VIEW_READY:"tooltipviewready", TOOLTIP_PAUSE:"tooltippause", TOOLTIP_BUTTON_CLICK:"tooltipbuttonclick", TOOLTIP_CLICK:"tooltipclick", HIDE_TOOLTIP:"hidetooltip",
            SHOW_TOOLTIP:"showtooltip", CLOSE_TOOLTIP_ICON:"closetooltipicon", OPEN_TOOLTIP_ICON:"opentooltipicon", HIDE_TOOLTIP_ICON:"hidetooltipicon", SHOW_TOOLTIP_ICON:"showtooltipicon", PLAYER_SKIN_READY:"playerskinready", SUBTITLES_READY:"subtitlesready", SUBTITLES_ENABLED:"subtitlesenabled", SUBTITLES_DISABLED:"subtitlesdisabled", RELATED_BUTTON_CLICK:"relatedbuttonclick", USER_INTERACTION:"userinteraction", PLAYER_API_INTERACTION:"playerapiinteraction", DISABLE_INVIEW:"disableinview", IN_VIEW:"playerinview",
            OUT_OF_VIEW:"playeroutofview", ENTER_FULLSCREEN:"playerenterfullscreen", EXIT_FULLSCREEN:"playerexitfullscreen", SHOW_UI_EXTRAS:"showuiextras", HIDE_UI_EXTRAS:"hideuiextras", PLAYER_EXPANDED:"playerexpanded", PLAYER_COLLAPSED:"playercollapsed", PLAYER_CLICK:"playerclick", PLAYER_RESIZE:"playerresize", SHOW_DOCK_BUTTON:"showdockbutton", DOCK_BUTTON_CLICK:"dockbuttonclick", PLAYER_FLOATING:"playerFloating", PLAYER_FLOATED:"playerFloated", PLAYER_DOCKED:"playerDocked", ADVERT_CLOSED:"advertClosed",
            FALLBACK:"fallback", HIDE_CONTROLS:"hideControls", SHOW_CONTROLS:"showControls", SHARE_SCREEN_OPENED:"sharescreenopened", SHARE_SCREEN_CLOSED:"sharescreenclosed", PLAYER_CONTROLS_STATE_CHANGE:"playercontrolsstatechaned", EMBED_SCREEN_OPENED:"sharescreenopened", EMBED_SCREEN_CLOSED:"sharescreenclosed", FLOAT_START_ACTION:"floatstarted", FLOAT_END_ACTION:"floatended", POSTER_CLICK:"poster_click", AD_INTERACTION_END:"adinteractionend"};
        api.CONTENT_PREFIX = CONTENT_PREFIX;
        api.EXPOSED_EVENTS = {"PLAYER_READY":api.PLAYER_READY, "PLAYLIST_END":api.PLAYLIST_END, "PLAYER_ERROR":api.PLAYER_ERROR, "VIDEO_META":api.VIDEO_META, "VIDEO_DATA_LOADED":api.VIDEO_DATA_LOADED, "VIDEO_START":api.VIDEO_START, "VIDEO_TIMEUPDATE":api.VIDEO_TIMEUPDATE, "VIDEO_END":api.VIDEO_END, "VIDEO_PAUSE":api.VIDEO_PAUSE, "VIDEO_PLAY":api.VIDEO_PLAY, "VIDEO_SEEKEND":api.VIDEO_SEEKEND, "VIDEO_VOLUME_CHANGED":api.VIDEO_VOLUME_CHANGED, "VIDEO_MODULE_CREATED":api.VIDEO_MODULE_CREATED, "AD_META":api.AD_META,
            "AD_START":api.AD_START, "AD_PAUSED":api.AD_PAUSED, "AD_END":api.AD_END, "AD_PLAY":api.AD_PLAY, "AD_ENGINE_RESPONSE":api.AD_ENGINE_RESPONSE, "AD_TIMEUPDATE":api.AD_TIMEUPDATE, "AD_WAITING":api.AD_WAITING, "CONTEXT_STARTED":api.CONTEXT_STARTED, "CONTEXT_ENDED":api.CONTEXT_ENDED, "VIDEO_SELECTED":api.VIDEO_SELECTED, "PLAYER_RESIZE":api.PLAYER_RESIZE, "PLAYER_FLOATING":api.PLAYER_FLOATING, "PLAYER_DOCKED":api.PLAYER_DOCKED, "ADVERT_CLOSED":api.ADVERT_CLOSED, "FALLBACK":api.FALLBACK, "AGE_GATE_DISPLAYED":api.AGE_GATE_DISPLAYED,
            "SUBTITLES_READY":api.SUBTITLES_READY, "SUBTITLES_ENABLED":api.SUBTITLES_ENABLED, "SUBTITLES_DISABLED":api.SUBTITLES_DISABLED, "SHARE_SCREEN_OPENED":api.SHARE_SCREEN_OPENED, "SHARE_SCREEN_CLOSED":api.SHARE_SCREEN_CLOSED, "ENTER_FULLSCREEN":api.ENTER_FULLSCREEN, "EXIT_FULLSCREEN":api.EXIT_FULLSCREEN, "PLAYER_CONTROLS_STATE_CHANGE":api.PLAYER_CONTROLS_STATE_CHANGE, "FLOAT_START_ACTION":api.FLOAT_START_ACTION, "FLOAT_END_ACTION":api.FLOAT_END_ACTION};
        api.EXPOSED_EVENTS[api.CONTENT_PREFIX + "IMPRESSION"] = api.CONTENT_IMPRESSION;
        api.EXPOSED_EVENTS[api.CONTENT_PREFIX + "VIEW"] = api.CONTENT_VIEW;
        api.EXPOSED_EVENTS[api.CONTENT_PREFIX + "QUARTILE"] = api.CONTENT_QUARTILE;
        api.EXPOSED_EVENTS[api.CONTENT_PREFIX + "CLICK"] = api.CONTENT_CLICK;
        api.getContentEventList = function() {
            var eventList = new vdb.utils.ObjectMap;
            for (var key in api) {
                if (Object.prototype.hasOwnProperty.call(api, key)) {
                    var value = api[key];
                    if (typeof value === "string" && value !== api.CONTENT_PREFIX && value.indexOf(api.CONTENT_PREFIX) === 0) {
                        eventList.set(key, value);
                    }
                }
            }
            return eventList;
        };
        api.exposeGlobal = function() {
            for (var key in api.EXPOSED_EVENTS) {
                if (Object.prototype.hasOwnProperty.call(api.EXPOSED_EVENTS, key)) {
                    vdb[key] = api.EXPOSED_EVENTS[key];
                }
            }
        };
        return api;
    }();
    vdb.constants.PlayerMacros = {ADMINIBAR:"adminibar", ADMINIBAR_OPACITY:"adminibar_opacity", AGGRESSIVE_AD_MODE:"aggressiveAdMode", ANIMATED_POSTER_TEXT:"animated_poster_text", ARR:"arr", AUTO_PLAY_IN_VIEW:"autoplayinview", BEON_CW:"beoncw", BEON_VID:"beonvid", BIG_PLAY_PAUSE_BUTTON:"bigPlayPauseButton", CENTEREDFISHEYE:"centeredFishEye", CHROMEMODE:"chromeMode", CLICKURL:"clickurl", CSACCID:"csaccid", CSC4:"csc4", DISABLE360POSTER:"disable360poster", DISABLEADS:"disableads", DISABLEDCR:"disabledcr",
        DISABLE_ADS_PRELOADING:"disableadspreloading", DISABLE_FLASH_AD:"disableFlashAd", DISABLE_MOAT:"disable_moat", DISCOVERY_PAGE_PREVIEW:"discovery_page_preview", ENABLE_LIGHTBOX:"enable_lightbox", ENABLE_SUBSCRIPT:"enable_subscript", FISHEYEANGLE:"fishEyeAngle", FORCEREACTIONS:"forcereactions", FORCE_NIELSEN_DAR:"force_nielsen_dar", FORCE_NIELSEN_OCR:"force_nielsen_ocr", FWSITESECTION:"fwsitesection", HIDEDURATION:"hideDuration", HIDESKIN:"hideskin", INITIALVOLUME:"initialVolume", IOSAPP:"iosapp",
        ISRESPONSIVE:"isResponsive", LANGUAGEAUTODETECTION:"languageAutoDetection", LOADINGPLACEHOLDER:"loadingplaceholder", LOAD_TIME_LIMIT:"loadTimeLimit", MOBILE360:"360mobile", O2INLINE:"o2inline", O2INLINE_IOS:"o2inline_ios", OATH_HLS_JS:"oathHlsJs", ONLOAD:"onLoad", PAUSE_IF_SCROLLED_AWAY:"pauseIfScrolledAway", PAUSE_IF_TAB_SWITCH:"pauseIfOutOfTab", PLAYBACK:"playback", PLAYERTYPE:"playertype", POSTERSTYLE:"posterstyle", PREVIEWPOSTER:"previewposter", REWARD:"reward", SHOWVPAIDCONTROLS:"showVpaidControls",
        SID:"sid", SOUND:"sound", SUBSCRIPT_LANGUAGE:"subscript_language", TILT:"tilt", TIMELINEPREVIEW:"timelinepreview", TIMELINE_PREVIEW_SHAPE:"timeline_preview_shape", TIMELINE_PREVIEW_BORDER:"timeline_preview_border", UPNEXT:"upnext", URL:"url", VID:"vid", VLS_AD:"vls.ad", VRSPLIT:"vrsplit", YAHOO_MODULE:"yahooModule"};
    vdb.enums = {};
    vdb.enums.Dependencies = {URLS:"urls", VPAID_RUNNER:"vpaidRunner", FLV_RUNNER:"flvRunner", PARAMETERS_COMBINE:"parametersCombine", DISPLAY:"display", MOAT_VIEWABILITY:"moatViewability", SMART_VIEWABILITY:"smartViewability", VIEWABILITY:"viewability", BASE_VIEWABILITY:"baseViewability", INTERSECTION_VIEWABILITY:"intersectionViewability", ROOT_CONTAINER:"rootContainer", FLASH_DETECTOR:"flashDetector", DEBUG_INFO:"debugInfo", BASIC_TRACKER:"basicTracker", PIXEL_TRACKER:"pixelTracker", ERROR_TRACKER:"errorTracker",
        AD_TRACKER:"adTracker", ENVIRONMENT:"environment", IAB:"iab", IAB_FACTORY:"iabFactory", AD_CONTAINER:"adContainer", EVENT_BUS:"eventBus", CONFIG:"config", IN_VIEW_MANAGER:"inViewManager", HOST_WINDOW_PROVIDER:"hostWindowProvider", VIDEO_TAG:"videoTag", DOM:"dom", PRIMAL_TRACKER:"primalTracker", BITRATE_TRACKER:"bitrateTracker", BUFFERED_CALCULATOR:"bufferedCalculator", VIEWABILITY_ROOT_CONTAINER:"viewabilityRootContainer"};
    vdb.enums.IN_VIEW_TYPES = {ALWAYS:"always", MUTED:"ifstillmuted", NEVER:"never"};
    vdb.enums.PlatformName = {IOS:"ios", ANDROID:"android", MAC:"mac"};
    vdb.events = {};
    vdb.events.EnvironmentEvent = {};
    (function(def) {
        def.VIDEO_SELECTED = "EnvironmentEvent.VideoSelected";
        def.VIDEO_META = "EnvironmentEvent.VideoMeta";
        def.VIDEO_END = "EnvironmentEvent.VideoEnd";
        def.VIDEO_TIMEUPDATE = "EnvironmentEvent.VideoTimeUpdate";
        def.VIDEO_SEEKSTART = "EnvironmentEvent.VideoSeekStart";
        def.VIDEO_SEEKEND = "EnvironmentEvent.VideoSeekEnd";
        def.VIDEO_START = "EnvironmentEvent.VideoStart";
        def.VIDEO_PLAY = "EnvironmentEvent.VideoPlay";
        def.VIDEO_PAUSE = "EnvironmentEvent.VideoPause";
        def.VIDEO_WAITING = "EnvironmentEvent.VideoWaiting";
        def.BUFFERING_START = "EnvironmentEvent.BufferingStart";
        def.BUFFERING_END = "EnvironmentEvent.BufferingEnd";
        def.CONTEXT_INTENT = "EnvironmentEvent.ContextIntent";
        def.USER_INTERACTION = "EnvironmentEvent.UserInteraction";
        def.MIDROLL = "EnvironmentEvent.Midroll";
        def.OVERLAY = "EnvironmentEvent.Overlay";
        def.AD_START = "EnvironmentEvent.AdStart";
        def.AD_TIMEUPDATE = "EnvironmentEvent.AdTimeUpdate";
        def.AD_PAUSED = "EnvironmentEvent.AdPaused";
        def.AD_WAITING = "EnvironmentEvent.AdWaiting";
        def.AD_END = "EnvironmentEvent.AdEnd";
        def.AD_BLOCKER_COMPLETE = "EnvironmentEvent.AdBlockerComplete";
        def.AD_BLOCKER_COMPLETE = "EnvironmentEvent.AdBlockerComplete";
        def.PLAYER_DOCKED = "EnvironmentEvent.PlayerDocked";
        def.PLAYER_RESIZE = "EnvironmentEvent.PlayerResize";
        def.PLAYER_CONTROLS_STATE_CHANGE = "EnvironmentEvent.PlayerControlsStateChange";
        def.MANIFEST_LOADED = "EnvironmentEvent.manifestloaded";
        def.LEVEL_LOADED = "EnvironmentEvent.levelloaded";
        def.BITRATE_UPDATE = "EnvironmentEvent.bitrateupdate";
    })(vdb.events.EnvironmentEvent);
    vdb.events.PlayerModuleEvent = {UNBLOCK:"PlayerModule.Unblock", BLOCKING_EXTRAS_LOADED:"BlockingExtras.Loaded", BLOCKING_EXTRAS_RELEASED:"BlockingExtras.Released"};
    vdb.extras = {};
    vdb.extras.ExtraManagerType = {CORE:"core", HTML5:"html5", ADS:"ads"};
    vdb.localStorage = {setItem:function(key, value) {
        try {
            if (window.localStorage) {
                window.localStorage.setItem(key, value);
            }
        } catch (e) {
        }
    }, getItem:function(key) {
        var result;
        try {
            if (window.localStorage) {
                result = window.localStorage.getItem(key);
            }
        } catch (e) {
        }
        return result;
    }, removeItem:function(key) {
        try {
            if (window.localStorage) {
                window.localStorage.removeItem(key);
            }
        } catch (e) {
        }
    }};
    vdb.NodeType = {ELEMENT_NODE:1, ATTRIBUTE_NODE:2, TEXT_NODE:3, CDATA_SECTION_NODE:4, ENTITY_REFERENCE_NODE:5, ENTITY_NODE:6, PROCESSING_INSTRUCTION_NODE:7, COMMENT_NODE:8, DOCUMENT_NODE:9, DOCUMENT_TYPE_NODE:10, DOCUMENT_FRAGMENT_NODE:11, NOTATION_NODE:12};
    vdb.Props = function() {
        var props;
        return{init:function init(e) {
            var isStage = e === "stage";
            var dotDevSuffix = isStage ? ".dev" : "";
            var dotStageSuffix = isStage ? ".stage" : "";
            var dashStageSuffix = isStage ? "-stage" : "";
            var vidibleTv = ".vidible.tv";
            var adapTv = ".adaptv.advertising.com";
            var http = "http://";
            var https = "https://";
            props = {"cdn.url":http + "cdn" + vidibleTv + "/" + e + "/", "cdn.url.secure":https + "cdn-ssl" + vidibleTv + "/" + e + "/", "s3.url":http + "s3.amazonaws.com/vdb-cdn-files/", "s3.url.secure":https + "s3.amazonaws.com/vdb-cdn-files/", "tracking.url":http + "trk" + dotDevSuffix + vidibleTv + "/trk/", "tracking.url.secure":https + "trk" + dotDevSuffix + vidibleTv + "/trk/", "delivery.url":http + "delivery" + dotDevSuffix + vidibleTv + "/", "delivery.url.secure":https + "delivery" + dotDevSuffix +
            vidibleTv + "/", "adserver.url":http + "video" + dashStageSuffix + adapTv + "/", "adserver.url.secure":https + "video" + dashStageSuffix + adapTv + "/", "adstracker.url":http + "video" + dashStageSuffix + adapTv + "/", "adstracker.url.secure":https + "video" + dashStageSuffix + adapTv + "/", "inlineplayer.url":http + "cdn.vidible.tv/" + e + "/inline-player/js/latest/inline-player.js", "inlineplayer.url.secure":https + "cdn-ssl.vidible.tv/" + e + "/inline-player/js/latest/inline-player.js", "uplynk.url":http +
            "content.uplynk.com/", "uplynk.url.secure":https + "content.uplynk.com/", "videos.domain":"videos" + vidibleTv, "lowlander.videos.domain":"cdn.aolon.com", "aeg.default_vendor":isStage ? "593fb37531e0a533fe6dd8fa" : "593fb311c214e33ec50202f0", "cdn.domain":http + "cdn.vidible.tv", "cdn.domain.secure":https + "cdn-ssl" + vidibleTv, "cdn2.domain.secure":https + "cdn2" + vidibleTv, "imageservice.url":https + "img" + dotStageSuffix + vidibleTv, "imageservice.url.secure":https + "img" + dotStageSuffix +
            vidibleTv, "logger.level":isStage ? "0" : "3", "ima.url":http + "s0.2mdn.net/instream/html5/ima3" + (isStage ? "_debug" : "") + ".js", "ima.url.secure":https + "s0.2mdn.net/instream/html5/ima3" + (isStage ? "_debug" : "") + ".js", "default.pid":isStage ? "5912acc731e0a563e7535e52" : "59947c0544a64b1a49e52a48", "default.bid":isStage ? "53a2cd08e4b0915a797d6a2e" : "56bcd17de4b0a5976ac0da12", "default.bcid":isStage ? "50d595ec0364e95588c77bd2" : "56bcd17ce4b018167fea5539"};
            for (var prop in props) {
                vdb.Props[prop] = props[prop];
            }
        }};
    }();
    var goog = goog || {};
    goog.provide = goog.provide || function(name) {
    };
    goog.require = goog.require || function(name) {
    };
    var $win = window;
    var $doc = document;
    vdb.player = {};
    if (window.Node && Node.prototype.__defineGetter__) {
        if (window.Node && window.XMLSerializer) {
            Node.prototype.__defineGetter__("outerHTML", function() {
                return vdb.utils.StringUtils.replaceAll(vdb.utils.StringUtils.replaceAll((new XMLSerializer).serializeToString(this), "%7B", "{"), "%7D", "}");
            });
        }
    }
    window.vdb = vdb;
    $win["vidible"] = function(vdb) {
        function version() {
            return "17.16.dev180";
        }
        function registerExtra(constructor, dependencies) {
            getExtrasPool().registerExtra(constructor, dependencies);
        }
        function getExtrasPool() {
            if (!coreExtrasPool) {
                coreExtrasPool = new vdb.modules.ExtrasPool;
            }
            return coreExtrasPool;
        }
        function _getContexts() {
            return contexts;
        }
        function getContext(id) {
            return contexts[id];
        }
        function removeContext(id) {
            delete contexts[id];
        }
        function define(definitionCallback) {
            definitions.push(definitionCallback);
        }
        function updateMainFrame(config) {
            if (mainFrame) {
                this.uiTemplate = config["playerTemplate"];
                var frameStyle = mainFrame.style;
                frameStyle.width = this.uiTemplate["playerWidth"] + "px";
                frameStyle.height = this.uiTemplate["playerHeight"] + "px";
            }
        }
        function createLoadTimeModel(pid) {
            var loadTimeModel;
            if (vdb.utils.PerformanceUtils.isSupported()) {
                loadTimeModel = new vdb.loadTime.LoadTimeModel(pid);
                define(function(ctx, context) {
                    loadTimeModel.bindToContext(context);
                });
            }
            return loadTimeModel;
        }
        function createContext(options, placement, overrideUrls, isVpaid) {
            var context;
            if (isVpaid) {
                context = new vdb.context.VpaidContext(options, definitions, placement);
            } else {
                context = new vdb.context.Context(options, definitions, placement);
            }
            contexts[context.id] = context;
            context.setBaseUrls(overrideUrls);
            context.initContext();
            if (mainFrame) {
                context.addEventListener(vdb.loader.PlacementLoader.LOADED, updateMainFrame);
            }
            return context;
        }
        function createPlayerAsync(options, placement, overrideUrls) {
            var apiOrPromise = createPlayer(options, placement, overrideUrls);
            var promise = apiOrPromise;
            if (!promise.then) {
                promise = vdb.Promise.resolve(apiOrPromise);
            }
            return promise;
        }
        function createPlayer(options, placement, overrideUrls) {
            function _createPlayer() {
                return createContext(options, placement, overrideUrls).createPlayer();
            }
            var pid = setPlayerInceptionTime(options.pid);
            if (options["params"] && options["params"].indexOf("m.busterEnabled=true") !== -1) {
                var future = new vdb.Future;
                vdb.utils.iframeBusters.bustIfNeeded(options, overrideUrls, function() {
                    future.resolve(_createPlayer());
                });
                return future.getPromise();
            }
            createLoadTimeModel(pid);
            return _createPlayer();
        }
        function setPlayerInceptionTime(pid) {
            var now = (new Date).getTime();
            vdb["playerInceptionTime"] = vdb["playerInceptionTime"] || {};
            vdb["playerInceptionTime"][pid] = now;
            return now;
        }
        function createVPAIDPeer(options, placement, overrideUrls) {
            return createContext(options, placement, overrideUrls, true).runVPAIDPeer();
        }
        function createVPAIDPlayer(options, placement, overrideUrls, vpaidAPI, vpaidOptions) {
            vdb.log.Logger.preffix = "vpaid";
            return createContext(options, placement, overrideUrls).createVPAIDPlayer(vpaidAPI, vpaidOptions);
        }
        function runPlugin(options, pluginParameters) {
            return createContext(options).runPlugin(pluginParameters);
        }
        function destroyAll() {
            for (var id in contexts) {
                if (contexts.hasOwnProperty(id)) {
                    if (contexts[id].api) {
                        contexts[id].api.destroy();
                    }
                }
            }
        }
        function getMainFrame() {
            return mainFrame;
        }
        var v = $win["vidible"];
        var contexts = v && v["_getContexts"] && v["_getContexts"]() || {};
        var scriptApiPromise = v && v["scriptApiPromise"];
        var mainFrame = v && v["mainFrame"];
        var getExtensionsRegistry = v && v.getExtensionsRegistry;
        var definitions = [];
        var coreExtrasPool = v && typeof v.getExtrasPool === "function" && v.getExtrasPool();
        vdb.define = define;
        vdb._getContexts = _getContexts;
        vdb.removeContext = removeContext;
        vdb.ver = version;
        vdb.getMainFrame = getMainFrame;
        vdb.getExtrasPool = getExtrasPool;
        vdb.getExtensionsRegistry = getExtensionsRegistry;
        vdb["createPlayer"] = createPlayer;
        vdb["createPlayerAsync"] = createPlayerAsync;
        vdb["createVPAIDPlayer"] = createVPAIDPlayer;
        vdb["createVPAIDPeer"] = createVPAIDPeer;
        vdb["runPlugin"] = runPlugin;
        vdb["getContext"] = getContext;
        vdb["_getContexts"] = _getContexts;
        vdb["version"] = version;
        vdb["destroyAll"] = destroyAll;
        vdb["registerExtra"] = registerExtra;
        vdb["scriptApiPromise"] = scriptApiPromise;
        vdb.Props.init("dev");
        return vdb;
    }(vdb);
    vdb.core = {};
    (function(def) {
        def.bindFix = function(wnd) {
            var arrayProto = wnd["Array"].prototype;
            var funcProto = wnd["Function"].prototype;
            if (funcProto.bind === undefined) {
                funcProto.bind = function(bind) {
                    var self = this;
                    var args = arrayProto.slice.call(arguments, 1);
                    return function() {
                        return self.apply(bind || null, args.concat(arrayProto.slice.call(arguments)));
                    };
                };
            }
        };
        def.bindFix(window);
        var initializing = false;
        var fnTest = /xyz/.test(function() {
            return "xyz";
        }) ? /\b_super\b/ : /.*/;
        def.Class = function() {
        };
        def.Class.extend = function(prop, dependencies) {
            function Class() {
                if (!initializing && this.init) {
                    this.init.apply(this, arguments);
                }
            }
            var _super = this.prototype;
            initializing = true;
            var prototype = new this;
            initializing = false;
            for (var name in prop) {
                prototype[name] = typeof prop[name] === "function" && typeof _super[name] === "function" && fnTest.test(prop[name]) ? function(nm, fn) {
                    return function() {
                        var tmp = this._super;
                        this._super = _super[nm];
                        try {
                            return fn.apply(this, arguments);
                        } finally {
                            this._super = tmp;
                        }
                    };
                }(name, prop[name]) : prop[name];
            }
            Class.prototype = prototype;
            Class.prototype.constructor = Class;
            Class.extend = arguments.callee;
            if (dependencies && dependencies.length > 0) {
                Class.$dependencies = dependencies;
            }
            if (this.$dependencies && this.$dependencies.length > 0) {
                Class.$dependencies = Class.$dependencies ? Class.$dependencies.concat(this.$dependencies) : this.$dependencies;
            }
            return Class;
        };
    })(vdb.core);
    vdb.adapter = {};
    vdb.adapter.FlashEventsAdapter = vdb.core.Class.extend(function() {
        function _enrichVideoData(data) {
            var state = this.getPlayerState();
            var video = state["videoId"] && _getVideoById.call(this, state["videoId"]);
            if (!video) {
                return false;
            }
            data["currentTime"] = state["currentTime"];
            data["duration"] = state["videoLength"];
            data["name"] = video["name"];
            data["url"] = video["videoUrl"];
            if (video["metadata"] && video["metadata"]["content"]) {
                var content = video["metadata"]["content"];
                for (var key in content) {
                    if (content.hasOwnProperty(key)) {
                        data[key] = content[key];
                    }
                }
            }
            return true;
        }
        function _onVideoEvent(e) {
            if (!this._bid || !this._bid["videos"]) {
                return;
            }
            var event = e["type"] == VIDEO_STATE_CHANGE_EVENT ? VIDEO_FLOW_EVENTS[e["state"]] : VIDEO_EVENTS[e["type"]];
            if (!event) {
                return;
            }
            var data = e && e["data"] || {};
            if (_enrichVideoData.call(this, data)) {
                this.dispatchEvent({type:event, data:data});
            }
        }
        function _getVideoById(vid) {
            var videos = this._bid["videos"];
            for (var i = 0;i < videos.length;i++) {
                var video = videos[i];
                if (video["videoId"] == vid) {
                    return video;
                }
            }
            return null;
        }
        function _onAdEvent(e) {
            var d = e && e["data"];
            var adStage = d && d["adStage"];
            var data = {};
            var event;
            if (e["type"] == AD_FLOW_EVENT_NAME) {
                event = AD_FLOW_EVENTS[adStage];
                data["adStage"] = adStage;
            } else {
                event = AD_EVENTS[e["type"]];
            }
            if (event) {
                data["isAd"] = true;
                if (d) {
                    data["adId"] = d["adId"];
                    data["rid"] = d["ruleId"];
                    data["creativeId"] = d["creativeId"];
                    data["renditionId"] = d["renditionId"];
                    data["type"] = d["adType"];
                    data["currentTime"] = d["currentTime"] || 0;
                    data["duration"] = d["duration"] || 0;
                    data["vendor"] = d["vendor"] || 0;
                    data["id"] = d["adCampaignId"] || 0;
                    data["overlayURL"] = d["overlayURL"] || "";
                    data["adImpressionId"] = d["adImpressionId"];
                    data["transactionId"] = d["transactionId"];
                    data["adCampaignId"] = d["adCampaignId"];
                    data["adSetId"] = d["adSetId"];
                }
                if (e["adType"]) {
                    data["type"] = e["adType"];
                }
                if (adStage === vdb.ads.AdStage.STARTED) {
                    var videoData = {};
                    if (_enrichVideoData.call(this, videoData)) {
                        videoData["isAd"] = true;
                        videoData["duration"] = data["duration"] || "";
                        this.dispatchEvent({type:PlayerEvent.VIDEO_PLAY, data:videoData});
                    }
                }
                this.dispatchEvent({type:event, data:data});
            }
        }
        function _prepareListeners() {
            this.addEventListener(AD_FLOW_EVENT_NAME, _onAdEvent.bind(this));
            for (var eventName in AD_EVENTS) {
                if (AD_EVENTS.hasOwnProperty(eventName)) {
                    this.addEventListener(eventName, _onAdEvent.bind(this));
                }
            }
            for (eventName in VIDEO_EVENTS) {
                if (VIDEO_EVENTS.hasOwnProperty(eventName)) {
                    this.addEventListener(eventName, _onVideoEvent.bind(this));
                }
            }
            this.addEventListener(VIDEO_STATE_CHANGE_EVENT, _onVideoEvent.bind(this));
        }
        var PlayerEvent = vdb.constants.PlayerEvent;
        var VIDEO_STATE_CHANGE_EVENT = "stateChange";
        var VIDEOS_UPDATED_EVENT = "Videos.Updated";
        var VIDEO_EVENTS = {"Reporting.Video.Play":PlayerEvent.VIDEO_START, "heartbeat":PlayerEvent.VIDEO_TIMEUPDATE, "Reporting.Video.HWM":PlayerEvent.VIDEO_END, "metadataReceived":PlayerEvent.VIDEO_META, "Video.Set":PlayerEvent.VIDEO_SELECTED, "Content.Impression":PlayerEvent.CONTENT_BEFORE_IMPRESSION, "Video.Clicked":PlayerEvent.CONTENT_CLICK, "volumechange":PlayerEvent.VIDEO_VOLUME_CHANGED};
        var VIDEO_FLOW_EVENTS = {"playing":PlayerEvent.VIDEO_PLAY, "resumed":PlayerEvent.VIDEO_PLAY, "paused":PlayerEvent.VIDEO_PAUSE};
        var AD_FLOW_EVENT_NAME = "Reporting.Ad.Engine.Flow";
        var AD_FLOW_EVENTS = {};
        AD_FLOW_EVENTS[vdb.ads.AdStage.LOADED] = PlayerEvent.AD_META;
        AD_FLOW_EVENTS[vdb.ads.AdStage.STARTED] = PlayerEvent.AD_START;
        AD_FLOW_EVENTS[vdb.ads.AdStage.FINISHED] = PlayerEvent.AD_END;
        AD_FLOW_EVENTS[vdb.ads.AdStage.FIRST_QUARTILE] = PlayerEvent.AD_QUARTILE;
        AD_FLOW_EVENTS[vdb.ads.AdStage.SECOND_QUARTILE] = PlayerEvent.AD_QUARTILE;
        AD_FLOW_EVENTS[vdb.ads.AdStage.THIRD_QUARTILE] = PlayerEvent.AD_QUARTILE;
        var AD_EVENTS = {"AdEvent.RESUMED":PlayerEvent.AD_PLAY, "AdEvent.PAUSED":PlayerEvent.AD_PAUSED, "AdEvent.AD_TIME_UPDATE":PlayerEvent.AD_TIMEUPDATE, "AdEvent.AD_BLOCKER_COMPLETE":PlayerEvent.AD_BLOCKER_COMPLETE, "AdEvent.AD_BLOCKER_REQUEST":PlayerEvent.AD_BLOCKER_REQUEST, "Reporting.Ad.Engine.Response":PlayerEvent.AD_ENGINE_RESPONSE};
        return{init:function(adapter) {
            _prepareListeners.call(adapter);
        }};
    }());
    vdb.events.Event = vdb.core.Class.extend(function() {
        var init = function(type, data) {
            this.type = type;
            this.data = data;
        };
        var clone = function() {
            return new vdb.events.Event(this.type);
        };
        return{type:null, data:null, target:null, init:init, clone:clone, toString:function() {
            return "Event{type=" + this.type + "}";
        }};
    }());
    (function(def) {
        def.COMPLETE = "complete";
    })(vdb.events.Event);
    vdb.events.TimeQueueEvent = vdb.events.Event.extend(function() {
        var init = function(type, time, percent) {
            this._super(type);
            this.time = time;
            this.percent = percent;
        };
        return{init:init, time:0, percent:0, toString:function() {
            return "TimeQueueEvent{type=" + this.type + ", time=" + this.time + ", percent=" + this.percent + "}";
        }};
    }());
    (function(def) {
        def.MIDROLL = "midroll";
        def.DECILE = "decile";
        def.OVERLAY = "overlay";
        def.PREROLL = "preroll";
    })(vdb.events.TimeQueueEvent);
    (function(def) {
        function isValidElement(element) {
            return element.nodeType !== 3 && element.nodeType !== 8;
        }
        function stop(event) {
            event.preventDefault(event);
            event.stopPropagation(event);
        }
        function fix(event, element) {
            if (!event) {
                event = window.event;
            }
            event.stop = function() {
                stop(event);
            };
            if (typeof event.target === "undefined") {
                event.target = event.srcElement || element;
            }
            if (!event.preventDefault) {
                event.preventDefault = function() {
                    event.returnValue = false;
                };
            }
            if (!event.stopPropagation) {
                event.stopPropagation = function() {
                    event.cancelBubble = true;
                };
            }
            if (event.target && event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            var doc = element.ownerDocument;
            if (doc && event.pageX == null && event.clientX != null) {
                var docEl = doc.documentElement;
                var body = doc.body;
                event.pageX = event.clientX + (docEl && docEl.scrollLeft || body && body.scrollLeft || 0) - (docEl && docEl.clientLeft || body && body.clientLeft || 0);
                event.pageY = event.clientY + (docEl && docEl.scrollTop || body && body.scrollTop || 0) - (docEl && docEl.clientTop || body && body.clientTop || 0);
            }
            return event;
        }
        function createResponder(element, handler) {
            return function(event) {
                fix(event, element);
                return handler(event);
            };
        }
        function removeCachedResponder(element, type, handler) {
            var i = 0;
            var responder;
            for (var j = 0;j < cache.length;j++) {
                if (cache[j].element !== element || cache[j].type !== type || cache[j].handler !== handler) {
                    cache[i++] = cache[j];
                } else {
                    responder = cache[j].responder;
                }
            }
            cache.length = i;
            return responder;
        }
        function ready() {
            if (!isReady) {
                if (!document.body) {
                    setTimeout(ready, 13);
                }
                isReady = true;
                for (var i = 0;i < def.readyCallbacks.length;i++) {
                    def.readyCallbacks[i]();
                }
                def.readyCallbacks = null;
            }
        }
        function DOMReadyScrollCheck() {
            if (isReady) {
                return;
            }
            try {
                document.documentElement.doScroll("left");
            } catch (e) {
                setTimeout(DOMReadyScrollCheck, 1);
                return;
            }
            ready();
        }
        function bindOnReady() {
            if (onReadyBound) {
                return;
            }
            onReadyBound = true;
            if (document.readyState === "complete") {
                ready();
            } else {
                if (document.addEventListener) {
                    document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
                    window.addEventListener("load", ready, false);
                } else {
                    if (document.attachEvent) {
                        document.attachEvent("onreadystatechange", DOMContentLoaded);
                        window.attachEvent("onload", ready);
                        var topLevel = false;
                        try {
                            topLevel = window.frameElement == null;
                        } catch (e) {
                        }
                        if (document.documentElement.doScroll && topLevel) {
                            DOMReadyScrollCheck();
                        }
                    }
                }
            }
        }
        function IEType(type) {
            if (type.match(/:/)) {
                return type;
            }
            return "on" + type;
        }
        var cache = [];
        var onReadyBound = false;
        var isReady = false;
        var DOMContentLoaded;
        def.readyCallbacks = [];
        if (typeof document !== "undefined") {
            if (document.addEventListener) {
                DOMContentLoaded = function() {
                    document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                    ready();
                };
            } else {
                if (document.attachEvent) {
                    DOMContentLoaded = function() {
                        if (document.readyState === "complete") {
                            document.detachEvent("onreadystatechange", DOMContentLoaded);
                            ready();
                        }
                    };
                }
            }
        }
        bindOnReady();
        def.addEventListener = function(element, type, handler) {
            if (!isValidElement(element)) {
                return;
            }
            var responder = createResponder(element, handler);
            cache.push({element:element, type:type, handler:handler, responder:responder});
            if (type.match(/:/) && element.attachEvent) {
                element.attachEvent("ondataavailable", responder);
            } else {
                if (element.addEventListener) {
                    element.addEventListener(type, responder, false);
                } else {
                    if (element.attachEvent) {
                        element.attachEvent(IEType(type), responder);
                    }
                }
            }
        };
        def.dispatchEvent = function(element, type, data) {
            var event;
            var doc = element.ownerDocument || element.document;
            if (doc.createEvent) {
                event = doc.createEvent("HTMLEvents");
                event.data = data;
                fix(event, element);
                event.eventName = type;
                event.initEvent(type, true, true);
                return!element.dispatchEvent(event);
            }
            event = doc.createEventObject();
            fix(event, element);
            event.data = data;
            if (type.match(/:/)) {
                event.eventName = type;
                event.eventType = "ondataavailable";
                return element.fireEvent(event.eventType, event);
            }
            return element.fireEvent(IEType(type), event);
        };
        def.removeEventListener = function(element, type, handler) {
            if (!isValidElement(element)) {
                return;
            }
            var responder = removeCachedResponder(element, type, handler);
            if (document.removeEventListener) {
                element.removeEventListener(type, responder, false);
            } else {
                element.detachEvent(IEType(type), responder);
            }
        };
        def.wrap = function(element) {
            var wrapper = {};
            wrapper.element = element;
            wrapper.on = function(events, handler) {
                var event = events.split(" ");
                for (var i = 0;i < event.length;i++) {
                    this.addEventListener(event[i], handler);
                }
            };
            wrapper.off = function(events, handler) {
                var event = events.split(" ");
                for (var i = 0;i < event.length;i++) {
                    this.removeEventListener(event[i], handler);
                }
            };
            wrapper.addEventListener = function(event, handler) {
                def.addEventListener(element, event, handler);
            };
            wrapper.removeEventListener = function(event, handler) {
                def.removeEventListener(element, event, handler);
            };
            return wrapper;
        };
    })(vdb.events);
    vdb.extras.ExtrasResolver = vdb.core.Class.extend(function() {
        function getPlaylistDependantExtras() {
            var extras = [];
            for (var i = 0;i < this._bid["videos"].length;i++) {
                var metadata = this._bid["videos"][i]["metadata"] || {};
                if (metadata["live"]) {
                    extras.push("akamai_sola");
                    break;
                }
            }
            return extras;
        }
        function getExtras(type) {
            var extras = [];
            for (var i = 0;i < this._extras.length;i++) {
                var extra = this._extras[i];
                var copy = {};
                vdb.Utils.copy(extra, copy);
                var urls = copy["urls"] || {};
                if (urls[type]) {
                    copy["url"] = urls[type];
                    extras.push(copy);
                }
            }
            return extras;
        }
        function getCoreExtras() {
            return getExtras.call(this, "CORE");
        }
        function getPlayerExtras() {
            return getExtras.call(this, "JS");
        }
        function hasExtra(urlSubstring) {
            var i = 0;
            for (var l = this._extras.length;i < l;i++) {
                var extra = this._extras[i];
                var urls = extra["urls"] || {};
                var jsUrl = urls["JS"] || "";
                var coreUrl = urls["CORE"] || "";
                if (jsUrl.indexOf(urlSubstring) !== -1 || coreUrl.indexOf(urlSubstring) !== -1) {
                    return true;
                }
            }
            return false;
        }
        return{init:function(template, bid) {
            this._extras = template["extras"] || [];
            this._bid = bid || {"videos":[]};
        }, getCoreExtras:getCoreExtras, getPlayerExtras:getPlayerExtras, getPlaylistDependantExtras:getPlaylistDependantExtras, hasExtra:hasExtra};
    }());
    vdb.reporting = {};
    vdb.reporting.Environment = vdb.core.Class.extend(function() {
        var PlayerEvent = vdb.constants.PlayerEvent;
        var TimeQueueEvent = vdb.events.TimeQueueEvent;
        var EnvironmentEvent = vdb.events.EnvironmentEvent;
        var initEventMap = function() {
            this._playerEvents = {};
            this._playerEvents[EnvironmentEvent.VIDEO_SELECTED] = PlayerEvent.VIDEO_SELECTED;
            this._playerEvents[EnvironmentEvent.VIDEO_META] = PlayerEvent.VIDEO_META;
            this._playerEvents[EnvironmentEvent.VIDEO_END] = PlayerEvent.VIDEO_END;
            this._playerEvents[EnvironmentEvent.VIDEO_TIMEUPDATE] = PlayerEvent.VIDEO_TIMEUPDATE;
            this._playerEvents[EnvironmentEvent.VIDEO_SEEKSTART] = PlayerEvent.VIDEO_SEEKSTART;
            this._playerEvents[EnvironmentEvent.VIDEO_SEEKEND] = PlayerEvent.VIDEO_SEEKEND;
            this._playerEvents[EnvironmentEvent.VIDEO_START] = PlayerEvent.VIDEO_START;
            this._playerEvents[EnvironmentEvent.VIDEO_PLAY] = PlayerEvent.VIDEO_PLAY;
            this._playerEvents[EnvironmentEvent.VIDEO_WAITING] = PlayerEvent.VIDEO_WAITING;
            this._playerEvents[EnvironmentEvent.BUFFERING_START] = PlayerEvent.BUFFERING_START;
            this._playerEvents[EnvironmentEvent.BUFFERING_END] = PlayerEvent.BUFFERING_END;
            this._playerEvents[EnvironmentEvent.USER_INTERACTION] = PlayerEvent.USER_INTERACTION;
            this._playerEvents[EnvironmentEvent.CONTEXT_INTENT] = PlayerEvent.CONTEXT_INTENT;
            this._playerEvents[EnvironmentEvent.CONTEXT_ENDED] = PlayerEvent.CONTEXT_ENDED;
            this._playerEvents[EnvironmentEvent.VIDEO_START] = PlayerEvent.VIDEO_START;
            this._playerEvents[EnvironmentEvent.VIDEO_PAUSE] = PlayerEvent.VIDEO_PAUSE;
            this._playerEvents[EnvironmentEvent.MIDROLL] = TimeQueueEvent.MIDROLL;
            this._playerEvents[EnvironmentEvent.OVERLAY] = TimeQueueEvent.OVERLAY;
            this._playerEvents[EnvironmentEvent.AD_START] = PlayerEvent.AD_START;
            this._playerEvents[EnvironmentEvent.AD_TIMEUPDATE] = PlayerEvent.AD_TIMEUPDATE;
            this._playerEvents[EnvironmentEvent.AD_PAUSED] = PlayerEvent.AD_PAUSED;
            this._playerEvents[EnvironmentEvent.AD_WAITING] = PlayerEvent.AD_WAITING;
            this._playerEvents[EnvironmentEvent.AD_END] = PlayerEvent.AD_END;
            this._playerEvents[EnvironmentEvent.AD_BLOCKER_COMPLETE] = PlayerEvent.AD_BLOCKER_COMPLETE;
            this._playerEvents[EnvironmentEvent.PLAYER_CONTROLS_STATE_CHANGE] = PlayerEvent.PLAYER_CONTROLS_STATE_CHANGE;
            this._contextEvents = {};
            this._contextEvents[EnvironmentEvent.PLAYER_DOCKED] = PlayerEvent.PLAYER_DOCKED;
            this._contextEvents[EnvironmentEvent.PLAYER_RESIZE] = PlayerEvent.PLAYER_RESIZE;
            this._contextEvents[EnvironmentEvent.MANIFEST_LOADED] = PlayerEvent.MANIFEST_LOADED;
            this._contextEvents[EnvironmentEvent.BITRATE_UPDATE] = PlayerEvent.BITRATE_UPDATE;
        };
        return{init:function(context) {
            this.context = context;
            initEventMap.call(this);
        }, getCurrentVideo:function() {
            return this.context.api && this.context.api.adapter && this.context.api.adapter.getCurrentVideo();
        }, getCurrentVideoId:function() {
            return this.context.api && this.context.api.adapter && this.context.api.adapter.getCurrentVideoId();
        }, getVideoTime:function() {
            return this.getCurrentVideo() && this.context.api.adapter.getPlayerState()["currentTime"] || 0;
        }, getAdConfigEntry:function() {
            return this.context.api && this.context.api.adapter && this.context.api.adapter.player.controller.getAdConfigEntry();
        }, getVolume:function() {
            return this.context.api && this.context.api.adapter && this.context.api.adapter.getVolume() || 0;
        }, isMuted:function() {
            return this.context.api && this.context.api.adapter && this.context.api.adapter.player.controller.isMuted();
        }, addEventListener:function(event, handler) {
            var playerEvent = this._playerEvents[event];
            var contextEvent = this._contextEvents[event];
            if (playerEvent) {
                this.context.api.player.addEventListener(playerEvent, handler);
            } else {
                if (contextEvent) {
                    this.context.addEventListener(contextEvent, handler);
                }
            }
        }, removeEventListener:function(event, handler) {
            var playerEvent = this._playerEvents[event];
            var contextEvent = this._contextEvents[event];
            if (playerEvent) {
                this.context.api.player.removeEventListener(playerEvent, handler);
            } else {
                if (contextEvent) {
                    this.context.removeEventListener(contextEvent, handler);
                }
            }
        }, getSize:function() {
            return this.context.api.player.getSize();
        }, getVisiblePercent:function() {
            return this.context.getVisiblePercent();
        }, getAdOnly:function() {
            return this.context.api.player.controller.adOnly;
        }, getPlayerState:function() {
            return this.context.api && this.context.api.adapter.getPlayerState();
        }, getAdBlockerPromise:function() {
            return this.context.getAdBlockerSnifferPromise();
        }, getInitPromise:function() {
            return this.context.api.getAdapterPromise();
        }, getIntegration:function() {
            return "";
        }, setIntegration:function() {
        }, setCurrentVideo:function() {
        }};
    }());
    vdb.reporting.moat = {};
    vdb.reporting.moat.MoatEvent = {AD_IMPRESSION:"AdImpression", AD_VIDEO_START:"AdVideoStart", AD_VOLUME_CHANGE:"AdVolumeChange", AD_VIDEO_COMPLETE:"AdVideoComplete", AD_PAUSED:"AdPaused", AD_PLAYING:"AdPlaying", AD_VIDEO_FIRST_QUARTILE:"AdVideoFirstQuartile", AD_VIDEO_MIDPOINT:"AdVideoMidpoint", AD_VIDEO_THIRD_QUARTILE:"AdVideoThirdQuartile"};
    (function(MoatEvent) {
        MoatEvent.QUARTILE_EVENT_MAPPING = {"q1":MoatEvent.AD_VIDEO_FIRST_QUARTILE, "q2":MoatEvent.AD_VIDEO_MIDPOINT, "q3":MoatEvent.AD_VIDEO_THIRD_QUARTILE};
    })(vdb.reporting.moat.MoatEvent);
    vdb.reporting.ReportingParameters = vdb.core.Class.extend(function() {
        return{getPlatformSupport:function() {
        }, getParameters:function() {
        }};
    }());
    vdb.define(function(ctx, context) {
        ctx.createBasicTracker = function() {
            return context.getInjector().resolveSync(vdb.enums.Dependencies.BASIC_TRACKER);
        };
    });
    vdb.define(function(ctx, context) {
        var fpv = "unknown";
        try {
            if (navigator.plugins && navigator.plugins.length > 0) {
                var type = "application/x-shockwave-flash";
                var mimeTypes = navigator.mimeTypes;
                if (mimeTypes && mimeTypes[type] && mimeTypes[type].enabledPlugin && mimeTypes[type].enabledPlugin.description) {
                    fpv = mimeTypes[type].enabledPlugin.description;
                }
            }
        } catch (e) {
            fpv = "error" + (e.message ? ":" + e.message : "");
        }
        context.getInjector().resolveSync(vdb.enums.Dependencies.PIXEL_TRACKER).callPixel("minjs-loaded.gif", {"fpv":fpv});
    });
    vdb.utils = {};
    vdb.utils.Fullscreen = function() {
        var supportsKeyboardInput = typeof Element !== "undefined" && "ALLOW_KEYBOARD_INPUT" in Element;
        var fn = function() {
            var fnMap = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"], ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen",
                "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]];
            var l = fnMap.length;
            var val;
            var valLength;
            var i = -1;
            for (var ret = {};++i < l;) {
                val = fnMap[i];
                if (val && val[1] in document) {
                    for (i = -1, valLength = val.length;++i < valLength;) {
                        ret[fnMap[0][i]] = val[i];
                    }
                    return ret;
                }
            }
            return false;
        }();
        if (!fn) {
            return{enabled:function() {
                return false;
            }};
        }
        return{enabled:function() {
            return!!document[fn["fullscreenEnabled"]];
        }, enter:function(elem) {
            var request = fn["requestFullscreen"];
            elem = elem || document.documentElement;
            if (/5\.1[\.\d]* Safari/.test(navigator.userAgent)) {
                elem[request]();
            } else {
                elem[request](supportsKeyboardInput && Element.ALLOW_KEYBOARD_INPUT);
            }
        }, exit:function() {
            document[fn["exitFullscreen"]]();
        }, isFullscreen:function() {
            return!!document[fn["fullscreenElement"]];
        }, element:function() {
            return document[fn["fullscreenElement"]];
        }, addFullscreenChangeListener:function(callback) {
            document.addEventListener(fn["fullscreenchange"], callback);
        }, removeFullscreenChangeListener:function(callback) {
            document.removeEventListener(fn["fullscreenchange"], callback);
        }};
    }();
    vdb.utils.HostWindowProvider = vdb.core.Class.extend(function() {
        return{init:function(win) {
            this.window = win;
        }, getWindow:function() {
            return this.window;
        }, getDocument:function() {
            return this.window.document;
        }};
    }());
    vdb.utils.Region = vdb.core.Class.extend({x:0, y:0, width:0, height:0, setValues:function(newX, newY, newW, newH) {
        this.x = newX;
        this.y = newY;
        this.width = newW;
        this.height = newH;
    }, empty:function() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.width) + Math.abs(this.height) === 0;
    }});
    (function(def) {
        def.parse = function(raw) {
            var region = new vdb.utils.Region;
            if (raw) {
                var x = raw["x"];
                var y = raw["y"];
                var width = raw["w"];
                var height = raw["h"];
                region.setValues(x, y, width, height);
            } else {
                region.setValues(0, 0, 0, 0);
            }
            return region;
        };
    })(vdb.utils.Region);
    vdb.utils.StringUtils = {isEmpty:function(str) {
        return!str || vdb.utils.StringUtils.trim(str) === "";
    }, changeExtension:function(fileName, newExtension) {
        return fileName.substring(0, fileName.lastIndexOf(".")) + "." + newExtension;
    }, trim:function(str, chars) {
        return vdb.utils.StringUtils.ltrim(vdb.utils.StringUtils.rtrim(str, chars), chars);
    }, ltrim:function(str, chars) {
        if (chars == null) {
            chars = "\\s";
        }
        return str.replace(new RegExp("^[" + chars + "]+", "g"), "");
    }, rtrim:function(str, chars) {
        if (chars == null) {
            chars = "\\s";
        }
        return str.replace(new RegExp("[" + chars + "]+$", "g"), "");
    }, startsWith:function(str, prefix) {
        return str.indexOf(prefix) === 0;
    }, endsWith:function(str, suffix) {
        var i = str.lastIndexOf(suffix);
        return i !== -1 && i === str.length - suffix.length;
    }, replaceAll:function(str, replace, by) {
        return str.replace(new RegExp(replace, "g"), by);
    }, removeProtocol:function(url) {
        return url.replace(/.*?:\/\//g, "");
    }, equals:function(str1, str2, ignoreCase) {
        ignoreCase = ignoreCase === true;
        if (typeof str1 !== "string" || typeof str2 !== "string") {
            return false;
        }
        if (ignoreCase) {
            str1 = str1.toLowerCase();
            str2 = str2.toLowerCase();
        }
        return str1 === str2;
    }, capitalizeFirstLetter:function(str) {
        if (str) {
            str = str.toLowerCase();
            return str.charAt(0).toUpperCase() + str.slice(1);
        }
        return undefined;
    }};
    vdb.utils.UrlUtils = {getParameterByName:function(name, url) {
        var location = window.location;
        url = url || location.search + location.hash;
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
        var results = regex.exec(url);
        return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }};
    vdb.Promise = {};
    (function(root) {
        function noop() {
        }
        function bind(fn, thisArg) {
            return function() {
                fn.apply(thisArg, arguments);
            };
        }
        function Promise(fn) {
            if (typeof this !== "object") {
                throw new TypeError("Promises must be constructed via new");
            }
            if (typeof fn !== "function") {
                throw new TypeError("not a function");
            }
            this._state = 0;
            this._value = undefined;
            this._deferreds = [];
            doResolve(fn, this);
        }
        function handle(self, deferred) {
            for (;self._state === 3;) {
                self = self._value;
            }
            if (self._state === 0) {
                self._deferreds.push(deferred);
                return;
            }
            asap(function() {
                var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
                if (cb === null) {
                    (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
                    return;
                }
                var ret;
                try {
                    ret = cb(self._value);
                } catch (e) {
                    reject(deferred.promise, e);
                    return;
                }
                resolve(deferred.promise, ret);
            });
        }
        function resolve(self, newValue) {
            try {
                if (newValue === self) {
                    throw new TypeError("A promise cannot be resolved with itself.");
                }
                if (newValue && (typeof newValue === "object" || typeof newValue === "function")) {
                    var then = newValue.then;
                    if (newValue instanceof Promise) {
                        self._state = 3;
                        self._value = newValue;
                        finale(self);
                        return;
                    } else {
                        if (typeof then === "function") {
                            doResolve(bind(then, newValue), self);
                            return;
                        }
                    }
                }
                self._state = 1;
                self._value = newValue;
                finale(self);
            } catch (e) {
                reject(self, e);
            }
        }
        function reject(self, newValue) {
            var errorHandler;
            var i = 0;
            for (var len = self._deferreds.length;!errorHandler && i < len;i++) {
                errorHandler = self._deferreds[i].onRejected;
            }
            if (!errorHandler && vdb.utils.UrlUtils.getParameterByName && vdb.utils.UrlUtils.getParameterByName("logpromisereject") === "1") {
                if (window.console) {
                    console.error(newValue);
                }
            }
            self._state = 2;
            self._value = newValue;
            finale(self);
        }
        function finale(self) {
            var i = 0;
            for (var len = self._deferreds.length;i < len;i++) {
                handle(self, self._deferreds[i]);
            }
            self._deferreds = null;
        }
        function Handler(onFulfilled, onRejected, promise) {
            this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
            this.onRejected = typeof onRejected === "function" ? onRejected : null;
            this.promise = promise;
        }
        function doResolve(fn, self) {
            var done = false;
            try {
                fn(function(value) {
                    if (done) {
                        return;
                    }
                    done = true;
                    resolve(self, value);
                }, function(reason) {
                    if (done) {
                        return;
                    }
                    done = true;
                    reject(self, reason);
                });
            } catch (ex) {
                if (done) {
                    return;
                }
                done = true;
                reject(self, ex);
            }
        }
        var setTimeoutFunc = setTimeout;
        var asap = typeof setImmediate === "function" && setImmediate || function(fn) {
            setTimeoutFunc(fn, 1);
        };
        var isArray = Array.isArray || function(value) {
            return Object.prototype.toString.call(value) === "[object Array]";
        };
        Promise.prototype["catch"] = function(onRejected) {
            return this.then(null, onRejected);
        };
        Promise.prototype.then = function(onFulfilled, onRejected) {
            var prom = new Promise(noop);
            handle(this, new Handler(onFulfilled, onRejected, prom));
            return prom;
        };
        Promise.all = function() {
            var args = Array.prototype.slice.call(arguments.length === 1 && isArray(arguments[0]) ? arguments[0] : arguments);
            return new Promise(function(resolve, reject) {
                function res(i, val$$0) {
                    try {
                        if (val$$0 && (typeof val$$0 === "object" || typeof val$$0 === "function")) {
                            var then = val$$0.then;
                            if (typeof then === "function") {
                                then.call(val$$0, function(val) {
                                    res(i, val);
                                }, reject);
                                return;
                            }
                        }
                        args[i] = val$$0;
                        if (--remaining === 0) {
                            resolve(args);
                        }
                    } catch (ex) {
                        reject(ex);
                    }
                }
                if (args.length === 0) {
                    return resolve([]);
                }
                var remaining = args.length;
                for (var i$$0 = 0;i$$0 < args.length;i$$0++) {
                    res(i$$0, args[i$$0]);
                }
            });
        };
        Promise.resolve = function(value) {
            if (value && typeof value === "object" && value.constructor === Promise) {
                return value;
            }
            return new Promise(function(resolve) {
                resolve(value);
            });
        };
        Promise.reject = function(value) {
            return new Promise(function(resolve, reject) {
                reject(value);
            });
        };
        Promise.race = function(values) {
            return new Promise(function(resolve, reject) {
                var i = 0;
                for (var len = values.length;i < len;i++) {
                    values[i].then(resolve, reject);
                }
            });
        };
        Promise.wrapWaiting = function(promise, continuation) {
            return function deferredCall() {
                var args = Array.prototype.slice.apply(arguments);
                promise = promise || Promise.resolve();
                return promise.then(continuation.bind.apply(continuation, [this].concat(args)));
            };
        };
        Promise.wrapWaiting(null, function() {
        })();
        Promise._setImmediateFn = function _setImmediateFn(fn) {
            asap = fn;
        };
        root.Promise = Promise;
    })(vdb);
    vdb.Dom = vdb.core.Class.extend(function() {
        return{init:function(doc) {
            this._sourceDocument = doc;
            this._targetDocument = doc;
        }, setTargetDocument:function(doc) {
            this._targetDocument = doc;
        }, removeAttr:function(element, attribute) {
            element.removeAttribute(attribute);
        }, attr:function(element, attributeName, value) {
            if (value === undefined) {
                return element.getAttribute(attributeName);
            } else {
                if (value === null) {
                    this.removeAttr(element, attributeName);
                } else {
                    element.setAttribute(attributeName, value);
                }
            }
            return undefined;
        }, _manipulateDOM:function(element, html, callback) {
            var isTable = element.nodeName == "TABLE";
            var div = this._targetDocument.createElement("div");
            div.innerHTML = "<" + element.nodeName + ">" + html + "</" + element.nodeName + ">";
            var temp = isTable ? div.lastChild.lastChild : div.lastChild;
            callback(isTable ? element.lastChild : element, temp);
        }, nodeFromHTML:function(html) {
            var div = this._targetDocument.createElement("div");
            div.innerHTML = html;
            return div.lastChild;
        }, _getText:function(elements) {
            var results = "";
            var i = 0;
            for (var element;(element = elements[i++]) != null;) {
                if (element.nodeType == vdb.NodeType.TEXT_NODE || element.nodeType == vdb.NodeType.CDATA_SECTION_NODE) {
                    results += element.nodeValue;
                } else {
                    if (element.nodeType != vdb.NodeType.COMMENT_NODE) {
                        results += this._getText(element.childNodes);
                    }
                }
            }
            return results;
        }, replace:function(element, html) {
            this._manipulateDOM(element, html, function(insert, shim) {
                element.replaceChild(shim, insert);
                return insert;
            });
        }, append:function(element, html) {
            this._manipulateDOM(element, html, function(insertTo, shim) {
                insertTo.appendChild(shim.firstChild);
                return shim.firstChild;
            });
        }, html:function(element, html) {
            if (html == null) {
                return element.innerHTML;
            }
            try {
                element.innerHTML = html;
            } catch (e) {
                this.replace(element, html);
            }
            return null;
        }, text:function(element, text) {
            if (text == null) {
                return this._getText([element]);
            }
            this.empty(element);
            element.appendChild(this._targetDocument.createTextNode(text));
            return null;
        }, empty:function(element) {
            for (;element.firstChild != null;) {
                element.removeChild(element.firstChild);
            }
        }, createElement:function(elementName) {
            return this._targetDocument.createElement(elementName);
        }, createDocumentFragment:function() {
            return this._targetDocument.createDocumentFragment();
        }, getHead:function(doc) {
            doc = doc || this._targetDocument;
            return doc.head || doc.getElementsByTagName("head")[0];
        }, _createJSElement:function(src, crossOrigin, async, attributes) {
            var script = this.createElement("script");
            this.attr(script, "type", "text/javascript");
            for (var attribute in attributes) {
                if (Object.prototype.hasOwnProperty.call(attributes, attribute)) {
                    this.attr(script, attribute, attributes[attribute]);
                }
            }
            if (async) {
                this.attr(script, "async", "true");
            }
            if (src) {
                this.attr(script, "src", src);
            }
            if (crossOrigin) {
                this.attr(script, "crossorigin", "anonymous");
            }
            return script;
        }, loadScript:function(src, crossOrigin, async, attributes) {
            function clearHandlers() {
                script.onload = script.onerror = script.onreadystatechange = function() {
                };
                head.removeChild(script);
            }
            if (src && src.indexOf("//") == 0 && window.location.protocol.indexOf("http") != 0) {
                src = "https:" + src;
            }
            var script = this._createJSElement(src, crossOrigin, async, attributes);
            var head = this.getHead(this._sourceDocument);
            var promise = new vdb.Promise(function(resolve, reject) {
                script.onload = resolve;
                script.onerror = reject;
            });
            script.onreadystatechange = function() {
                if (script.readyState == "complete" || script.readyState == "loaded") {
                    script.onload();
                }
            };
            promise.then(clearHandlers, clearHandlers);
            head.appendChild(script);
            return promise;
        }, injectCode:function(code) {
            var scriptTag = this._createJSElement();
            this.text(scriptTag, code);
            this.getHead().appendChild(scriptTag);
            return scriptTag;
        }, getJSONP:function(url, callback, win) {
            var functionName = "VDBCallback" + Math.round(Math.random() * 1E4);
            var wnd = win || this._sourceDocument && this._sourceDocument.defaultView || window;
            wnd[functionName] = function() {
                if (typeof callback === "function") {
                    callback.apply({}, arguments);
                }
                try {
                    delete wnd[functionName];
                } catch (e) {
                    wnd[functionName] = undefined;
                }
            };
            this.loadScript(url.replace("[callback]", functionName));
        }, loadCss:function(url) {
            var link = this._targetDocument.createElement("link");
            this.getHead().appendChild(link);
            link.rel = "stylesheet";
            link.type = "text/css";
            link.href = url;
        }, embedCssToHead:function(css, head) {
            var style = this._targetDocument.createElement("style");
            style.type = "text/css";
            style.appendChild(this._targetDocument.createTextNode(css));
            (head || this.getHead()).appendChild(style);
            return style;
        }, createImage:function(url) {
            var image = this._targetDocument.createElement("img");
            image.src = url;
            return image;
        }, createDiv:function(htmlClass) {
            var div = this._targetDocument.createElement("div");
            if (htmlClass != null) {
                div.className = htmlClass;
            }
            return div;
        }, log:function(message) {
            if (!this._debugLayer) {
                this._debugLayer = this._targetDocument.createElement("div");
                this._debugLayer.style.position = "fixed";
                this._debugLayer.style.top = "0px";
                this._debugLayer.style.left = "0px";
                var body = this._sourceDocument.getElementsByTagName("body")[0];
                body.appendChild(this._debugLayer);
            }
            this._debugLayer.innerHTML = message + "<br>" + this._debugLayer.innerHTML;
        }, hideVideoElementControls:function() {
            this.embedCssToHead("video::-webkit-media-controls-start-playback-button{visibility:hidden!important;opacity:0!important}video::-webkit-media-controls{visibility:hidden!important;opacity:0!important}");
        }};
    }());
    vdb.dom = new vdb.Dom(document);
    vdb.Future = {};
    (function(root) {
        var Future = function() {
            var _this = this;
            _this._promise = new root.Promise(function(resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
        };
        Future.prototype.getPromise = function() {
            return this._promise;
        };
        root.Future = Future;
    })(vdb);
    vdb.ioc = {};
    vdb.ioc.Incubator = vdb.core.Class.extend(function() {
        function init(params) {
            this._injector = params.injector;
            this._dependencies = params.dependencies;
            this._provider = params.provider;
            this._name = params.name;
        }
        function createObject() {
            if (!this._created) {
                this._created = true;
                if (this._dependencies.length > 0) {
                    this._injector.inject(this._dependencies.concat(this._initInstance.bind(this)));
                } else {
                    this._initInstance();
                }
            }
            return this.getPromise();
        }
        function getPromise() {
            return this._getFuture().getPromise();
        }
        function _initInstance() {
            var args = Array.prototype.slice.call(arguments);
            this._getFuture().resolve(this._provider.apply(null, args));
        }
        function _getFuture() {
            if (!this._future) {
                this._future = new Future;
            }
            return this._future;
        }
        var Future = vdb.Future;
        return{init:init, createObject:createObject, getPromise:getPromise, _initInstance:_initInstance, _getFuture:_getFuture};
    }());
    vdb.ioc.ClassIncubator = vdb.ioc.Incubator.extend(function() {
        return{_initInstance:function() {
            var dependenciesMap = {};
            for (var i = 0;i < this._dependencies.length;++i) {
                dependenciesMap[this._dependencies[i]] = arguments[i];
            }
            var instance = new this._provider(dependenciesMap);
            if (instance.getInitPromise) {
                instance.getInitPromise().then(function() {
                    this._getFuture().resolve(instance);
                }.bind(this));
            } else {
                this._getFuture().resolve(instance);
            }
        }};
    }());
    vdb.utils.viewability = {};
    vdb.utils.viewability.CTPFakeViewability = vdb.core.Class.extend(function() {
        function addListener(adapter) {
            adapter.addEventListener(vdb.constants.PlayerEvent.CONTEXT_INTENT, function() {
                this.disable = true;
            }.bind(this));
        }
        function contextIntent() {
            if (this.first) {
                this.first = false;
                this.context.api.getAdapterPromise().then(addListener.bind(this));
            }
        }
        function fakeCondition() {
            if (!this.disable) {
                if (this.context.playbackMode === "click") {
                    contextIntent.call(this);
                    return true;
                }
            }
            return false;
        }
        return{init:function(viewability, context) {
            this.disable = false;
            this.first = true;
            this.context = context;
            this.viewability = viewability;
        }, setElement:function(element) {
            this.viewability.setElement(element);
        }, isVisible:function() {
            if (fakeCondition.call(this)) {
                return 1;
            }
            return this.viewability.isVisible();
        }, getVisiblePercent:function(topBoundary) {
            if (fakeCondition.call(this)) {
                return 100;
            }
            return this.viewability.getVisiblePercent(topBoundary);
        }, getViewableOpportunity:function() {
            if (fakeCondition.call(this)) {
                return 1;
            }
            return this.viewability.getViewableOpportunity();
        }};
    }());
    vdb.utils.WindowUtil = function(window) {
        return{getWindow:function() {
            return window;
        }, getTopMostLocation:function(win) {
            var currWin = win || window;
            var top = this.getTopMostWindow(currWin);
            var ancestors = currWin && currWin.location && currWin.location["ancestorOrigins"];
            if (top === window.top) {
                return top.location.href;
            } else {
                if (ancestors && ancestors.length > 1) {
                    return ancestors[ancestors.length - 1];
                }
            }
            return top.document && top.document.referrer || top.location.href;
        }, getTopMostWindow:function(win) {
            for (var currP = win || window;currP;) {
                try {
                    var newP = currP.parent;
                    var doc = newP.document;
                    if (!doc) {
                        break;
                    }
                    currP = newP;
                    if (newP === newP.parent) {
                        break;
                    }
                } catch (ex) {
                    break;
                }
            }
            return currP;
        }, getParentWindow:function(win) {
            var currentWindow = win || window;
            try {
                return currentWindow.parent;
            } catch (e) {
            }
            return null;
        }, getDocumentReferrer:function() {
            var topWindow = this.getTopMostWindow();
            try {
                return topWindow.document.referrer;
            } catch (e) {
                return null;
            }
        }, getPerformance:function() {
            return window.performance;
        }, getUserAgent:function() {
            return window.navigator.userAgent;
        }, getIframeDepth:function() {
            var currentWindow = window.self;
            var depth = 0;
            for (var infoWindow = "";currentWindow !== window.top && currentWindow.parent;) {
                try {
                    if (currentWindow.parent && currentWindow.parent.location && !currentWindow.parent.location.href) {
                        throw new Error("HandleSafari");
                    }
                } catch (e) {
                    infoWindow = infoWindow || currentWindow;
                    if (depth < 2) {
                        depth++;
                    } else {
                        break;
                    }
                }
                currentWindow = currentWindow.parent;
            }
            return depth;
        }};
    }(window);
    vdb.utils.GUID = function() {
        function numberizeString(str) {
            var strNumber = 0;
            if (typeof str === "string") {
                var i = 0;
                for (var len = str.length;i < len;i++) {
                    strNumber += str.charCodeAt(i);
                }
            }
            return strNumber;
        }
        function GUID(timestamp) {
            timestamp = timestamp || 0;
            var d = numberizeString(vdb.utils.WindowUtil.getTopMostLocation()) + (new Date).getTime() + timestamp;
            if (window.performance && typeof window.performance.now === "function") {
                d += window.performance.now();
            }
            this._guid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
                var r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d / 16);
                return(c === "x" ? r : r & 3 | 8).toString(16);
            });
        }
        GUID.prototype.toString = function() {
            return this._guid;
        };
        return GUID;
    }();
    vdb.utils.PageUtil = function() {
        function windowHasFocus(win) {
            try {
                return win.document["hasFocus"] && win.document["hasFocus"]();
            } catch (e) {
            }
        }
        function hasFocus() {
            return!!(windowHasFocus(util.getWindow()) || windowHasFocus(util.getWindow().top));
        }
        function isHidden() {
            for (var i = 0;i < hiddenKeys.length;i++) {
                if (util.getWindow().document[hiddenKeys[i]] !== undefined) {
                    return util.getWindow().document[hiddenKeys[i]];
                }
            }
        }
        function getVisibilityState() {
            for (var i = 0;i < visibilityStateKeys.length;i++) {
                if (util.getWindow().document[visibilityStateKeys[i]]) {
                    return util.getWindow().document[visibilityStateKeys[i]];
                }
            }
        }
        function getVisibilityChangeEventName() {
            for (var i = 0;i < hiddenKeys.length;i++) {
                if (util.getWindow().document[hiddenKeys[i]] !== undefined) {
                    return visibilityChangeKeys[i];
                }
            }
        }
        function isVisible() {
            return!!hasFocus() || isHidden() === false || getVisibilityState() === "visible";
        }
        var util = vdb.utils.WindowUtil;
        var prefixes = ["", "webkit", "moz", "ms", "o"];
        var visibilityStateKeys = new Array(prefixes.length);
        var hiddenKeys = new Array(prefixes.length);
        var visibilityChangeKeys = new Array(prefixes.length);
        for (var i$$0 = 0;i$$0 < prefixes.length;i$$0++) {
            var pre = prefixes[i$$0];
            visibilityStateKeys[i$$0] = pre ? pre + "VisibilityState" : "visibilityState";
            hiddenKeys[i$$0] = pre ? pre + "Hidden" : "hidden";
            visibilityChangeKeys[i$$0] = pre + "visibilitychange";
        }
        return{hasFocus:hasFocus, isVisible:isVisible, getVisibilityChangeEventName:getVisibilityChangeEventName};
    }();
    vdb.utils.viewability.AbstractViewability = vdb.core.Class.extend(function() {
        return{init:function(element) {
            this._element = element;
        }, setElement:function(element) {
            this._element = element;
        }, isVisible:function() {
            return vdb.utils.PageUtil.isVisible();
        }, getVisiblePercent:function() {
        }, getViewableOpportunity:function() {
            if (!this._element) {
                return-1;
            }
            return!this.isVisible() || this.getVisiblePercent() < 50 ? 0 : 1;
        }};
    }());
    vdb.utils.viewability.adaptvInfo = {};
    (function() {
        vdb.utils.viewability.adaptvInfo = {POSITION:{ABOVE_VISIBLE_AREA:"aboveVisibleArea", BELOW_VISIBLE_AREA:"belowVisibleArea", LEFT_TO_VISIBLE_AREA:"leftToVisibleArea", RIGHT_TO_VISIBLE_AREA:"rightToVisibleArea", IN_VISIBLE_AREA:"inVisibleArea", HIDDEN:"hidden", UNKNOWN:"NA"}, DOCUMENT_STATE:{ACTIVE:1, INACTIVE:0}, FOCUS_STATE:{UNKNOWN:-1, OUT_OF_FOCUS:0, IN_FOCUS:1}, IFRAME_DATA:{UNFRIENDLY_IFRAME:1, NOT_IN_IFRAME:2, FRIENDLY_IFRAME:3}, VIEWABLE:{IN_VIEW:1, NOT_IN_VIEW:0, UNKNOWN:-1}, SPOT:{ID:1,
            GET_NEXT_ID:function() {
                return this.ID++;
            }, URL:"//redir.adap.tv/redir/client/VPixel.swf"}, placements:[], videoPlayerNodes:{}, hiddenBy:{}, getElementXY:function(el) {
            var parent = el;
            var x = 0;
            var y = 0;
            for (var c = 0;parent && !isNaN(parent.offsetLeft) && !isNaN(parent.offsetTop);) {
                if (window.getComputedStyle) {
                    c = window.getComputedStyle(parent, null);
                }
                x += parent.offsetLeft - parent.scrollLeft + (c ? parseInt(c.getPropertyValue("border-left-width"), 10) : 0);
                y += parent.offsetTop - parent.scrollTop + (c ? parseInt(c.getPropertyValue("border-top-width"), 10) : 0);
                parent = parent.offsetParent;
            }
            return{x:el.X = x, y:el.Y = y};
        }, getElementStyle:function(el, cssprop) {
            var win = document.defaultView || document.parentWindow;
            try {
                win = el.ownerDocument.defaultView || el.ownerDocument.parentWindow;
            } catch (e) {
            }
            if (el.currentStyle) {
                return el.currentStyle[cssprop];
            } else {
                if (win && win.getComputedStyle && win.getComputedStyle(el, "")) {
                    return win.getComputedStyle(el, "")[cssprop];
                } else {
                    return el.style ? el.style[cssprop] : "";
                }
            }
        }, getElementInfoForElement:function(el) {
            var elementInfo = {leftOffset:0, topOffset:0, width:0, height:0};
            if (el) {
                elementInfo.width = el.offsetWidth;
                elementInfo.height = el.offsetHeight;
                if (el.getBoundingClientRect) {
                    var elRect = el.getBoundingClientRect();
                    elementInfo.leftOffset = Math.round(elRect.left);
                    elementInfo.topOffset = Math.round(elRect.top);
                } else {
                    var el_pos = this.getElementXY(el);
                    elementInfo.leftOffset = el_pos.x;
                    elementInfo.topOffset = el_pos.y;
                }
            }
            return elementInfo;
        }, quantityCovered:function(firstElement, secondElement) {
            var coveredLength = 0;
            var firstCoordinate = firstElement.length + firstElement.offset;
            var secondCoordinate = secondElement.length + secondElement.offset;
            if (firstCoordinate < secondElement.offset || firstElement.offset > secondCoordinate) {
                return{length:0, offset:-Infinity};
            } else {
                if (firstElement.offset >= secondElement.offset && firstCoordinate <= secondCoordinate) {
                    coveredLength = firstElement.length;
                } else {
                    if (firstElement.offset <= secondElement.offset && firstCoordinate >= secondCoordinate) {
                        coveredLength = secondElement.length;
                    } else {
                        if (firstElement.offset <= secondElement.offset) {
                            coveredLength = Math.abs(firstCoordinate - secondElement.offset);
                        } else {
                            if (firstElement.offset > secondElement.offset) {
                                coveredLength = Math.abs(secondCoordinate - firstElement.offset);
                            }
                        }
                    }
                }
            }
            return{length:coveredLength, offset:Math.max(firstElement.offset, secondElement.offset)};
        }, isElementHidden:function(el, iframeData) {
            iframeData = iframeData || this.isInIframe(el);
            if (iframeData === vdb.utils.viewability.adaptvInfo.IFRAME_DATA.UNFRIENDLY_IFRAME) {
                return true;
            } else {
                if (iframeData === vdb.utils.viewability.adaptvInfo.IFRAME_DATA.NOT_IN_IFRAME) {
                    return this.checkElHiddenInCurWindow(el);
                } else {
                    var friendlyIframes;
                    var win;
                    try {
                        win = el.ownerDocument.defaultView || el.ownerDocument.parentWindow;
                    } catch (e) {
                    }
                    try {
                        friendlyIframes = this.getFriendlyIframes(win);
                    } catch (e$$0) {
                        iframeData = vdb.utils.viewability.adaptvInfo.IFRAME_DATA.UNFRIENDLY_IFRAME;
                        return true;
                    }
                    var curEl = el;
                    var isHidden = this.checkElHiddenInCurWindow(curEl);
                    for (var i = 0;i < friendlyIframes.length;i++) {
                        if (isHidden) {
                            break;
                        }
                        curEl = friendlyIframes[i];
                        isHidden = this.checkElHiddenInCurWindow(curEl);
                    }
                    return isHidden;
                }
            }
        }, checkElHiddenInCurWindow:function(el) {
            function isElementIdIMA(element) {
                return element && typeof element.id === "string" && element.id.indexOf("player_googima") > -1;
            }
            function hiddenByIMADiv(element) {
                if (isElementIdIMA(element)) {
                    return true;
                }
                var parents = this.getParents(element);
                for (var i = 0;i < parents.length;++i) {
                    var parent = parents[i];
                    if (parent && isElementIdIMA(parent.node)) {
                        return true;
                    }
                }
                return false;
            }
            var isHidden = false;
            var curEl = el;
            for (var isElementHidden = !this.getElementStyle(el, "visibility") && !hiddenByIMADiv.call(this, el);curEl && !isHidden;) {
                var isCurrentElementHidden = this.getElementStyle(curEl, "visibility") === "hidden" || this.getElementStyle(curEl, "display") === "none" || this.isHiddenByParent(curEl);
                if (hiddenByIMADiv.call(this, curEl)) {
                    isCurrentElementHidden = false;
                }
                isHidden = isElementHidden || isCurrentElementHidden;
                if (curEl === curEl.ownerDocument.body) {
                    break;
                } else {
                    curEl = curEl.parentNode;
                }
            }
            return isHidden;
        }, getParents:function(el) {
            var curEl = el.parentNode;
            var parents = [];
            try {
                for (;curEl && curEl !== curEl.ownerDocument.body;) {
                    if (curEl.nodeType === 1) {
                        parents.push(this.setNodeProperties(curEl));
                        curEl = curEl.parentNode;
                    }
                }
            } catch (e) {
            }
            if (parents.length === 0) {
                var nodeNext = el;
                var nodePrev = el;
            } else {
                nodeNext = parents[0];
                nodePrev = parents[0];
            }
            for (;nodeNext;) {
                nodeNext = nodeNext.nextSibling;
                if (nodeNext != null && nodeNext.nodeType === 1) {
                    parents.push(this.setNodeProperties(nodeNext));
                }
            }
            for (;nodePrev;) {
                nodePrev = nodePrev.previousSibling;
                if (nodePrev != null && nodePrev.nodeType === 1) {
                    parents.push(this.setNodeProperties(nodePrev));
                }
            }
            return parents;
        }, topmostElement:function(firstElement, secondElement, curWindow) {
            var topmost = null;
            var coveredWidth = this.quantityCovered({offset:firstElement.leftOffset, length:firstElement.width}, {offset:secondElement.leftOffset, length:secondElement.width});
            var coveredHeight = this.quantityCovered({offset:firstElement.topOffset, length:firstElement.height}, {offset:secondElement.topOffset, length:secondElement.height});
            if (coveredWidth > 0 && coveredHeight > 0) {
                var coordinates = [{x:coveredWidth.offset, y:coveredHeight.offset}, {x:coveredWidth.offset + coveredWidth.length, y:coveredHeight.offset}, {x:coveredWidth.offset, y:coveredHeight.offset + coveredHeight.length}, {x:coveredWidth.offset + coveredWidth.length, y:coveredHeight.offset + coveredHeight.length}, {x:coveredWidth.offset + Math.floor(coveredWidth.length / 2), y:coveredHeight.offset + Math.floor(coveredHeight.length / 2)}];
                for (var i = 0;i < 5;i++) {
                    var randCoordinate = {x:Math.random() * coveredWidth.length + coveredWidth.offset, y:Math.random() * coveredHeight.length + coveredHeight.offset};
                    coordinates.push(randCoordinate);
                }
                for (i = 0;i < coordinates.length;i++) {
                    var elementPt = this.elAtPt(coordinates[i].x, coordinates[i].y, curWindow);
                    if (elementPt === firstElement.node || elementPt === secondElement.node) {
                        topmost = elementPt;
                        break;
                    }
                }
            }
            return topmost;
        }, elAtPt:function(w, h, curWindow) {
            curWindow = curWindow || window;
            return curWindow.document.elementFromPoint(w, h);
        }, isCovered:function(elInfo, videoPlayerNode, iframeOffsets, curWindow) {
            var covered = true;
            var adInfo = this.getElementInfoForElement(videoPlayerNode);
            var coveredWidth = this.quantityCovered({offset:elInfo.leftOffset, length:elInfo.width}, {offset:adInfo.leftOffset + iframeOffsets.leftOffset, length:adInfo.width});
            var coveredHeight = this.quantityCovered({offset:elInfo.topOffset, length:elInfo.height}, {offset:adInfo.topOffset + iframeOffsets.topOffset, length:adInfo.height});
            var coveredPercent = coveredWidth.length * coveredHeight.length / (adInfo.width * adInfo.height);
            if (coveredPercent === 0) {
                return{covered:false};
            }
            var nodeAtCoordinate = this.elAtPt(Math.floor(coveredWidth.length / 2) + coveredWidth.offset, Math.floor(coveredHeight.length / 2) + coveredHeight.offset, curWindow);
            if (nodeAtCoordinate === null) {
                covered = true;
            } else {
                if (nodeAtCoordinate === videoPlayerNode || nodeAtCoordinate.id === "ADAPTV_HTML5_IFRAME" || nodeAtCoordinate.nodeName === "IFRAME") {
                    covered = false;
                } else {
                    if (nodeAtCoordinate !== elInfo.node && (elInfo.leftOffset + elInfo.width) * (elInfo.topOffset + elInfo.height) === (adInfo.leftOffset + iframeOffsets.leftOffset + adInfo.width) * (adInfo.topOffset + iframeOffsets.topOffset + adInfo.height)) {
                        covered = false;
                    }
                }
            }
            if (this.topmostElement({node:elInfo.node, leftOffset:elInfo.leftOffset, topOffset:elInfo.topOffset, width:elInfo.width, height:elInfo.height}, {node:videoPlayerNode, leftOffset:adInfo.leftOffset + iframeOffsets.leftOffset, topOffset:adInfo.topOffset + iframeOffsets.topOffset, width:adInfo.width, height:adInfo.height}, curWindow) === videoPlayerNode) {
                covered = false;
            }
            var returnObj = {covered:covered, percent:coveredPercent, width:coveredWidth.length, height:coveredHeight.length, leftOffset:coveredWidth.offset, topOffset:coveredHeight.offset};
            return returnObj;
        }, checkOverlap:function(parents, videoPlayerNode, iframeOffsets, curWindow) {
            for (var i = 0;i < parents.length;i++) {
                if (parents[i].node.nodeType === 1) {
                    if (this.checkOverlapHelper(parents[i], videoPlayerNode, iframeOffsets, [], parents, curWindow)) {
                        return true;
                    }
                }
            }
            return false;
        }, checkOverlapHelper:function(nodeInfo, videoPlayerNode, iframeOffsets, elements, parents, curWindow) {
            var covered = false;
            var multElementCover = false;
            var curNode = nodeInfo.node;
            var element = this.isCovered(nodeInfo, videoPlayerNode, iframeOffsets, curWindow);
            if (element.covered && element.percent >= .5) {
                return true;
            } else {
                if (element.covered && element.percent < .5) {
                    element.node = curNode;
                    elements.push(element);
                } else {
                    if (curNode && curNode.children && curNode.children.length >= 1) {
                        var childNodes = curNode.children;
                        for (var i = 0;i < childNodes.length;i++) {
                            if (childNodes[i].nodeType === 1) {
                                childNodeInfo = this.setNodeProperties(childNodes[i]);
                                covered = covered || this.checkOverlapHelper(childNodeInfo, videoPlayerNode, iframeOffsets, elements, parents, curWindow);
                            }
                        }
                    }
                }
            }
            return covered || this.multElementOverlap(elements, videoPlayerNode, iframeOffsets);
        }, setNodeProperties:function(setNode) {
            var elInfo = this.getElementInfoForElement(setNode);
            elInfo.node = setNode;
            return elInfo;
        }, multElementOverlap:function(elements, videoPlayerNode, iframeOffsets) {
            if (elements.length < 2) {
                return false;
            }
            var coveredSum = 0;
            var overlapSum = 0;
            var adInfo = this.getElementInfoForElement(videoPlayerNode);
            var combos = this.uniquePairs(elements);
            for (var i = 0;i < elements.length;i++) {
                coveredSum += elements[i].width * elements[i].height;
            }
            for (var j = 0;j < combos.length;j++) {
                var elCoverWidth = this.quantityCovered({offset:combos[j].element1.leftOffset, length:combos[j].element1.width}, {offset:combos[j].element2.leftOffset, length:combos[j].element2.width});
                var elCoverHeight = this.quantityCovered({offset:combos[j].element1.topOffset, length:combos[j].element1.height}, {offset:combos[j].element2.topOffset, length:combos[j].element2.height});
                var coveredWidth = this.quantityCovered({offset:elCoverWidth.offset, length:elCoverWidth.length}, {offset:adInfo.leftOffset + iframeOffsets.leftOffset, length:adInfo.width});
                var coveredHeight = this.quantityCovered({offset:elCoverHeight.offset, length:elCoverHeight.length}, {offset:adInfo.topOffset + iframeOffsets.topOffset, length:adInfo.height});
                overlapSum += coveredWidth.length * coveredHeight.length;
            }
            var coveredPercent = (coveredSum - overlapSum) / (adInfo.width * adInfo.height);
            return coveredPercent >= .5;
        }, uniquePairs:function(elements, combos) {
            combos = combos || [];
            for (var i = 1;elements.length >= 2 && i < elements.length;i++) {
                if (elements[0].node !== elements[i].node) {
                    combos.push({element1:elements[0], element2:elements[i]});
                }
            }
            if (elements.length <= 2) {
                return combos;
            } else {
                return this.uniquePairs(elements.slice(1), combos);
            }
        }, isHiddenBySibling:function(videoPlayerNode) {
            var iframeOffsets = {leftOffset:0, topOffset:0};
            var friendlyIframes;
            try {
                friendlyIframes = this.getFriendlyIframes();
            } catch (err) {
                friendlyIframes = [];
            }
            var parents = this.getParents(videoPlayerNode);
            var curWindow = window;
            var isHidden = this.checkOverlap(parents, videoPlayerNode, iframeOffsets, curWindow);
            for (var i = 0;i < friendlyIframes.length && !isHidden;i++) {
                curWindow = curWindow.parent;
                var iframeInfo = this.getElementInfoForElement(friendlyIframes[i]);
                iframeOffsets.leftOffset += iframeInfo.leftOffset;
                iframeOffsets.topOffset += iframeInfo.topOffset;
                for (var j = 0;j < parents.length;j++) {
                    parents[j].leftOffset += iframeOffsets.leftOffset;
                    parents[j].topOffset += iframeOffsets.topOffset;
                }
                iframeParents = this.getParents(friendlyIframes[i]);
                parents = parents.concat(iframeParents);
                isHidden = isHidden || this.checkOverlap(parents, videoPlayerNode, iframeOffsets, curWindow);
            }
            return isHidden;
        }, isHiddenByParent:function(el) {
            var parent = el.parentNode;
            if (!parent || el.tagName === "BODY" || this.getElementStyle(parent, "overflow") === "visible" && this.getElementStyle(parent, "overflow-x") === "visible" && this.getElementStyle(parent, "overflow-y") === "visible") {
                return false;
            }
            var parentWidth = parent.offsetWidth;
            var parentHeight = parent.offsetHeight;
            if (el.offsetLeft < 0 || el.offsetTop < 0) {
                return true;
            } else {
                if (parentWidth > 1 && parentHeight > 1) {
                    return false;
                } else {
                    return true;
                }
            }
        }, getFriendlyIframes:function(win) {
            var friendlyIframes = [];
            for (var curWindow = win || window;curWindow !== window.top;) {
                friendlyIframes.push(curWindow.frameElement);
                curWindow = curWindow.parent;
            }
            return friendlyIframes;
        }, isInIframe:function(el) {
            el = el || document.body;
            var inFrame = vdb.utils.viewability.adaptvInfo.IFRAME_DATA.UNFRIENDLY_IFRAME;
            try {
                if (window.top.location.href) {
                    inFrame = !!el.ownerDocument.defaultView.frameElement ? vdb.utils.viewability.adaptvInfo.IFRAME_DATA.FRIENDLY_IFRAME : vdb.utils.viewability.adaptvInfo.IFRAME_DATA.NOT_IN_IFRAME;
                }
            } catch (e) {
            }
            return inFrame;
        }, getWindowInfo:function(win) {
            var windowInfo = {width:0, height:0, leftOffset:0, topOffset:0};
            if (typeof win.innerWidth != "undefined") {
                windowInfo.width = win.innerWidth;
                windowInfo.height = win.innerHeight;
            } else {
                if (win.document.documentElement && (win.document.documentElement.clientWidth || win.document.documentElement.clientHeight)) {
                    windowInfo.width = win.document.documentElement.clientWidth;
                    windowInfo.height = win.document.documentElement.clientHeight;
                } else {
                    if (document.body.offsetWidth && document.body.offsetHeight) {
                        windowInfo.width = win.document.body.offsetWidth;
                        windowInfo.height = win.document.body.offsetHeight;
                    }
                }
            }
            var doc = win.document;
            var iebody = doc.compatMode && doc.compatMode != "BackCompat" ? doc.documentElement : doc.body;
            windowInfo.leftOffset = doc.all ? iebody.scrollLeft : win.pageXOffset;
            windowInfo.topOffset = doc.all ? iebody.scrollTop : win.pageYOffset;
            return windowInfo;
        }, getElementPositionRelativeToVisiblearea:function(elementInfo, visibleRect) {
            var elementPosition;
            if (visibleRect.width > 0 && visibleRect.height > 0 && elementInfo.width > 0 && elementInfo.height > 0) {
                if (elementInfo.topOffset + elementInfo.height <= visibleRect.topOffset) {
                    elementPosition = vdb.utils.viewability.adaptvInfo.POSITION.ABOVE_VISIBLE_AREA;
                } else {
                    if (elementInfo.topOffset >= visibleRect.height + visibleRect.topOffset) {
                        elementPosition = vdb.utils.viewability.adaptvInfo.POSITION.BELOW_VISIBLE_AREA;
                    } else {
                        if (elementInfo.leftOffset + elementInfo.width <= visibleRect.leftOffset) {
                            elementPosition = vdb.utils.viewability.adaptvInfo.POSITION.LEFT_TO_VISIBLE_AREA;
                        } else {
                            if (elementInfo.leftOffset >= visibleRect.width + visibleRect.leftOffset) {
                                elementPosition = vdb.utils.viewability.adaptvInfo.POSITION.RIGHT_TO_VISIBLE_AREA;
                            } else {
                                elementPosition = vdb.utils.viewability.adaptvInfo.POSITION.IN_VISIBLE_AREA;
                            }
                        }
                    }
                }
            } else {
                elementPosition = vdb.utils.viewability.adaptvInfo.POSITION.HIDDEN;
            }
            return elementPosition;
        }, getVisibleFrameRect:function(elementInfo, oldViewableRect) {
            var newRect = {leftOffset:0, topOffset:0, width:0, height:0};
            var pRectToElLeft = oldViewableRect.leftOffset - elementInfo.leftOffset;
            newRect.leftOffset = Math.max(pRectToElLeft, 0);
            var w1 = Math.min(oldViewableRect.width, elementInfo.width);
            var w2 = Math.min(oldViewableRect.width + pRectToElLeft, elementInfo.width - pRectToElLeft);
            newRect.width = Math.max(0, Math.min(w1, w2));
            var pRectToElTop = oldViewableRect.topOffset - elementInfo.topOffset;
            newRect.topOffset = Math.max(pRectToElTop, 0);
            var h1 = Math.min(oldViewableRect.height, elementInfo.height);
            var h2 = Math.min(oldViewableRect.height + pRectToElTop, elementInfo.height - pRectToElTop);
            newRect.height = Math.max(0, Math.min(h1, h2));
            return newRect;
        }, getHorizontalPercentageVisibility:function(visibleFrameRect, windowInfo) {
            var visibility = 0;
            visibility = Math.min(windowInfo.width - visibleFrameRect.leftOffset, visibleFrameRect.width + visibleFrameRect.leftOffset) / visibleFrameRect.width * 100;
            visibility = Math.round(Math.min(Math.max(0, visibility), 100) * 100) / 100;
            visibility = Math.round(visibility);
            return visibility;
        }, getVerticalPercentageVisibility:function(visibleFrameRect, windowInfo) {
            var visibility = 0;
            visibility = Math.min(windowInfo.height - visibleFrameRect.topOffset, visibleFrameRect.height + visibleFrameRect.topOffset) / visibleFrameRect.height * 100;
            visibility = Math.round(Math.min(Math.max(0, visibility), 100) * 100) / 100;
            visibility = Math.round(visibility);
            return visibility;
        }, getPlacementInfo:function(element, elementInfo, windowInfo) {
            var positionInfo = {position:vdb.utils.viewability.adaptvInfo.POSITION.UNKNOWN, hVisibility:0, vVisibility:0};
            var iframeData = vdb.utils.viewability.adaptvInfo.isInIframe(element);
            if (iframeData === vdb.utils.viewability.adaptvInfo.IFRAME_DATA.UNFRIENDLY_IFRAME) {
                return positionInfo;
            }
            if (this.isElementHidden(element, iframeData)) {
                positionInfo.position = vdb.utils.viewability.adaptvInfo.POSITION.HIDDEN;
            }
            if (positionInfo.position != vdb.utils.viewability.adaptvInfo.POSITION.HIDDEN) {
                var windowRect = {leftOffset:0, topOffset:0, width:windowInfo.width, height:windowInfo.height};
                var position = this.getElementPositionRelativeToVisiblearea(elementInfo, windowRect);
                positionInfo.position = position;
                if (position == vdb.utils.viewability.adaptvInfo.POSITION.IN_VISIBLE_AREA) {
                    positionInfo.hVisibility = this.getHorizontalPercentageVisibility(elementInfo, windowRect);
                    positionInfo.vVisibility = this.getVerticalPercentageVisibility(elementInfo, windowRect);
                }
                if (positionInfo.hVisibility == 0 || positionInfo.vVisibility == 0) {
                    positionInfo.hVisibility = 0;
                    positionInfo.vVisibility = 0;
                }
            }
            return positionInfo;
        }, getPlacementInfoWhenEmbeddedInIFrames:function(element, elementInfo, framesInfo, windowInfo) {
            var positionInfo = {position:vdb.utils.viewability.adaptvInfo.POSITION.UNKNOWN, hVisibility:0, vVisibility:0};
            var iframeData = vdb.utils.viewability.adaptvInfo.isInIframe(element);
            if (iframeData === vdb.utils.viewability.adaptvInfo.IFRAME_DATA.UNFRIENDLY_IFRAME) {
                return positionInfo;
            }
            if (this.isElementHidden(element, iframeData)) {
                positionInfo.position = vdb.utils.viewability.adaptvInfo.POSITION.HIDDEN;
            }
            if (positionInfo.position != vdb.utils.viewability.adaptvInfo.POSITION.HIDDEN) {
                var iframeInfo = framesInfo[framesInfo.length - 1];
                var windowRect = {leftOffset:0, topOffset:0, width:windowInfo.width, height:windowInfo.height};
                var position = this.getElementPositionRelativeToVisiblearea(iframeInfo, windowRect);
                positionInfo.position = position;
                if (position == vdb.utils.viewability.adaptvInfo.POSITION.IN_VISIBLE_AREA) {
                    var visibleFrameRect = this.getVisibleFrameRect(iframeInfo, windowRect);
                    var j = framesInfo.length - 1;
                    for (var framePosition = position;j > 0;) {
                        framePosition = this.getElementPositionRelativeToVisiblearea(framesInfo[j - 1], visibleFrameRect);
                        if (framePosition == vdb.utils.viewability.adaptvInfo.POSITION.IN_VISIBLE_AREA) {
                            visibleFrameRect = this.getVisibleFrameRect(framesInfo[j - 1], visibleFrameRect);
                        } else {
                            break;
                        }
                        j--;
                    }
                    if (framePosition == vdb.utils.viewability.adaptvInfo.POSITION.IN_VISIBLE_AREA) {
                        var elPosition = this.getElementPositionRelativeToVisiblearea(elementInfo, visibleFrameRect);
                        if (elPosition == vdb.utils.viewability.adaptvInfo.POSITION.IN_VISIBLE_AREA) {
                            visibleFrameRect = this.getVisibleFrameRect(elementInfo, visibleFrameRect);
                            var visibility = visibleFrameRect.width / elementInfo.width * 100;
                            visibility = Math.round(visibility * 100) / 100;
                            visibility = Math.round(visibility);
                            positionInfo.hVisibility = visibility;
                            visibility = visibleFrameRect.height / elementInfo.height * 100;
                            visibility = Math.round(visibility * 100) / 100;
                            visibility = Math.round(visibility);
                            positionInfo.vVisibility = visibility;
                        } else {
                            positionInfo.position = vdb.utils.viewability.adaptvInfo.POSITION.HIDDEN;
                        }
                    } else {
                        positionInfo.position = vdb.utils.viewability.adaptvInfo.POSITION.HIDDEN;
                    }
                }
            }
            return positionInfo;
        }, getAdPlayerPositionInfo:function(el) {
            var adInfo = {hostname:window.location.hostname, inIFrame:false, iframe:{parentUrl:"", topUrl:"", leftOffset:0, topOffset:0, width:0, height:0, crossDomain:false, levels:0}, win:{width:0, height:0, leftOffset:0, topOffset:0}, el:{leftOffset:0, topOffset:0, width:0, height:0, position:vdb.utils.viewability.adaptvInfo.POSITION.UNKNOWN, hVisibility:0, vVisibility:0}, browser:"NA"};
            var elementInfo = this.getElementInfoForElement(el);
            adInfo.el.leftOffset = elementInfo.leftOffset;
            adInfo.el.topOffset = elementInfo.topOffset;
            adInfo.el.width = elementInfo.width;
            adInfo.el.height = elementInfo.height;
            var iframeData = vdb.utils.viewability.adaptvInfo.isInIframe(el);
            if (iframeData === vdb.utils.viewability.adaptvInfo.IFRAME_DATA.UNFRIENDLY_IFRAME) {
                adInfo.inIFrame = true;
                adInfo.iframe.crossDomain = true;
                adInfo.iframe.levels = -1;
                adInfo.el.hVisibility = 100;
                adInfo.el.vVisibility = 100;
                return adInfo;
            } else {
                if (iframeData === vdb.utils.viewability.adaptvInfo.IFRAME_DATA.FRIENDLY_IFRAME) {
                    adInfo.inIFrame = true;
                    adInfo.iframe.topUrl = window.top.location.href;
                }
            }
            if (this.isElementHidden(el, iframeData)) {
                adInfo.el.position = vdb.utils.viewability.adaptvInfo.POSITION.HIDDEN;
            }
            var win = window;
            try {
                win = el.ownerDocument.defaultView || win;
            } catch (e) {
            }
            adInfo.win = this.getWindowInfo(win);
            var positionInfo = this.getPlacementInfo(el, adInfo.el, adInfo.win);
            if (positionInfo.position != vdb.utils.viewability.adaptvInfo.POSITION.IN_VISIBLE_AREA) {
                adInfo.el.position = positionInfo.position;
                adInfo.el.hVisibility = positionInfo.hVisibility;
                adInfo.el.vVisibility = positionInfo.vVisibility;
                adInfo.el.width = adInfo.el.width < adInfo.win.width ? adInfo.el.width : adInfo.win.width;
                adInfo.el.height = adInfo.el.height < adInfo.win.height ? adInfo.el.height : adInfo.win.height;
                return adInfo;
            }
            try {
                var windowParent = win;
                if (adInfo.inIFrame) {
                    if (window.parent && window.parent.location) {
                        adInfo.iframe.parentUrl = window.parent.location.href;
                    }
                    adInfo.win = this.getWindowInfo(window.top);
                    for (var framesInfo = [];windowParent != window.top;) {
                        var elInfo = this.getElementInfoForElement(windowParent.frameElement);
                        if (adInfo.iframe.levels == 0) {
                            adInfo.iframe.width = elInfo.width;
                            adInfo.iframe.height = elInfo.height;
                        }
                        adInfo.iframe.leftOffset = elInfo.leftOffset;
                        adInfo.iframe.topOffset = elInfo.topOffset;
                        framesInfo[adInfo.iframe.levels] = elInfo;
                        adInfo.iframe.levels += 1;
                        windowParent = windowParent.parent;
                    }
                    positionInfo = this.getPlacementInfoWhenEmbeddedInIFrames(el, adInfo.el, framesInfo, adInfo.win);
                    adInfo.el.position = positionInfo.position;
                    adInfo.el.hVisibility = positionInfo.hVisibility;
                    adInfo.el.vVisibility = positionInfo.vVisibility;
                }
            } catch (e$$0) {
                adInfo.iframe.levels = -1;
            }
            if (!adInfo.inIFrame) {
                positionInfo = this.getPlacementInfo(el, adInfo.el, adInfo.win);
                adInfo.el.position = positionInfo.position;
                adInfo.el.hVisibility = positionInfo.hVisibility;
                adInfo.el.vVisibility = positionInfo.vVisibility;
            }
            return adInfo;
        }, getPlayerElement:function(callbackMethod, elementId) {
            if (this.videoPlayerNodes[callbackMethod] && this.videoPlayerNodes[callbackMethod][callbackMethod] && this.videoPlayerNodes[callbackMethod].parentNode) {
                return this.videoPlayerNodes[callbackMethod];
            }
            var el = null;
            if (elementId && document[elementId] && document[elementId][callbackMethod]) {
                el = document[elementId];
            } else {
                if (elementId && window[elementId] && window[elementId][callbackMethod]) {
                    el = window[elementId];
                } else {
                    var objs = document.getElementsByTagName("object");
                    var embeds = document.getElementsByTagName("embed");
                    var objsArray = [];
                    var i = 0;
                    for (var l = objs.length;i < l;objsArray.push(objs[i++])) {
                    }
                    var embedsArray = [];
                    i = 0;
                    for (l = embeds.length;i < l;embedsArray.push(embeds[i++])) {
                    }
                    var flashObjects = objsArray.concat(embedsArray);
                    for (i = 0;i < flashObjects.length;i++) {
                        try {
                            if (flashObjects[i][callbackMethod]()) {
                                el = flashObjects[i];
                                break;
                            }
                        } catch (e) {
                        }
                    }
                }
            }
            if (el) {
                this.videoPlayerNodes[callbackMethod] = el;
            }
            return el;
        }, getMinSize:function(el) {
            if (!el) {
                return{width:0, height:0};
            }
            var minWidth = el.offsetWidth;
            var minHeight = el.offsetHeight;
            for (var curEl = el;curEl && curEl.tagName !== "BODY";) {
                minWidth = Math.min(curEl.offsetWidth, minWidth);
                minHeight = Math.min(curEl.offsetHeight, minHeight);
                curEl = curEl.parentNode;
            }
            return{width:minWidth, height:minHeight};
        }, isElement:function(element) {
            return element !== null && typeof element === "object" && element.nodeType === 1;
        }, flashEnabled:function() {
            var FLASH_MIME_TYPE = "application/x-shockwave-flash";
            if (typeof navigator.plugins !== "undefined" && typeof navigator.plugins["Shockwave Flash"] === "object" && typeof navigator.mimeTypes !== "undefined" && navigator.mimeTypes[FLASH_MIME_TYPE] && navigator.mimeTypes[FLASH_MIME_TYPE].enabledPlugin) {
                return true;
            } else {
                if (typeof window.ActiveXObject !== "undefined") {
                    try {
                        if (new window.ActiveXObject("ShockwaveFlash.ShockwaveFlash")) {
                            return true;
                        }
                    } catch (e) {
                    }
                }
            }
            return false;
        }, getInfo:function(element, callbackId, callbackfn, pubKey) {
            var info = {active:vdb.utils.viewability.adaptvInfo.DOCUMENT_STATE.INACTIVE, domId:"", framerate:vdb.utils.viewability.adaptvInfo.VIEWABLE.UNKNOWN, geometric:vdb.utils.viewability.adaptvInfo.VIEWABLE.UNKNOWN, viewable:vdb.utils.viewability.adaptvInfo.VIEWABLE.UNKNOWN};
            var videoPlayerNode;
            if (this.isElement(element)) {
                videoPlayerNode = element;
            } else {
                videoPlayerNode = this.getPlayerElement(callbackId, element);
            }
            var pubSkipID = ["7221", "7658", "7257", "7386", "7480", "7716", "7597", "7865"];
            var pubSkipKey = ["mindjoltinc", "cinesport"];
            var pubSkip = false;
            for (var i = 0;i < pubSkipID.length;i++) {
                if (pubSkipID[i] === pubKey) {
                    pubSkip = true;
                }
            }
            for (var j = 0;j < pubSkipKey.length;j++) {
                if (pubSkipKey[j] === pubKey) {
                    pubSkip = true;
                }
            }
            if (pubSkip === true || !this.flashEnabled()) {
                info = vdb.utils.viewability.adaptvInfo.getVWInfo(videoPlayerNode);
                info.viewable = info.geometric;
                info.viewableOpportunity = info.geometric;
                if (callbackfn) {
                    videoPlayerNode[callbackfn](info);
                }
                if (!this.flashEnabled()) {
                    return info;
                }
            }
            var placements = vdb.utils.viewability.adaptvInfo.placements;
            var placement;
            for (i = 0;i < placements.length;++i) {
                if (placements[i].id === callbackId) {
                    placement = placements[i];
                    break;
                }
            }
            if (placement == undefined) {
                placement = new vdb.utils.viewability.adaptvInfo.Placement(callbackId, videoPlayerNode);
                placements.push(placement);
            }
            return placement.getInfo(callbackfn);
        }, removePlacement:function(id) {
            var placements = vdb.utils.viewability.adaptvInfo.placements;
            for (var i = 0;i < placements.length;i++) {
                if (placements[i].id === id) {
                    placements[i].dispose();
                    placements.splice(i, 1);
                    break;
                }
            }
        }, getVWInfo:function(videoPlayerNode) {
            var info = {active:vdb.utils.viewability.adaptvInfo.DOCUMENT_STATE.INACTIVE, domId:"", geometric:vdb.utils.viewability.adaptvInfo.VIEWABLE.UNKNOWN, hasFocus:vdb.utils.viewability.adaptvInfo.FOCUS_STATE.UNKNOWN};
            if (videoPlayerNode) {
                var posInfo = vdb.utils.viewability.adaptvInfo.getAdPlayerPositionInfo(videoPlayerNode);
                info.pWidth = posInfo.el.width;
                info.pHeight = posInfo.el.height;
                info.domId = videoPlayerNode.id;
                if (posInfo.el.position != vdb.utils.viewability.adaptvInfo.POSITION.UNKNOWN) {
                    var visibleWidth = posInfo.el.width * posInfo.el.hVisibility / 100;
                    var visibleHeight = posInfo.el.height * posInfo.el.vVisibility / 100;
                    if (visibleWidth === 0 || visibleHeight === 0) {
                        info.geometric = vdb.utils.viewability.adaptvInfo.VIEWABLE.NOT_IN_VIEW;
                    } else {
                        var visibleArea = visibleWidth * visibleHeight / (posInfo.el.width * posInfo.el.height);
                        info.geometric = visibleArea >= .5 ? vdb.utils.viewability.adaptvInfo.VIEWABLE.IN_VIEW : vdb.utils.viewability.adaptvInfo.VIEWABLE.NOT_IN_VIEW;
                    }
                } else {
                    if (posInfo.inIFrame) {
                        info.errinfo = "inIframe";
                    }
                    if (posInfo.iframe.crossDomain) {
                        info.errinfo = "iframeCrossDomain";
                    }
                }
                var isTabHidden = false;
                if (!(document.hasFocus && document.hasFocus())) {
                    var prefixes = ["webkit", "moz", "ms", "o"];
                    if (document.visibilityState) {
                        isTabHidden = document.visibilityState != "visible";
                    } else {
                        for (var i = 0;i < prefixes.length;i++) {
                            if (document[prefixes[i] + "VisibilityState"]) {
                                isTabHidden = document[prefixes[i] + "VisibilityState"] != "visible";
                                break;
                            }
                        }
                    }
                }
                info.active = !isTabHidden ? vdb.utils.viewability.adaptvInfo.DOCUMENT_STATE.ACTIVE : vdb.utils.viewability.adaptvInfo.DOCUMENT_STATE.INACTIVE;
                info.hasFocus = vdb.utils.viewability.adaptvInfo.isInFocus();
            }
            return info;
        }, isInFocus:function() {
            if (document.hidden === true) {
                return vdb.utils.viewability.adaptvInfo.FOCUS_STATE.OUT_OF_FOCUS;
            }
            var iframeData = vdb.utils.viewability.adaptvInfo.isInIframe();
            if (iframeData === vdb.utils.viewability.adaptvInfo.IFRAME_DATA.UNFRIENDLY_IFRAME) {
                return vdb.utils.viewability.adaptvInfo.FOCUS_STATE.UNKNOWN;
            }
            if (window.top.document.hasFocus) {
                return window.top.document.hasFocus() ? vdb.utils.viewability.adaptvInfo.FOCUS_STATE.IN_FOCUS : vdb.utils.viewability.adaptvInfo.FOCUS_STATE.OUT_OF_FOCUS;
            }
            return vdb.utils.viewability.adaptvInfo.FOCUS_STATE.UNKNOWN;
        }};
        vdb.utils.viewability.adaptvInfo.AdPlayerNode = function(videoPlayerNode) {
            this.htmlNode = videoPlayerNode;
            this.pointsPerEdge = 1;
            this.minPtsViewable = 3;
            var posInfo = vdb.utils.viewability.adaptvInfo.getElementInfoForElement(this.htmlNode);
            var scrollXPos = window.pageXOffset !== undefined ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
            var scrollYPos = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
            this.top = posInfo.topOffset + scrollYPos;
            this.left = posInfo.leftOffset + scrollXPos;
            this.width = posInfo.width;
            this.height = posInfo.height;
            var minSize = vdb.utils.viewability.adaptvInfo.getMinSize(this.htmlNode);
            this.minWidth = minSize.width;
            this.minHeight = minSize.height;
            this.xgap = this.minWidth / (this.pointsPerEdge + 1);
            this.ygap = this.minHeight / (this.pointsPerEdge + 1);
        };
        vdb.utils.viewability.adaptvInfo.AdPlayerNode.prototype.getControlPoints = function() {
            return window.adaptvBrowserDetect && window.adaptvBrowserDetect.isFlashThrottled ? [] : [{x:-1E4, y:-1E4}];
        };
        vdb.utils.viewability.adaptvInfo.AdPlayerNode.prototype.getTopPoints = function() {
            var points = [];
            var posx = this.left;
            for (var i = 0;i < this.pointsPerEdge;i++) {
                posx += this.xgap;
                points.push({x:posx, y:this.top});
            }
            return points;
        };
        vdb.utils.viewability.adaptvInfo.AdPlayerNode.prototype.getRightPoints = function() {
            var points = [];
            var posy = this.top;
            for (var i = 0;i < this.pointsPerEdge;i++) {
                posy += this.ygap;
                points.push({x:this.left + this.minWidth - 1, y:posy});
            }
            return points;
        };
        vdb.utils.viewability.adaptvInfo.AdPlayerNode.prototype.getBottomPoints = function() {
            var points = [];
            var posx = this.left;
            for (var i = 0;i < this.pointsPerEdge;i++) {
                posx += this.xgap;
                points.push({x:posx, y:this.top + this.minHeight - 1});
            }
            return points;
        };
        vdb.utils.viewability.adaptvInfo.AdPlayerNode.prototype.getLeftPoints = function() {
            var points = [];
            var posy = this.top;
            for (var i = 0;i < this.pointsPerEdge;i++) {
                posy += this.ygap;
                points.push({x:this.left, y:posy});
            }
            return points;
        };
        vdb.utils.viewability.adaptvInfo.AdPlayerNode.prototype.getAllPoints = function() {
            return[this.getControlPoints(), this.getTopPoints(), this.getRightPoints(), this.getBottomPoints(), this.getLeftPoints()];
        };
        vdb.utils.viewability.adaptvInfo.AdPlayerNode.prototype.getAllPointsFlattened = function() {
            var allPoints = this.getAllPoints();
            var points = [].concat.apply([], allPoints);
            return points;
        };
        vdb.utils.viewability.adaptvInfo.Placement = function(placementId, videoPlayerNode) {
            this.id = placementId;
            this.playerNode = new vdb.utils.viewability.adaptvInfo.AdPlayerNode(videoPlayerNode);
            this.spotsInjected = false;
            this.viewable = -1;
            this.spots = [];
            this.timeout;
            this.timeout_ms = 1800;
            this.callbackFnName = "";
        };
        vdb.utils.viewability.adaptvInfo.Placement.prototype.getInfo = function(callback) {
            if (!this.spotsInjected) {
                this.callbackFnName = callback;
                for (var i = 0;i < this.playerNode.getAllPointsFlattened().length;i++) {
                    var spot = new vdb.utils.viewability.adaptvInfo.Spot;
                    spot.inject(this, this.spotCallback);
                    this.spots.push(spot);
                }
                var that = this;
                setTimeout(function() {
                    that.repositionSpots();
                }, 1);
                this.timeout = setTimeout(function() {
                    clearTimeout(that.timeout);
                    if (!that.allSpotsReady() && that.callbackExists()) {
                        that.playerNode && that.playerNode.htmlNode[that.callbackFnName](that.getMergedInfo());
                    }
                }, this.timeout_ms);
                this.spotsInjected = true;
                return null;
            }
            if (callback) {
                this.playerNode.htmlNode[callback](this.getMergedInfo());
            }
        };
        vdb.utils.viewability.adaptvInfo.Placement.prototype.repositionSpots = function() {
            if (!this.playerNode) {
                return;
            }
            var spotPositions = this.playerNode.getAllPointsFlattened();
            for (var i = 0;i < spotPositions.length;i++) {
                var position = spotPositions[i];
                var spot = this.spots[i];
                spot.reposition(position.x, position.y);
            }
        };
        vdb.utils.viewability.adaptvInfo.Placement.prototype.spotCallback = function() {
            if (this.allSpotsReady()) {
                clearTimeout(this.timeout);
                if (this.callbackExists()) {
                    var info = this.getMergedInfo();
                    this.playerNode.htmlNode[this.callbackFnName](info);
                }
            }
        };
        vdb.utils.viewability.adaptvInfo.Placement.prototype.getMergedInfo = function() {
            var viewableInfo = vdb.utils.viewability.adaptvInfo.getVWInfo(this.playerNode.htmlNode);
            if (this.allSpotsReady()) {
                var viewabilityScore = 0;
                for (var i = 0;i < this.spots.length;i++) {
                    var spot = this.spots[i];
                    viewabilityScore += spot.viewable;
                }
                this.framerate = viewabilityScore >= this.playerNode.minPtsViewable ? vdb.utils.viewability.adaptvInfo.VIEWABLE.IN_VIEW : vdb.utils.viewability.adaptvInfo.VIEWABLE.NOT_IN_VIEW;
            } else {
                this.framerate = vdb.utils.viewability.adaptvInfo.VIEWABLE.UNKNOWN;
            }
            viewableInfo.framerate = this.framerate;
            viewableInfo.viewable = this.framerate === vdb.utils.viewability.adaptvInfo.VIEWABLE.UNKNOWN ? viewableInfo.geometric : this.framerate;
            if (viewableInfo.active === vdb.utils.viewability.adaptvInfo.DOCUMENT_STATE.INACTIVE && viewableInfo.viewable === vdb.utils.viewability.adaptvInfo.VIEWABLE.IN_VIEW) {
                viewableInfo.viewable = vdb.utils.viewability.adaptvInfo.VIEWABLE.NOT_IN_VIEW;
            }
            viewableInfo.viewableOpportunity = viewableInfo.viewable;
            return viewableInfo;
        };
        vdb.utils.viewability.adaptvInfo.Placement.prototype.allSpotsReady = function() {
            if (this.playerNode && window.adaptvBrowserDetect && !window.adaptvBrowserDetect.isFlashThrottled && this.spots[0].viewable !== 0) {
                return false;
            }
            var numberOfSpotsStarted = 0;
            for (var i = 0;i < this.spots.length;i++) {
                if (this.spots[i].viewable > -1) {
                    numberOfSpotsStarted++;
                }
            }
            return numberOfSpotsStarted == this.spots.length;
        };
        vdb.utils.viewability.adaptvInfo.Placement.prototype.callbackExists = function() {
            return this.callbackFnName != "" && this.playerNode && this.playerNode.htmlNode && this.playerNode.htmlNode[this.callbackFnName] && typeof this.playerNode.htmlNode[this.callbackFnName] === "function";
        };
        vdb.utils.viewability.adaptvInfo.Placement.prototype.dispose = function() {
            var totalSpots = this.spots.length;
            for (var i = 0;i < totalSpots;i++) {
                this.spots[i].destroy();
            }
            this.playerNode = null;
            this.spotsInjected = false;
            this.viewable = -1;
            this.spots = [];
            this.timeout = 0;
            this.timeout_ms = 1800;
            this.callbackFnName = "";
            this.id = "";
        };
        vdb.utils.viewability.adaptvInfo.Spot = function() {
            var url = "//redir.adap.tv/redir/client/VPixel.swf";
            this.viewable = -1;
            this.id = vdb.utils.viewability.adaptvInfo.SPOT.GET_NEXT_ID();
            this.jsCallback = "__adaptv__spotnotify__" + this.id.toString();
            this.interval = 0;
            this.spotDiv;
            this.callbackFn;
            this.placementContext;
            var that = this;
            window[this.jsCallback] = function(object_id, callbackId, throttled) {
                that.viewable = throttled;
                if (that.callbackFn) {
                    that.callbackFn.apply(that.placementContext);
                    that.callbackFn = null;
                }
            };
        };
        vdb.utils.viewability.adaptvInfo.Spot.prototype.inject = function(context, callback) {
            var divId = "adaptvSpotDiv_" + this.id;
            var spotId = "adaptvVWSpot_" + this.id;
            if (document.getElementById(divId)) {
                return;
            }
            this.placementContext = context;
            this.callbackFn = callback;
            var tag = '<object width="1px" height="1px" id="{spotId}" name="{spotId}" align="center" style="height: 1px !important; width: 1px !important;">';
            tag += '<param name="movie" value="{url}" />';
            tag += '<param name="bgcolor" value="#000000"/>';
            tag += '<param name="allowScriptAccess" value="always" />';
            tag += '<param name="FlashVars" value="autoStart=true&callback={callback}"/>';
            tag += '<embed src="{url}" width="1px" height="1px" id="{spotId}" name="{spotId}" align="center" bgcolor="#000000" allowScriptAccess="always" FlashVars="autoStart=true&callback={callback}" type="application/x-shockwave-flash"/>';
            tag += "</object>";
            tag = tag.split("{url}").join(vdb.utils.viewability.adaptvInfo.SPOT.URL);
            tag = tag.split("{spotId}").join(spotId);
            tag = tag.split("{callback}").join(this.jsCallback);
            var bodyVar = document.body || document.getElementsByTagName("body")[0] || document.documentElement;
            var spotDiv = document.createElement("div");
            spotDiv.id = divId;
            spotDiv.style.height = "1px";
            spotDiv.style.width = "1px";
            spotDiv.style.position = "absolute";
            spotDiv.innerHTML = tag;
            bodyVar.appendChild(spotDiv);
            this.spotDiv = spotDiv;
        };
        vdb.utils.viewability.adaptvInfo.Spot.prototype.reposition = function(x, y) {
            this.spotDiv.style.left = x + "px";
            this.spotDiv.style.top = y + "px";
        };
        vdb.utils.viewability.adaptvInfo.Spot.prototype.destroy = function() {
            var bodyVar = document.body || document.getElementsByTagName("body")[0] || document.documentElement;
            var divId = "adaptvSpotDiv_" + this.id;
            var spotDiv = document.getElementById(divId);
            spotDiv && bodyVar.removeChild(spotDiv);
            this.spotDiv = null;
            this.callbackFn = null;
            this.placementContext = null;
            window[this.jsCallback] = null;
            delete window[this.jsCallback];
        };
    })();
    vdb.utils.viewability.IntersectionViewability = vdb.utils.viewability.AbstractViewability.extend(function() {
        var THRESHOLD_STEP = 5;
        var visibility = 0;
        var supported = false;
        var getThreshold = function() {
            var threshold = [];
            for (var i = 0;i < 100;i += THRESHOLD_STEP) {
                threshold.push(i / 100);
            }
            threshold.push(1);
            return threshold;
        };
        var observerCallback = function(data) {
            var entry = data[0];
            visibility = Math.round(entry.intersectionRatio * 100);
        };
        var initObserver = function(topBoundary) {
            var observer = new IntersectionObserver(observerCallback, {root:topBoundary || null, threshold:getThreshold()});
            observer.observe(this._element);
        };
        return{init:function(dependecies) {
            var adaptvInfo = vdb.utils.viewability.adaptvInfo;
            var element = dependecies[vdb.enums.Dependencies.VIEWABILITY_ROOT_CONTAINER];
            var iframeData = adaptvInfo.isInIframe(element);
            if (typeof IntersectionObserver === "undefined" || iframeData !== adaptvInfo.IFRAME_DATA.UNFRIENDLY_IFRAME) {
                return;
            }
            supported = true;
            this._super(element);
            initObserver.call(this);
        }, isVisible:function() {
            return visibility && visibility > 0;
        }, getVisiblePercent:function() {
            return visibility;
        }, isSupported:function() {
            return supported;
        }};
    }(), [vdb.enums.Dependencies.VIEWABILITY_ROOT_CONTAINER]);
    vdb.utils.viewability.BaseViewability = vdb.utils.viewability.AbstractViewability.extend(function() {
        return{init:function(dependencies) {
            var element = dependencies[vdb.enums.Dependencies.VIEWABILITY_ROOT_CONTAINER];
            this._super(element);
        }, getVisiblePercent:function(topBoundary) {
            if (!this._element) {
                return-1;
            }
            var adaptvInfo = vdb.utils.viewability.adaptvInfo.getAdPlayerPositionInfo(this._element).el;
            var visiblePercent = adaptvInfo.hVisibility * adaptvInfo.vVisibility / 100;
            if (topBoundary && adaptvInfo.topOffset < topBoundary) {
                var visibleContainerHeight = adaptvInfo.vVisibility * adaptvInfo.height / 100;
                var inBorderContainerHeight = visibleContainerHeight - topBoundary + Math.max(0, adaptvInfo.topOffset);
                visiblePercent = Math.max(0, inBorderContainerHeight * 100 / adaptvInfo.height);
            }
            return Math.min(Math.round(visiblePercent), 100);
        }};
    }(), [vdb.enums.Dependencies.VIEWABILITY_ROOT_CONTAINER]);
    vdb.utils.viewability.MoatViewability = vdb.utils.viewability.AbstractViewability.extend(function() {
        function loadMoatApi() {
            var win = vdb.utils.WindowUtil.getTopMostWindow(window);
            var moatId = +new Date;
            var callbackName = "moatApiInit" + moatId;
            var apiFuture = new vdb.Future;
            var windowProtocol = win.location.protocol;
            var protocol = windowProtocol.indexOf("http") === 0 ? windowProtocol : "https:";
            var sub = protocol === "https:" ? "z" : "js";
            var url = protocol + "//" + sub + ".moatads.com/" + PARTNER_CODE + "/moatapi.js#moatApiCallback=" + callbackName;
            win[callbackName] = function(moatApi) {
                apiFuture.resolve(moatApi);
                win[callbackName] = undefined;
            };
            vdb.dom.loadScript(url);
            return apiFuture.getPromise();
        }
        function onTrackerReady(apiElement) {
            this._viewabilityTracker = apiElement;
        }
        var PARTNER_CODE = "aolvidibleapi29384728347";
        var moatApiPromise;
        return{init:function(dependencies, isMoatDisabled) {
            if (!isMoatDisabled) {
                if (!moatApiPromise) {
                    moatApiPromise = loadMoatApi(this._win);
                }
                this.setElement(dependencies[vdb.enums.Dependencies.VIEWABILITY_ROOT_CONTAINER]);
            }
        }, setElement:function(element) {
            moatApiPromise.then(function(moatApi) {
                moatApi["shutDown"]();
                moatApi["startTracking"](element, {"ready":onTrackerReady.bind(this)});
            }.bind(this));
        }, getVisiblePercent:function() {
            if (!this._viewabilityTracker) {
                return-1;
            }
            return Math.min(Math.round(this._viewabilityTracker["getPercentViewable"]()), 100);
        }, getViewableOpportunity:function() {
            var visibilityPercent = this.getVisiblePercent();
            if (visibilityPercent < 0 || visibilityPercent > 100) {
                return-1;
            }
            return visibilityPercent < 50 ? 0 : 1;
        }};
    }(), [vdb.enums.Dependencies.VIEWABILITY_ROOT_CONTAINER]);
    vdb.utils.viewability.Viewability = vdb.core.Class.extend(function() {
        return{init:function(dependencies) {
            this._viewability = dependencies[vdb.enums.Dependencies.INTERSECTION_VIEWABILITY];
            if (this._viewability && !this._viewability.isSupported()) {
                this._viewability = dependencies[vdb.enums.Dependencies.BASE_VIEWABILITY];
            }
        }, setElement:function(element) {
            this._viewability.setElement(element);
        }, isVisible:function() {
            return this._viewability.isVisible();
        }, getVisiblePercent:function(topBoundary) {
            return this._viewability.getVisiblePercent(topBoundary);
        }, getViewableOpportunity:function() {
            return this._viewability.getViewableOpportunity();
        }};
    }(), [vdb.enums.Dependencies.BASE_VIEWABILITY, vdb.enums.Dependencies.INTERSECTION_VIEWABILITY]);
    vdb.Utils = function() {
        var _getComputedStyle = window.getComputedStyle || function(element) {
            return element.currentStyle;
        };
        var _isObjectOfType = function(obj, type) {
            return Object.prototype.toString.call(obj) === "[object " + type + "]";
        };
        var _getValueOrDefault = function(obj, path, defaultValue) {
            var prop = path.shift();
            if (!path.length) {
                return obj[prop] === undefined ? defaultValue : obj[prop];
            }
            if (vdb.Utils.isObject(obj[prop]) || vdb.Utils.isArray(obj[prop])) {
                return _getValueOrDefault(obj[prop], path, defaultValue);
            }
            return defaultValue;
        };
        return{round:function(somenum) {
            return~~(somenum + (somenum > 0 ? .5 : -.5));
        }, roundByDigit:function(num, digit) {
            var base = Math.pow(10, digit);
            return Math.round(num * base) / base;
        }, indexOf:function(arr, obj, start) {
            var i = start || 0;
            for (var j = arr.length;i < j;i++) {
                if (arr[i] === obj) {
                    return i;
                }
            }
            return-1;
        }, callAsync:function(func) {
            if (!func) {
                return;
            }
            setTimeout(func, 1);
        }, sortBySize:function(arr, asc) {
            return arr.sort(function(o1, o2) {
                var s1 = o1.width * o1.height;
                var s2 = o2.width * o2.height;
                return(asc ? 1 : -1) * (s1 - s2);
            });
        }, createVideoTag:function() {
            var PLAY_INLINE_MACRO = "%PLAY_INLINE%";
            var TAG_TEMPLATE = "<video " + PLAY_INLINE_MACRO + ' style="display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; padding: 0; margin: 0; z-index: 1;"></video>';
            var playInline = vdb.Utils.browser.playsNativeInline() ? "playsinline muted" : "";
            return vdb.dom.nodeFromHTML(TAG_TEMPLATE.replace(PLAY_INLINE_MACRO, playInline));
        }, getViewportWidth:function() {
            return document.compatMode === "BackCompat" ? document.body.clientWidth : document.documentElement.clientWidth;
        }, getViewportHeight:function() {
            return document.compatMode === "BackCompat" ? document.body.clientHeight : document.documentElement.clientHeight;
        }, getExtensionFromUrl:function(url) {
            if (typeof url !== "string" || !url) {
                return "";
            }
            var filename = vdb.Utils.parseUrl(url).pathname || "";
            var dot = filename.lastIndexOf(".");
            return dot !== -1 ? filename.substring(dot + 1).toLowerCase() : "";
        }, findVersionInUrl:function(url) {
            var version = url.match(/\d+\.\d+\.\d+/);
            return version && version[0] || "latest";
        }, isPageSecure:function() {
            var url = vdb.utils.WindowUtil.getTopMostLocation();
            return vdb.utils.StringUtils.startsWith(url, "https");
        }, getHostFromUrl:function(url) {
            var match = /(?:(?:[\w]+:)?\/\/)?([^?#\/:]+)/.exec(url);
            return match ? match[1] : "";
        }, getFilename:function(path, withExtension) {
            var filename = path.split("/").pop();
            var arr;
            if (!withExtension) {
                arr = filename.split(".");
                arr.pop();
                filename = arr.join(".");
            }
            return filename;
        }, getFileExtension:function(filename) {
            return filename.split(".").pop();
        }, contains:function(obj, val) {
            for (var prop in obj) {
                if (obj[prop] === val) {
                    return true;
                }
            }
            return false;
        }, getPlatformSupport:function(isFlashAvailable) {
            return "html5-vpaid" + (isFlashAvailable === true ? ",swf" : "");
        }, md5:function(strToMd5) {
            function rstr2hex(c) {
                var f = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
                var b = "";
                var a;
                for (var d = 0;d < c.length;d++) {
                    a = c.charCodeAt(d);
                    b += f.charAt(a >>> 4 & 15) + f.charAt(a & 15);
                }
                return b;
            }
            function str2rstr_utf8(c) {
                var b = "";
                var d = -1;
                var a;
                for (var e;++d < c.length;) {
                    a = c.charCodeAt(d);
                    e = d + 1 < c.length ? c.charCodeAt(d + 1) : 0;
                    if (a >= 55296 && a <= 56319 && e >= 56320 && e <= 57343) {
                        a = 65536 + ((a & 1023) << 10) + (e & 1023);
                        d++;
                    }
                    if (a <= 127) {
                        b += String.fromCharCode(a);
                    } else {
                        if (a <= 2047) {
                            b += String.fromCharCode(192 | a >>> 6 & 31, 128 | a & 63);
                        } else {
                            if (a <= 65535) {
                                b += String.fromCharCode(224 | a >>> 12 & 15, 128 | a >>> 6 & 63, 128 | a & 63);
                            } else {
                                if (a <= 2097151) {
                                    b += String.fromCharCode(240 | a >>> 18 & 7, 128 | a >>> 12 & 63, 128 | a >>> 6 & 63, 128 | a & 63);
                                }
                            }
                        }
                    }
                }
                return b;
            }
            function rstr2binl(b) {
                var a = Array(b.length >> 2);
                var c;
                for (c = 0;c < a.length;c++) {
                    a[c] = 0;
                }
                for (c = 0;c < b.length * 8;c += 8) {
                    a[c >> 5] |= (b.charCodeAt(c / 8) & 255) << c % 32;
                }
                return a;
            }
            function safe_add(a, d) {
                var c = (a & 65535) + (d & 65535);
                var b = (a >> 16) + (d >> 16) + (c >> 16);
                return b << 16 | c & 65535;
            }
            function bit_rol(a, b) {
                return a << b | a >>> 32 - b;
            }
            function binl2rstr(b) {
                var a = "";
                for (var c = 0;c < b.length * 32;c += 8) {
                    a += String.fromCharCode(b[c >> 5] >>> c % 32 & 255);
                }
                return a;
            }
            function md5_cmn(h, e, d, c, g, f) {
                return safe_add(bit_rol(safe_add(safe_add(e, h), safe_add(c, f)), g), d);
            }
            function md5_ff(g, f, k, j, e, i, h) {
                return md5_cmn(f & k | ~f & j, g, f, e, i, h);
            }
            function md5_gg(g, f, k, j, e, i, h) {
                return md5_cmn(f & j | k & ~j, g, f, e, i, h);
            }
            function md5_hh(g, f, k, j, e, i, h) {
                return md5_cmn(f ^ k ^ j, g, f, e, i, h);
            }
            function md5_ii(g, f, k, j, e, i, h) {
                return md5_cmn(k ^ (f | ~j), g, f, e, i, h);
            }
            function binl_md5(p, k) {
                p[k >> 5] |= 128 << k % 32;
                p[(k + 64 >>> 9 << 4) + 14] = k;
                var o = 1732584193;
                var n = -271733879;
                var m = -1732584194;
                var l = 271733878;
                for (var g = 0;g < p.length;g += 16) {
                    var j = o;
                    var h = n;
                    var f = m;
                    var e = l;
                    o = md5_ff(o, n, m, l, p[g + 0], 7, -680876936);
                    l = md5_ff(l, o, n, m, p[g + 1], 12, -389564586);
                    m = md5_ff(m, l, o, n, p[g + 2], 17, 606105819);
                    n = md5_ff(n, m, l, o, p[g + 3], 22, -1044525330);
                    o = md5_ff(o, n, m, l, p[g + 4], 7, -176418897);
                    l = md5_ff(l, o, n, m, p[g + 5], 12, 1200080426);
                    m = md5_ff(m, l, o, n, p[g + 6], 17, -1473231341);
                    n = md5_ff(n, m, l, o, p[g + 7], 22, -45705983);
                    o = md5_ff(o, n, m, l, p[g + 8], 7, 1770035416);
                    l = md5_ff(l, o, n, m, p[g + 9], 12, -1958414417);
                    m = md5_ff(m, l, o, n, p[g + 10], 17, -42063);
                    n = md5_ff(n, m, l, o, p[g + 11], 22, -1990404162);
                    o = md5_ff(o, n, m, l, p[g + 12], 7, 1804603682);
                    l = md5_ff(l, o, n, m, p[g + 13], 12, -40341101);
                    m = md5_ff(m, l, o, n, p[g + 14], 17, -1502002290);
                    n = md5_ff(n, m, l, o, p[g + 15], 22, 1236535329);
                    o = md5_gg(o, n, m, l, p[g + 1], 5, -165796510);
                    l = md5_gg(l, o, n, m, p[g + 6], 9, -1069501632);
                    m = md5_gg(m, l, o, n, p[g + 11], 14, 643717713);
                    n = md5_gg(n, m, l, o, p[g + 0], 20, -373897302);
                    o = md5_gg(o, n, m, l, p[g + 5], 5, -701558691);
                    l = md5_gg(l, o, n, m, p[g + 10], 9, 38016083);
                    m = md5_gg(m, l, o, n, p[g + 15], 14, -660478335);
                    n = md5_gg(n, m, l, o, p[g + 4], 20, -405537848);
                    o = md5_gg(o, n, m, l, p[g + 9], 5, 568446438);
                    l = md5_gg(l, o, n, m, p[g + 14], 9, -1019803690);
                    m = md5_gg(m, l, o, n, p[g + 3], 14, -187363961);
                    n = md5_gg(n, m, l, o, p[g + 8], 20, 1163531501);
                    o = md5_gg(o, n, m, l, p[g + 13], 5, -1444681467);
                    l = md5_gg(l, o, n, m, p[g + 2], 9, -51403784);
                    m = md5_gg(m, l, o, n, p[g + 7], 14, 1735328473);
                    n = md5_gg(n, m, l, o, p[g + 12], 20, -1926607734);
                    o = md5_hh(o, n, m, l, p[g + 5], 4, -378558);
                    l = md5_hh(l, o, n, m, p[g + 8], 11, -2022574463);
                    m = md5_hh(m, l, o, n, p[g + 11], 16, 1839030562);
                    n = md5_hh(n, m, l, o, p[g + 14], 23, -35309556);
                    o = md5_hh(o, n, m, l, p[g + 1], 4, -1530992060);
                    l = md5_hh(l, o, n, m, p[g + 4], 11, 1272893353);
                    m = md5_hh(m, l, o, n, p[g + 7], 16, -155497632);
                    n = md5_hh(n, m, l, o, p[g + 10], 23, -1094730640);
                    o = md5_hh(o, n, m, l, p[g + 13], 4, 681279174);
                    l = md5_hh(l, o, n, m, p[g + 0], 11, -358537222);
                    m = md5_hh(m, l, o, n, p[g + 3], 16, -722521979);
                    n = md5_hh(n, m, l, o, p[g + 6], 23, 76029189);
                    o = md5_hh(o, n, m, l, p[g + 9], 4, -640364487);
                    l = md5_hh(l, o, n, m, p[g + 12], 11, -421815835);
                    m = md5_hh(m, l, o, n, p[g + 15], 16, 530742520);
                    n = md5_hh(n, m, l, o, p[g + 2], 23, -995338651);
                    o = md5_ii(o, n, m, l, p[g + 0], 6, -198630844);
                    l = md5_ii(l, o, n, m, p[g + 7], 10, 1126891415);
                    m = md5_ii(m, l, o, n, p[g + 14], 15, -1416354905);
                    n = md5_ii(n, m, l, o, p[g + 5], 21, -57434055);
                    o = md5_ii(o, n, m, l, p[g + 12], 6, 1700485571);
                    l = md5_ii(l, o, n, m, p[g + 3], 10, -1894986606);
                    m = md5_ii(m, l, o, n, p[g + 10], 15, -1051523);
                    n = md5_ii(n, m, l, o, p[g + 1], 21, -2054922799);
                    o = md5_ii(o, n, m, l, p[g + 8], 6, 1873313359);
                    l = md5_ii(l, o, n, m, p[g + 15], 10, -30611744);
                    m = md5_ii(m, l, o, n, p[g + 6], 15, -1560198380);
                    n = md5_ii(n, m, l, o, p[g + 13], 21, 1309151649);
                    o = md5_ii(o, n, m, l, p[g + 4], 6, -145523070);
                    l = md5_ii(l, o, n, m, p[g + 11], 10, -1120210379);
                    m = md5_ii(m, l, o, n, p[g + 2], 15, 718787259);
                    n = md5_ii(n, m, l, o, p[g + 9], 21, -343485551);
                    o = safe_add(o, j);
                    n = safe_add(n, h);
                    m = safe_add(m, f);
                    l = safe_add(l, e);
                }
                return[o, n, m, l];
            }
            function rstr_md5(a) {
                return binl2rstr(binl_md5(rstr2binl(a), a.length * 8));
            }
            function hex_md5(a) {
                return rstr2hex(rstr_md5(str2rstr_utf8(a)));
            }
            var hexcase = 0;
            return hex_md5(strToMd5);
        }, getAge:function(birthDate) {
            if (!(birthDate instanceof Date)) {
                birthDate = new Date(birthDate);
            }
            var today = new Date;
            var age = today.getFullYear() - birthDate.getFullYear();
            birthDate.setFullYear(today.getFullYear());
            if (birthDate.getTime() > today.getTime()) {
                --age;
            }
            return age;
        }, rand:function() {
            var rnds;
            var rndBytes = new Array(16);
            try {
                if (window.crypto && window.crypto.getRandomValues) {
                    rnds = new Uint32Array(4);
                    return function() {
                        var random = [];
                        var c = -1;
                        for (window.crypto.getRandomValues(rnds);++c < 16;) {
                            random[c] = rnds[c >> 2] >>> (c & 3) * 8 & 255;
                        }
                        return random;
                    };
                }
            } catch (e) {
            }
            return function() {
                var b = rndBytes;
                var i = -1;
                for (var r;++i < 16;) {
                    if ((i & 3) === 0) {
                        r = Math.random() * 4294967296;
                    }
                    b[i] = r >>> ((i & 3) << 3) & 255;
                }
                return b;
            };
        }(), androidOS:function() {
            var match = /Android (\d+(?:\.\d+)+)/.exec(navigator.userAgent);
            var version = navigator.userAgent.match("Android") ? 1 : false;
            if (match) {
                var split = match[1].split(".");
                version = 0;
                var mult = 1;
                for (var i = 0;i < split.length;i++) {
                    version += parseInt(split[i]) / mult;
                    mult *= 10;
                }
            }
            return function() {
                return version;
            };
        }(), iPadOS:function() {
            var version;
            return function(noCache) {
                if (!version || noCache) {
                    var match = /CPU OS (.*) like Mac OS X/.exec(navigator.userAgent);
                    version = navigator.userAgent.match("iPad") ? 1 : false;
                    if (match) {
                        version = +match[1].replace(/_/, ".").replace(/_/g, "");
                    }
                }
                return version;
            };
        }(), iPhoneOS:function() {
            var version;
            return function(noCache) {
                if (!version || noCache) {
                    var match = /iPhone OS (.*) like Mac OS X/.exec(navigator.userAgent);
                    version = navigator.userAgent.match("iPod") || navigator.userAgent.match("iPhone") ? 1 : false;
                    if (match) {
                        version = +match[1].replace(/_/, ".").replace(/_/g, "");
                    }
                }
                return version;
            };
        }(), mobileOs:function() {
            return vdb.Utils.androidOS() || vdb.Utils.iPhoneOS() || vdb.Utils.iPadOS() || vdb.Utils.isWindowsPhone() || vdb.Utils.isWindowsTablet();
        }, desktopOs:function() {
            return!vdb.Utils.mobileOs();
        }, isSmallScreen:function() {
            return Math.min(screen.width, screen.height) <= 360;
        }, isAndroidPhone:function() {
            var ua = navigator.userAgent;
            var genericAndroidPhone = /(?=.*\bAndroid\b)(?=.*\bMobile\b)/i;
            var amazonAndroidPhone = /(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i;
            return genericAndroidPhone.test(ua) || amazonAndroidPhone.test(ua);
        }, isWindowsPhone:function() {
            return/Windows Phone/i.test(navigator.userAgent);
        }, isWindowsTablet:function() {
            return/(?=.*\bWindows\b)(?=.*\bARM\b)/i.test(navigator.userAgent);
        }, isHandset:function() {
            return!!(vdb.Utils.iPhoneOS() || vdb.Utils.isAndroidPhone() || vdb.Utils.isWindowsPhone());
        }, isTablet:function() {
            return vdb.Utils.iPadOS() || vdb.Utils.androidOS() && !vdb.Utils.isAndroidPhone() || vdb.Utils.isWindowsTablet();
        }, isIE:navigator.userAgent.indexOf("MSIE ") >= 0 || navigator.userAgent.indexOf("Trident/") >= 0, isEdge:navigator.userAgent.indexOf("Edge") >= 0, isFF:navigator.userAgent.toLowerCase().indexOf("firefox") >= 0, hasTouchSupport:"ontouchstart" in window || navigator["maxTouchPoints"] > 0 || navigator["msMaxTouchPoints"] > 0, webglSupport:function() {
            try {
                var canvas = document.createElement("canvas");
                return!!(window.WebGLRenderingContext && (canvas.getContext("webgl") || canvas.getContext("experimental-webgl")));
            } catch (e) {
                return false;
            }
        }(), removeFromParent:function(element) {
            if (element && element.parentNode) {
                element.parentNode.removeChild(element);
            }
        }, removeFromArray:function(array, object) {
            if (vdb.Utils.isArray(array)) {
                for (var i;(i = array.indexOf(object)) !== -1;) {
                    array.splice(i, 1);
                }
            }
            return array;
        }, isFunction:function(obj) {
            return _isObjectOfType(obj, "Function");
        }, isObject:function(obj) {
            return _isObjectOfType(obj, "Object");
        }, isString:function(obj) {
            return _isObjectOfType(obj, "String");
        }, isArray:function(obj) {
            return _isObjectOfType(obj, "Array");
        }, isHtmlCollection:function(obj) {
            return _isObjectOfType(obj, "HTMLCollection");
        }, isNodeList:function(obj) {
            return _isObjectOfType(obj, "NodeList");
        }, isCollection:function(obj) {
            return vdb.Utils.isArray(obj) || vdb.Utils.isHtmlCollection(obj) || vdb.Utils.isNodeList(obj);
        }, isClientRect:function(obj) {
            return _isObjectOfType(obj, "ClientRect") || _isObjectOfType(obj, "DOMRect");
        }, toCollection:function(obj) {
            if (obj !== undefined && obj !== null) {
                return vdb.Utils.isCollection(obj) ? obj : [obj];
            }
            return[];
        }, containsValue:function(obj, value) {
            for (var i in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, i) && obj[i] === value) {
                    return true;
                }
            }
            return false;
        }, getInnerWidth:function(element) {
            var computedStyle = _getComputedStyle(element);
            var computedHorizontalPadding = parseInt(computedStyle.paddingLeft) + parseInt(computedStyle.paddingRight);
            return element.clientWidth - computedHorizontalPadding;
        }, getInnerHeight:function(element) {
            var computedStyle = _getComputedStyle(element);
            var computedVerticalPadding = parseInt(computedStyle.paddingTop) + parseInt(computedStyle.paddingBottom);
            return element.clientHeight - computedVerticalPadding;
        }, setStyle:function(elems, styles) {
            elems = vdb.Utils.toCollection(elems);
            for (var i = 0;i < elems.length;++i) {
                for (var style in styles) {
                    if (Object.prototype.hasOwnProperty.call(styles, style)) {
                        elems[i].style[style] = styles[style];
                    }
                }
            }
        }, createElement:function(tagName, attributes, parent, innerHtml) {
            var element = vdb.dom.createElement(tagName);
            var attribute;
            var attributeValue;
            attributes = attributes || {};
            for (attribute in attributes) {
                if (Object.prototype.hasOwnProperty.call(attributes, attribute)) {
                    attributeValue = attributes[attribute];
                    if (attributeValue !== null) {
                        element.setAttribute(attribute, vdb.Utils.isArray(attributeValue) ? attributeValue.join(" ") : attributeValue);
                    }
                }
            }
            if (innerHtml) {
                element.innerHTML = innerHtml;
            }
            if (parent) {
                parent.appendChild(element);
            }
            return element;
        }, hasClass:function(elem, cls) {
            return(new RegExp("(^|\\s)" + cls + "(\\s|$)")).test(elem.className);
        }, addClass:function(elems, classes) {
            elems = vdb.Utils.toCollection(elems);
            classes = vdb.Utils.toCollection(classes);
            for (var i = 0;i < elems.length;++i) {
                var clsList = [];
                for (var j = 0;j < classes.length;++j) {
                    if (!vdb.Utils.hasClass(elems[i], classes[j])) {
                        clsList.push(classes[j]);
                    }
                }
                elems[i].className = (elems[i].className + " " + clsList.join(" ")).trim();
            }
        }, removeClass:function(elems, classes) {
            elems = vdb.Utils.toCollection(elems);
            classes = vdb.Utils.toCollection(classes);
            for (var i = 0;i < elems.length;++i) {
                if (elems[i] && elems[i].className) {
                    for (var j = 0;j < classes.length;++j) {
                        var pattern = new RegExp("(^|\\s+)" + classes[j] + "(\\s+|$)", "g");
                        elems[i].className = elems[i].className.replace(pattern, " ").trim();
                    }
                }
            }
        }, replaceClass:function(elems, class1, class2) {
            vdb.Utils.removeClass(elems, class1);
            vdb.Utils.addClass(elems, class2);
        }, toggleClass:function(elems, classes, condition) {
            if (condition) {
                vdb.Utils.addClass(elems, classes);
            } else {
                vdb.Utils.removeClass(elems, classes);
            }
        }, setFuncIRIPrefix:function(svg) {
            return svg.replace(/@func-iri-prefix/g, vdb.Utils.isFF ? location.href.replace(location.hash, "") : "");
        }, addPrefixedEventListeners:function() {
            var prefixes = ["webkit", "moz", "MS", "o", ""];
            var prefixesCount = prefixes.length;
            return function(elem, eventName, callback) {
                for (var i = -1;++i < prefixesCount;) {
                    if (prefixes[i] === "") {
                        eventName = eventName.toLowerCase();
                    }
                    elem.addEventListener(prefixes[i] + eventName, callback);
                }
            };
        }(), getSiblings:function(elem, excludeNodesWithoutHeight, excludeNodesNotInDocFlow) {
            var sib = (elem.parentNode || {}).firstChild;
            var sibs = [];
            for (var sibPos;sib;) {
                if (sib !== elem) {
                    if (sib.nodeType === 1 && (!excludeNodesWithoutHeight || sib.clientHeight > 0) && (!excludeNodesNotInDocFlow || (sibPos = _getComputedStyle(sib).position) !== "absolute" && sibPos !== "fixed")) {
                        sibs.push(sib);
                    }
                }
                sib = sib.nextSibling;
            }
            return sibs;
        }, isEmpty:function(obj) {
            if (vdb.Utils.isArray(obj) && obj.length > 0) {
                return false;
            } else {
                if (vdb.Utils.isObject(obj)) {
                    for (var item in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, item)) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }, extend:function() {
            for (var i = 1;i < arguments.length;i++) {
                for (var key in arguments[i]) {
                    if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
                        arguments[0][key] = arguments[i][key];
                    }
                }
            }
            return arguments[0];
        }, cloneArray:function(array) {
            if (vdb.Utils.isArray(array)) {
                array = array.slice();
            }
            return array;
        }, parseUrl:function(url) {
            var a = document.createElement("a");
            a.href = url;
            return{protocol:a.protocol, hostname:a.hostname, port:a.port, host:a.host, origin:a.origin, pathname:a.pathname, query:a.search};
        }, parseBoolean:function(value) {
            var res;
            if (value == "true" || value == "1") {
                res = true;
            } else {
                if (value == "false" || value == "0") {
                    res = false;
                }
            }
            return res;
        }, truncateTextToFit:function(text, container, containerHeight) {
            var textLength = text.length;
            var currentHeight = container.clientHeight;
            var targetHeight = containerHeight || function() {
                var h = vdb.Utils.getInnerHeight(container);
                container.style.height = "auto";
                return h;
            }();
            var truncateText = function(upperLength, lowerLength) {
                var truncatedText = text.substring(0, lowerLength).trim();
                container.innerHTML = truncatedText;
                if (vdb.Utils.getInnerHeight(container) > targetHeight) {
                    if (upperLength === lowerLength) {
                        container.innerHTML = truncatedText.substring(0, truncatedText.length - 4) + "...";
                        if (!containerHeight) {
                            container.style.height = currentHeight + "px";
                        }
                    } else {
                        truncateText(lowerLength, lowerLength - Math.ceil((upperLength - lowerLength) / 2));
                    }
                } else {
                    if (upperLength - lowerLength === 1) {
                        container.innerHTML = truncatedText.substring(0, truncatedText.length - 3) + "...";
                        if (!containerHeight) {
                            container.style.height = currentHeight + "px";
                        }
                    } else {
                        truncateText(upperLength, upperLength - Math.floor((upperLength - lowerLength) / 2));
                    }
                }
            };
            if (vdb.Utils.getInnerHeight(container) > targetHeight) {
                truncateText(textLength, Math.floor(textLength / 2));
            } else {
                if (!containerHeight) {
                    container.style.height = currentHeight + "px";
                }
            }
        }, getObjectValues:function(obj) {
            var vals = [];
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    vals.push(obj[key]);
                }
            }
            return vals;
        }, toPromise:function(dispatcher, event) {
            return new vdb.Promise(function(resolve) {
                vdb.events.EventContext.bindOnce(dispatcher, event, function(data) {
                    resolve(data);
                });
            });
        }, promiseTimeout:function(timeout) {
            return new vdb.Promise(function(resolve, reject) {
                setTimeout(function() {
                    reject(new Error("timeout " + timeout + " ms reached"));
                }, timeout);
            });
        }, getBrowserLanguage:function() {
            var code = navigator.languages && navigator.languages[0];
            if (code) {
                if (code.indexOf("-") !== -1) {
                    code = code.split("-")[0];
                }
                return code;
            }
            return null;
        }, getValueOrDefault:function(obj, path, defaultValue) {
            return _getValueOrDefault(obj || {}, path.slice(), defaultValue);
        }, hlsPluginSupported:function() {
            try {
                return window && window["MediaSource"] && typeof window["MediaSource"]["isTypeSupported"] === "function" && window["MediaSource"]["isTypeSupported"]('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
            } catch (e) {
                return false;
            }
        }, copyToClipboard:function(input) {
            var isCopySucceeded = true;
            var doc = input.ownerDocument;
            if (vdb.Utils.iPadOS() || vdb.Utils.iPhoneOS()) {
                var range = doc.createRange();
                range.selectNodeContents(input);
                var selection = window.getSelection();
                selection.removeAllRanges();
                selection.addRange(range);
                input.setSelectionRange(0, 999999);
                isCopySucceeded = doc.execCommand("copy", false);
                selection.removeAllRanges();
            } else {
                input.select();
                isCopySucceeded = doc.execCommand("copy");
            }
            return isCopySucceeded;
        }, processRow:function(row) {
            var finalVal = "";
            var result;
            var innerValue;
            for (var j = 0;j < row.length;j++) {
                innerValue = row[j] === null ? "" : row[j].toString();
                if (row[j] instanceof Date) {
                    innerValue = row[j].toLocaleString();
                }
                result = innerValue.replace(/"/g, '""');
                if (result.search(/("|,|\n)/g) >= 0) {
                    result = '"' + result + '"';
                }
                if (j > 0) {
                    finalVal += ",";
                }
                finalVal += result;
            }
            return finalVal + "\n";
        }, exportToCsv:function(filename, rows) {
            var csvFile = "";
            var blob;
            var link;
            var url;
            for (var i = 0;i < rows.length;i++) {
                csvFile += this.processRow(rows[i]);
            }
            blob = new Blob([csvFile], {type:"text/csv;charset=utf-8;"});
            if (navigator.msSaveBlob) {
                navigator.msSaveBlob(blob, filename);
            } else {
                link = document.createElement("a");
                if (link["download"] !== undefined) {
                    url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", filename);
                    link.style.visibility = "hidden";
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
            }
        }};
    }();
    (function(def) {
        var browser = {};
        var ua = navigator.userAgent.toLowerCase();
        var platform = navigator.platform.toLowerCase();
        var ua2 = ua.match(/(opera|ie|trident|firefox|chrome|crios|version|fban)[\s\/:]([\w\d\.]+)?.*?(safari|version[\s\/:]([\w\d\.]+)|$)/);
        if (ua2) {
            var match = ua2[0].match(/(chrome|crios)\/(.*?)\s/);
            if (match) {
                ua2 = [null, "chrome", match[2]];
            }
        } else {
            ua2 = [null, "unknown", 0];
        }
        var mode = (ua2[1] === "ie" || ua2[1] === "trident") && document.documentMode;
        browser.name = ua2[1] === "version" ? ua2[3] : ua2[1];
        browser.version = mode || parseFloat(ua2[1] === "opera" && ua2[4] ? ua2[4] : ua2[2]);
        browser.platform = {name:ua.match(/ip(?:ad|od|hone)/) ? "ios" : (ua.match(/(?:webos|android)/) || platform.match(/mac|win|linux/) || ["other"])[0], version:def.androidOS() || def.iPadOS() || def.iPhoneOS() || ""};
        browser.features = {xpath:!!document.evaluate, air:!!window.runtime, query:!!document.querySelector, json:!!window.JSON};
        browser.isMobile = function() {
            return/android|blackberry|iphone|ipad|ipod|opera mini|iemobile/i.test(ua);
        };
        browser.isIos = function() {
            return browser.platform.name === vdb.enums.PlatformName.IOS;
        };
        browser[browser.name] = true;
        browser[browser.name + parseInt(browser.version, 10)] = true;
        browser.platform[browser.platform.name] = true;
        browser.playsNativeInline = function() {
            var isIos = browser.isIos();
            return!browser.isMobile() || def.iPadOS() || isIos && browser.name === "safari" && browser.version >= 10 || isIos && browser.name === "chrome" && browser.version >= 54 || isIos && browser.name === "fban" || !!browser["platform"]["android"] && browser.name === "chrome" && browser.version >= 53 || !!browser["platform"]["android"] && browser.name === "firefox";
        };
        browser.restrictsAutoplayWithSound = function() {
            return browser.isMobile() || browser.name === "safari" && browser.version >= 11 || browser.name === "chrome" && browser.version >= 64;
        };
        def.browser = browser;
    })(vdb.Utils);
    (function(def) {
        function attachScriptListeners(scriptElement, callback) {
            function clearCallbacks() {
                var foo = function() {
                };
                scriptElement.onerror = foo;
                scriptElement.onreadystatechange = foo;
                scriptElement.onload = foo;
                scriptElement.parentNode.removeChild(scriptElement);
            }
            scriptElement.onload = function() {
                clearCallbacks();
                if (callback != null) {
                    callback(true);
                }
            };
            scriptElement.onerror = function() {
                clearCallbacks();
                if (callback != null) {
                    callback(false);
                }
            };
            scriptElement.onreadystatechange = function() {
                if (scriptElement.readyState === "complete" || scriptElement.readyState === "loaded") {
                    scriptElement.onload();
                }
            };
        }
        var UPLYNK_URL_PATTERN = /\/\/(.+)\.uplynk\.com\//i;
        var VIDEO_EXTENSION = {MP4:"mp4", OGG:"ogg", OGV:"ogv", WEBM:"webm", M3U:"m3u", M3U8:"m3u8"};
        var VIDEO_TYPES = {"mp4":"video/mp4", "ogg":"video/ogg", "ogv":"video/ogg", "webm":"video/webm", "m3u":"application/vnd.apple.mpegurl", "m3u8":"application/vnd.apple.mpegurl"};
        def.mimeTypeByExt = function(url) {
            var parts = url.split("?");
            var base = parts[0];
            var ext = base.substring(base.lastIndexOf(".") + 1).toLowerCase();
            var mimetype = VIDEO_TYPES[ext];
            if (!mimetype && parts.length > 1) {
                var params = vdb.Utils.deserialize(parts[1]);
                ext = params["enc"] || (params["type"] + "").replace(".", "");
                mimetype = VIDEO_TYPES[ext];
            }
            return mimetype;
        };
        def.getHlsUrlIndex = function(video) {
            if (video.videoUrls) {
                var i = 0;
                var videoUrls = video.videoUrls;
                for (var len = videoUrls.length;i < len;++i) {
                    if (vdb.Utils.isHls(videoUrls[i])) {
                        return i;
                    }
                }
            }
            return-1;
        };
        def.isHls = function(url) {
            var ext = vdb.Utils.getExtensionFromUrl(url);
            return ext === VIDEO_EXTENSION.M3U8;
        };
        def.hasHls = function(videos) {
            var i;
            var j;
            var urls;
            for (i = 0;i < videos.length;i++) {
                urls = vdb.Utils.getValueOrDefault(videos[i], ["videoUrls"], []);
                for (j = 0;j < urls.length;j++) {
                    if (vdb.Utils.isHls(urls[j])) {
                        return true;
                    }
                }
            }
            return false;
        };
        def.hasOnlyHls = function(videos) {
            var i;
            var j;
            var urls;
            var urlsCounter = 0;
            for (i = 0;i < videos.length;i++) {
                urls = vdb.Utils.getValueOrDefault(videos[i], ["videoUrls"], []);
                for (j = 0;j < urls.length;j++) {
                    if (!vdb.Utils.isHls(urls[j])) {
                        return false;
                    }
                    urlsCounter++;
                }
            }
            return urlsCounter > 0;
        };
        def.isUplynk = function(url) {
            return UPLYNK_URL_PATTERN.test(url);
        };
        def.serialize = function(obj) {
            if (!obj) {
                return null;
            }
            if (typeof obj === "string") {
                return obj;
            }
            var str = [];
            if (obj && typeof obj === "object") {
                for (var p in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, p)) {
                        var value = obj[p];
                        if (value === 0 || value && typeof value !== "function") {
                            var pair = encodeURIComponent(p) + "=";
                            pair += encodeURIComponent(String(value));
                            str.push(pair);
                        }
                    }
                }
            }
            return str.join("&");
        };
        def.deserialize = function(str, propertyCallback) {
            var obj = {};
            if (str) {
                obj = {};
                var pairs = str.split("&");
                for (var i = 0;i < pairs.length;i++) {
                    var pair = pairs[i].split("=");
                    var key = pair[0];
                    try {
                        key = decodeURIComponent(key);
                    } catch (e) {
                    }
                    try {
                        var value;
                        if (pair.length > 1) {
                            value = decodeURIComponent(pair[1]);
                        }
                        obj[key] = value;
                        if (propertyCallback) {
                            propertyCallback(key, value);
                        }
                    } catch (e$$0) {
                    }
                }
            }
            return obj;
        };
        def.multiSerialize = function(objArr) {
            var strBuff;
            var out = [];
            for (var i = 0;i < objArr.length;i++) {
                strBuff = vdb.Utils.serialize(objArr[i]);
                if (strBuff) {
                    out.push(strBuff);
                }
            }
            return out.join("&");
        };
        def.jsonStringify = function(value, replacer, space) {
            var arrayToJSON = Array.prototype.toJSON;
            delete Array.prototype.toJSON;
            var result;
            if (window.JSON && window.JSON.stringify) {
                result = JSON.stringify(value, replacer, space);
            } else {
                result = window.JSON && window.JSON["encode"] ? window.JSON["encode"](value) : String.valueOf(value);
            }
            if (arrayToJSON) {
                Array.prototype.toJSON = arrayToJSON;
            }
            return result;
        };
        var BASE64_KEYS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        def.base64Encode = vdb.$win && vdb.$win.btoa && vdb.$win.btoa.bind(vdb.$win) || function(input) {
            var output = "";
            var chr1;
            var chr2;
            var chr3;
            var enc1;
            var enc2;
            var enc3;
            var enc4;
            for (var i = 0;i < input.length;) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                enc4 = chr3 & 63;
                if (isNaN(chr2)) {
                    enc3 = 64;
                    enc4 = 64;
                } else {
                    if (isNaN(chr3)) {
                        enc4 = 64;
                    }
                }
                output = output + BASE64_KEYS.charAt(enc1) + BASE64_KEYS.charAt(enc2) + BASE64_KEYS.charAt(enc3) + BASE64_KEYS.charAt(enc4);
            }
            return output;
        };
        def.base64Decode = vdb.$win && vdb.$win.atob && vdb.$win.atob.bind(vdb.$win) || function(input) {
            var output = "";
            var chr1;
            var chr2;
            var chr3;
            var enc1;
            var enc2;
            var enc3;
            var enc4;
            var i = 0;
            for (input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");i < input.length;) {
                enc1 = BASE64_KEYS.indexOf(input.charAt(i++));
                enc2 = BASE64_KEYS.indexOf(input.charAt(i++));
                enc3 = BASE64_KEYS.indexOf(input.charAt(i++));
                enc4 = BASE64_KEYS.indexOf(input.charAt(i++));
                chr1 = enc1 << 2 | enc2 >> 4;
                chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                chr3 = (enc3 & 3) << 6 | enc4;
                output += String.fromCharCode(chr1);
                if (enc3 !== 64) {
                    output += String.fromCharCode(chr2);
                }
                if (enc4 !== 64) {
                    output += String.fromCharCode(chr3);
                }
            }
            return output;
        };
        def.copy = function(from, to) {
            to = to || {};
            for (var prop in from) {
                if (Object.prototype.hasOwnProperty.call(from, prop)) {
                    to[prop] = from[prop];
                }
            }
            return to;
        };
        def.safeCopy = function(from, to) {
            to = to || {};
            for (var prop in from) {
                if (Object.prototype.hasOwnProperty.call(from, prop) && typeof to[prop] === "undefined") {
                    to[prop] = from[prop];
                }
            }
            return to;
        };
        def.timeToSec = function(time) {
            if (time === "") {
                return 0;
            }
            time = time.split(".")[0];
            var total = 0;
            var parts = time.split(":");
            parts.reverse();
            var multipliers = [1, 60, 3600];
            for (var i = 0;i < parts.length;i++) {
                total += parts[i] * multipliers[i];
            }
            return total;
        };
        def.injectScript = function(doc, srcUrl, callback) {
            var scriptElement = doc.createElement("script");
            scriptElement.type = "text/javascript";
            scriptElement.src = srcUrl;
            attachScriptListeners(scriptElement, callback);
            var container = doc.getElementsByTagName("head")[0];
            container.appendChild(scriptElement);
        };
        def.mkCaller = function(f) {
            var slice = Array.prototype.slice;
            var staticArgs = slice.call(arguments, 0);
            staticArgs.shift();
            return function() {
                var args = staticArgs.concat(slice.call(arguments, 0));
                f.apply(null, args);
            };
        };
        def.getDomain = function(url) {
            if (!url) {
                return null;
            }
            if (url.indexOf("//") === -1) {
                url = "//" + url;
            }
            return vdb.Utils.parseUrl(url).hostname;
        };
        def.compareDomains = function(a, b) {
            if (typeof a !== "string" || typeof b !== "string") {
                return false;
            }
            var domain1 = a.toLowerCase().replace(/^www\./, "");
            var domain2 = b.toLowerCase().replace(/^www\./, "");
            return domain1 === domain2;
        };
        def.getWithDefault = function(obj, defaultValue) {
            return obj != null ? obj : defaultValue;
        };
        def.find = function(list, predicate) {
            var length = list.length >>> 0;
            var value;
            for (var i = 0;i < length;i++) {
                value = list[i];
                if (predicate(value, i, list)) {
                    return value;
                }
            }
            return undefined;
        };
        def.filterArr = function(array, predicate, thisArg) {
            if (!array || array.length === undefined) {
                throw new TypeError(array + " is not an array!");
            }
            if (typeof predicate !== "function") {
                throw new TypeError(predicate + " is not a function!");
            }
            var res = [];
            var arrLength = array.length;
            for (var i = 0;i < arrLength;i++) {
                if (predicate.call(thisArg, array[i], i, array)) {
                    res.push(array[i]);
                }
            }
            return res;
        };
        def.filterByKey = function(obj, predicate, options) {
            var opt = options || {};
            var out = {};
            var func = function(p) {
                if (opt.modify) {
                    p = opt.modify(p);
                }
                if (opt.toLower !== false) {
                    p = p.toLowerCase();
                }
                return p;
            };
            for (var p$$0 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, p$$0) && predicate(p$$0)) {
                    out[func(p$$0)] = obj[p$$0];
                }
            }
            return out;
        };
        def.filterByPrefix = function(obj, prefix, options) {
            prefix = prefix || "";
            options = options || {};
            var prefixFilter = function(prop) {
                return prop.indexOf(prefix) === 0;
            };
            var prefixRemover = function(prop) {
                return prop.split(prefix)[1];
            };
            options.modify = options.modify ? prefixRemover : null;
            return def.filterByKey(obj, prefixFilter, options);
        };
        def.getS265Channel = function() {
            return window["s_265"] && window["s_265"]["channel"];
        };
    })(vdb.Utils);
    vdb.log = {};
    (function(def) {
        function addZero(i) {
            return i < 10 ? "0" + i : i;
        }
        function addDoubleZero(i) {
            return i < 10 ? "00" + i : i < 100 ? "0" + i : i;
        }
        function formatTime(time) {
            return addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + "." + addDoubleZero(time.getMilliseconds());
        }
        function log(level, name, args) {
            var loglvl = vdb.Utils.indexOf(_levels, level);
            if (loglvl >= def.Logger.getLevel()) {
                if (window.console) {
                    args = [formatTime(new Date), "[" + level + "]", name + ":" + (def.Logger.preffix ? " " + def.Logger.preffix : "")].concat(Array.prototype.slice.apply(args));
                    var method = level.toLowerCase();
                    if (!window.console[method]) {
                        method = "log";
                    }
                    var methodFunc = window.console[method];
                    if (typeof methodFunc === "object") {
                        methodFunc = Function.prototype.bind.call(methodFunc, window.console);
                    }
                    methodFunc && methodFunc.apply(window.console, args);
                }
            }
            if (level == LEVEL.ERROR && errorTracker) {
                try {
                    errorTracker.trackError("jsException", name, args);
                } catch (e) {
                }
            }
        }
        var errorTracker;
        if (vdb && vdb.define) {
            vdb.define(function(ctx, context) {
                errorTracker = context.getInjector().resolveSync(vdb.enums.Dependencies.ERROR_TRACKER);
            });
        }
        var LEVEL = {DEBUG:"DEBUG", INFO:"INFO", WARN:"WARN", ERROR:"ERROR"};
        var _levels = ["DEBUG", "INFO", "WARN", "ERROR"];
        def.Logger = vdb.core.Class.extend({init:function(name) {
            this.name = name;
        }, debug:function() {
            log(LEVEL.DEBUG, this.name, arguments);
        }, info:function() {
            log(LEVEL.INFO, this.name, arguments);
        }, warn:function() {
            log(LEVEL.WARN, this.name, arguments);
        }, error:function() {
            log(LEVEL.ERROR, this.name, arguments);
        }});
        var LOGGERS = {};
        def.getLogger = function(name) {
            return LOGGERS[name] || (LOGGERS[name] = new def.Logger(name));
        };
        def.Logger.preffix = "";
        def.Logger.getLevel = function() {
            if (def.Logger._logLevel === undefined) {
                var loglvlOverride = parseInt(vdb.utils.UrlUtils.getParameterByName("aolplayerloglvl"));
                def.Logger._logLevel = !isNaN(loglvlOverride) ? loglvlOverride : Number(vdb.Props["logger.level"]);
            }
            return def.Logger._logLevel;
        };
    })(vdb.log);
    vdb.EventBus = vdb.core.Class.extend(function() {
        return{init:function() {
            this._eventListeners = {};
            this._busListeners = [];
            this._logger = vdb.log.getLogger("EventBus");
        }, addEventListener:function(eventName, func) {
            var list = this._eventListeners[eventName];
            if (!list) {
                this._eventListeners[eventName] = list = [];
            }
            list.push(func);
        }, removeEventListener:function(eventName, func) {
            var listeners = this._eventListeners[eventName] || [];
            for (var i = 0;i < listeners.length;i++) {
                if (listeners[i] == func) {
                    listeners.splice(i, 1);
                    i--;
                }
            }
        }, addBusListener:function(func) {
            this._busListeners.push(func);
        }, dispatchEvent:function(event, arg_unused) {
            var eventName;
            var args;
            var j;
            var length;
            if (typeof event === "string") {
                eventName = event;
                args = Array.prototype.slice.call(arguments, 1);
            } else {
                eventName = event.type;
                event.target = this;
                args = Array.prototype.slice.call(arguments, 0);
            }
            var listeners = this._eventListeners[eventName];
            if (listeners) {
                listeners = listeners.slice();
                for (j = 0, length = listeners.length;j < length;j++) {
                    this._notifyListener(eventName, args, listeners[j]);
                }
            }
            for (j = 0, length = this._busListeners.length;j < length;j++) {
                this._busListeners[j].call({}, eventName, args);
            }
        }, _notifyListener:function(eventName, args, listener) {
            try {
                listener.apply({}, args);
            } catch (error) {
                this._logger.error(error.message, "event", {"type":eventName, "args":args}, error.stack);
            }
        }, removeAllListeners:function() {
            this._logger.info("Removing all listeners.");
            for (var item in this._eventListeners) {
                if (vdb.Utils.isArray(this._eventListeners[item])) {
                    delete this._eventListeners[item];
                }
            }
        }};
    }());
    vdb.utils.viewability.SmartViewability = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("vdb.utils.viewability.SmartViewability");
        return{init:function(dependencies) {
            this._moatViewability = dependencies[vdb.enums.Dependencies.MOAT_VIEWABILITY];
            this._viewability = dependencies[vdb.enums.Dependencies.VIEWABILITY];
        }, setElement:function(element) {
            this._moatViewability.setElement(element);
            this._viewability.setElement(element);
        }, isVisible:function() {
            return this._moatViewability.isVisible();
        }, getVisiblePercent:function() {
            var result = this._moatViewability.getVisiblePercent();
            if (result === -1) {
                LOGGER.debug("getVisiblePercent fallback");
                result = this._viewability.getVisiblePercent();
            }
            LOGGER.debug("getVisiblePercent", result);
            return result;
        }, getViewableOpportunity:function() {
            var result = this._moatViewability.getViewableOpportunity();
            if (result === -1) {
                LOGGER.debug("getViewableOpportunity fallback");
                result = this._viewability.getViewableOpportunity();
            }
            LOGGER.debug("getViewableOpportunity", result);
            return result;
        }};
    }(), [vdb.enums.Dependencies.MOAT_VIEWABILITY, vdb.enums.Dependencies.VIEWABILITY]);
    vdb.ValueParser = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("ValueParser");
        var PARSER_TYPE = {NUMBER:"number", FLOAT:"float", STRING:"string", BOOLEAN:"boolean"};
        var _parseNumber = function(value) {
            return typeof value === "string" && value.length > 0 && !isNaN(value) ? Number(value) : undefined;
        };
        var _parseFloat = function(value) {
            return/^(\-|\+)?([0-9]+(\.[0-9]+)?)$/.test(value) ? Number(value) : undefined;
        };
        var _parseString = function(value) {
            return typeof value === "string" && value.length > 0 ? value : undefined;
        };
        return{parse:function(value, parser) {
            var result;
            switch(parser) {
                case PARSER_TYPE.NUMBER:
                    result = _parseNumber(value);
                    break;
                case PARSER_TYPE.FLOAT:
                    result = _parseFloat(value);
                    break;
                case PARSER_TYPE.STRING:
                    result = _parseString(value);
                    break;
                case PARSER_TYPE.BOOLEAN:
                    result = vdb.Utils.parseBoolean(value);
                    break;
                default:
                    LOGGER.debug("parser is not supported - ", parser);
                    result = undefined;
                    break;
            }
            if (result === undefined) {
                LOGGER.debug("value can't be parsed - " + value + ", " + parser);
            }
            return result;
        }, PARSER_TYPE:PARSER_TYPE};
    }());
    vdb.context = {};
    vdb.context.BidModifier = vdb.core.Class.extend(function() {
        return{init:function(raw) {
            raw = raw || {};
            this.update(raw);
        }, update:function(raw) {
            this._query = raw["query"];
            this._bid = raw["bid"];
            this._videos = raw["videos"];
            if (typeof this._bid !== "string") {
                this._bid = undefined;
            }
            if (typeof this._query !== "string") {
                this._query = undefined;
            }
            if (typeof this._videos === "string") {
                this._videos = this._videos.split(",");
            } else {
                if (!vdb.Utils.isArray(this._videos)) {
                    this._videos = [];
                }
            }
        }, getQuery:function() {
            return this._query;
        }, getBid:function() {
            return this._bid;
        }, getVideos:function() {
            return this._videos;
        }, hasModifications:function() {
            return this._query || this._videos.length > 0 || this._bid;
        }};
    }());
    vdb.context.ContextUrls = vdb.core.Class.extend(function() {
        var DEFAULT_URLS = {"cdn":"h", "syn":"http://syn.5min.com/", "trk":"http://trk.dev.vidible.tv/trk/", "qoe":"http://trk.dev.vidible.tv/qoe/", "lstr":"http://trk.dev.vidible.tv/lstr/", "ds":"http://delivery.vidible.tv/", "ads":"http://video.adaptv.advertising.com/", "adt":"http://ads-trk-stage.vidible.tv/", "ptv":"http://portal.vidible.tv/", "imp":"http://cdn.vidible.tv/stage/inline-player/js/latest/inline-player.js", "rel":"http://delivery.vidible.tv/relatedVideosPlacement/",
            "strip":"http://strips.stage.vidible.tv/", "hls":"http://content.uplynk.com/", "subs":"http://subs.stage.vidible.tv/translate", "video":"http://www.aol.com/video/view/", "polls":"https://polls.stage.vidible.tv/v2/polls/"};
        var DEFAULT_URLS_SECURE = {"cdn":"https://cdn-ssl.vidible.tv/dev/", "syn":"https://syn.5min.com/", "trk":"https://trk.dev.vidible.tv/trk/", "qoe":"https://trk.dev.vidible.tv/qoe/", "lstr":"https://trk.vidible.tv/lstr/", "ds":"https://delivery.vidible.tv/", "ads":"https://video.adaptv.advertising.com/", "adt":"https://ads-trk-stage.vidible.tv/", "ptv":"http://portal.vidible.tv/", "imp":"https://cdn-ssl.vidible.tv/stage/inline-player/js/latest/inline-player.js", "rel":"https://delivery.vidible.tv/relatedVideosPlacement/",
            "strip":"https://strips.stage.vidible.tv/", "hls":"https://content.uplynk.com/", "subs":"https://subs.stage.vidible.tv/translate", "video":"https://www.aol.com/video/view/", "polls":"https://polls.stage.vidible.tv/v2/polls/"};
        var CHANNEL_PLACEHOLDER = "#CHANNEL";
        return{init:function(override, pid, preview) {
            this.setup(override, pid, preview);
        }, setup:function(override, pid, preview) {
            this.playerId = pid;
            this.preview = preview;
            this.secure = vdb.utils.StringUtils.startsWith(location.href, "https");
            var baseUrls = {};
            var defaultUrls = this.secure ? DEFAULT_URLS_SECURE : DEFAULT_URLS;
            for (var p in defaultUrls) {
                if (Object.prototype.hasOwnProperty.call(defaultUrls, p)) {
                    var url = override && override[p] || defaultUrls[p];
                    baseUrls[p] = vdb.utils.StringUtils.rtrim(url, "\\s/");
                }
            }
            this.baseUrls = baseUrls;
            this.CONFIG_BASE_URL = this.baseUrls["ds"];
            this.TRACKING_BASE_URL = this.preview ? "" : this.baseUrls["trk"];
            this.TRACKING_QOE_URL = this.preview ? "" : this.baseUrls["qoe"];
            this.TRACKING_LSTR_URL = this.preview ? "" : this.baseUrls["lstr"];
        }, setAdServerUrl:function(adsParams) {
            this.AD_SERVER_URL = this.getAdServerUrl("ads", adsParams);
        }, setVrmAdServerUrl:function(vrmParams) {
            this.AD_SERVER_VRM_URL = this.getAdServerUrl("vrm", vrmParams);
        }, getBaseUrls:function(type) {
            if (type) {
                return this.baseUrls[type];
            }
            return this.baseUrls;
        }, getExtraUrl:function(name) {
            return this.getCdnUrl("js/extras/%s.js".replace("%s", name));
        }, getPlacementUrl:function(isAol) {
            return isAol ? this.baseUrls["syn"] + "/handlers/videos/" : this.CONFIG_BASE_URL + "/placement/" + encodeURIComponent(this.playerId);
        }, getDSPreplayUrl:function(videoId, params) {
            return this.CONFIG_BASE_URL + "/preplay/" + this.getPreplayChannelPlaceholder() + videoId + "/" + params["bcid"] + ".json?" + vdb.Utils.serialize(params || {});
        }, getPreplayChannelPlaceholder:function() {
            return CHANNEL_PLACEHOLDER;
        }, getCdnUrl:function(relativePath) {
            return this.baseUrls["cdn"] + "/" + (relativePath || "");
        }, getPortalUrl:function(relativePath) {
            return this.baseUrls["ptv"] + "/" + (relativePath || "");
        }, getTrackingBaseUrl:function() {
            return this.TRACKING_BASE_URL;
        }, getAdServerVRMURL:function() {
            return this.AD_SERVER_VRM_URL;
        }, getAdServerUrlAds:function() {
            return this.AD_SERVER_URL;
        }, getRelatedUrl:function(videoId, pid, bcid) {
            return this.baseUrls["rel"] + "/" + videoId + "?pid=" + pid + "&bcid=" + bcid;
        }, isSecure:function() {
            return this.secure;
        }, getDemoUrl:function() {
            return this.getPortalUrl("#demo/" + this.playerId);
        }, getAdServerUrl:function(relativePath, parameters) {
            return this.baseUrls["ads"] + (relativePath ? "/" + relativePath : "") + (parameters ? "?" + vdb.Utils.serialize(parameters) : "");
        }, getAdTrackingUrl:function(relativePath, parameters) {
            return this.baseUrls["adt"] + (relativePath ? "/" + relativePath : "") + (parameters ? "?" + vdb.Utils.serialize(parameters) : "");
        }, getInlinePlayerUrl:function() {
            return this.baseUrls["imp"];
        }, getStripServiceUrl:function() {
            return this.baseUrls["strip"];
        }, getDirectVideoUrl:function() {
            return this.baseUrls["video"];
        }, getPollsBaseUrl:function() {
            return this.baseUrls["polls"];
        }};
    }());
    vdb.events.EventContextBindGroup = vdb.core.Class.extend(function() {
        var init = function(ctx1, ctx2, ctxn) {
            this._contexts = Array.prototype.slice.call(arguments, 0);
        };
        var merge = function(group) {
            var self = this;
            _forEachContext.call(group, function(ctx) {
                self.addContext(ctx);
            });
        };
        var unbind = function() {
            _forEachContext.call(this, _unbindContext);
        };
        var commit = function() {
            _forEachContext.call(this, _setThisGroup);
        };
        var addContext = function(ctx) {
            if (vdb.Utils.indexOf(this._contexts, ctx) == -1) {
                this._contexts.push(ctx);
            }
        };
        var addContexts = function(ctx1, ctx2, ctxn) {
            var i = 0;
            var contexts = Array.prototype.slice.call(arguments, 0);
            for (var len = contexts.length;i < len;i++) {
                this.addContext(contexts[i]);
            }
        };
        var _forEachContext = function(func) {
            var i = 0;
            for (var len = this._contexts.length;i < len;i++) {
                func.call(this, this._contexts[i]);
            }
        };
        var _unbindContext = function(ctx) {
            ctx._group = null;
            ctx.unbind();
        };
        var _setThisGroup = function(ctx) {
            ctx._group = this;
        };
        return{init:init, merge:merge, unbind:unbind, commit:commit, addContext:addContext, addContexts:addContexts};
    }());
    vdb.events.EventContext = {};
    (function(def) {
        var internalHandler = function() {
            if (this._singleEvent) {
                this.unbind();
            }
            if (this._eventHandler) {
                this._eventHandler.apply(window, arguments);
            }
        };
        def.EventContext = vdb.core.Class.extend(function() {
            var unbind = function() {
                if (this._group) {
                    this._group.unbind();
                } else {
                    if (typeof this._dispatcher.nodeType !== "undefined") {
                        vdb.events.removeEventListener(this._dispatcher, this._eventType, this._internalHandler);
                    } else {
                        this._dispatcher.removeEventListener(this._eventType, this._internalHandler, this._useCapture);
                    }
                }
            };
            var link = function() {
                var args = arguments || [];
                if (!arguments.length) {
                    return this;
                }
                if (!this._group) {
                    this._group = new vdb.events.EventContextBindGroup(this);
                }
                for (var i = 0;i < args.length;++i) {
                    var ctx = args[i];
                    if (ctx._group) {
                        this._group.merge(ctx._group);
                    } else {
                        this._group.addContext(ctx);
                    }
                }
                this._group.commit();
                return this;
            };
            return{unbind:unbind, link:link};
        }());
        def.EventContext.bind = function(dispatcher, eventType, eventHandler, useCapture, singleEvent) {
            useCapture = Boolean(useCapture);
            singleEvent = Boolean(singleEvent);
            var ctx = new def.EventContext;
            ctx._dispatcher = dispatcher;
            ctx._eventType = eventType;
            ctx._eventHandler = eventHandler;
            ctx._useCapture = useCapture;
            ctx._singleEvent = singleEvent;
            ctx._internalHandler = internalHandler.bind(ctx);
            if (typeof dispatcher.nodeType !== "undefined") {
                vdb.events.addEventListener(dispatcher, eventType, ctx._internalHandler);
            } else {
                dispatcher.addEventListener(eventType, ctx._internalHandler, useCapture);
            }
            return ctx;
        };
        def.EventContext.bindOnce = function(dispatcher, eventType, eventHandler, useCapture) {
            return def.EventContext.bind(dispatcher, eventType, eventHandler, useCapture, true);
        };
        def.EventContext.empty = function() {
            var ctx = new def.EventContext;
            ctx._dispatcher = new vdb.EventBus;
            ctx._eventType = "DOESN'T_MATTER";
            ctx._useCapture = true;
            ctx._singleEvent = true;
            return ctx;
        };
        def.EventContext.group = function(eventContexts) {
            var group = def.EventContext.empty();
            for (var i = 0;i < arguments.length;i++) {
                var arg = arguments[i];
                if (arg.length) {
                    var subGroup = def.EventContext.group.apply(null, arg);
                    group.link(subGroup);
                } else {
                    group.link(arg);
                }
            }
            return group;
        };
    })(vdb.events);
    vdb.ExternalEventsProxy = vdb.EventBus.extend(function() {
        var events = {};
        var PlayerEvent = vdb.constants.PlayerEvent;
        var setupEvents = function() {
            function setupEvent(eventName, params) {
                events[eventName] = {code:1 << counter++, specificParams:params};
            }
            var counter = 0;
            setupEvent(PlayerEvent.PLAYER_READY, []);
            setupEvent(PlayerEvent.VIDEO_DATA_LOADED, ["isFirstVideo"]);
            setupEvent(PlayerEvent.VIDEO_PLAY, ["isAd"]);
            setupEvent(PlayerEvent.VIDEO_PAUSE, ["isAd"]);
            counter++;
            counter++;
            setupEvent(PlayerEvent.VIDEO_TIMEUPDATE, ["playheadTime", "isPlayComplete", "adType", "isAd"]);
            setupEvent(PlayerEvent.VIDEO_START, []);
            setupEvent(PlayerEvent.AD_START, ["adType", "creativeId", "acid", "isInline", "url"]);
            setupEvent(PlayerEvent.AD_END, ["playheadTime", "adType", "url"]);
            setupEvent(PlayerEvent.VIDEO_END, ["playheadTime"]);
            setupEvent(PlayerEvent.CONTEXT_STARTED, ["isAd"]);
            setupEvent(PlayerEvent.CONTEXT_ENDED, ["failed"]);
            setupEvent(PlayerEvent.VIDEO_META, []);
            setupEvent(PlayerEvent.AD_META, ["adType", "acid"]);
            setupEvent(PlayerEvent.PLAYLIST_END, []);
            setupEvent(PlayerEvent.VIDEO_SELECTED, []);
            setupEvent(PlayerEvent.VIDEO_SEEKEND, ["playheadTime"]);
            setupEvent(PlayerEvent.VIDEO_VOLUME_CHANGED, ["isAd", "volume", "muted"]);
        };
        var getEventsData = function(event, player) {
            var paramsMap = function() {
                if (!player) {
                    return{};
                }
                var eventData = event.data || {};
                var eventType = event["type"];
                var _video = player.getCurrentVideo();
                var playerState = player.getPlayerState();
                var isAd = typeof eventData["isAd"] !== "undefined" ? eventData["isAd"] : player.isAd();
                var currentTime = eventData.currentTime || (isNaN(playerState["currentTime"]) ? 0 : playerState["currentTime"]);
                var totalTime = eventData.duration || (!isAd && _video && _video.metadata["duration"] / 1E3 || "");
                var map = function() {
                    var base = {};
                    base["eventCode"] = events[eventType] ? events[eventType]["code"] : "";
                    base["videoId"] = _video ? _video.id : eventData.id || "";
                    base["title"] = eventData.name || (_video ? _video.title || "" : "");
                    base["keywords"] = _video && _video.raw ? decodeURIComponent(_video.raw["keywords"] || "") : "";
                    base["duration"] = isAd ? player.getAdDuration() || totalTime : totalTime;
                    base["category"] = _video && _video.raw ? _video.raw["categoryName"] || _video.raw["catName"] || "" : "";
                    base["studio"] = _video && _video.raw ? _video.raw["studioName"] || "" : "";
                    base["playerType"] = player.getPlayerType();
                    var specific = {};
                    specific["acid"] = eventData.id || 0;
                    specific["overlayURL"] = eventData["overlayURL"] || "";
                    specific["isFirstVideo"] = player.getCurrentVideoIndex() === 0;
                    specific["playheadTime"] = currentTime || "";
                    specific["failed"] = eventData["failed"] || "";
                    specific["isPlayComplete"] = isAd ? false : currentTime >= totalTime;
                    specific["isAd"] = isAd;
                    specific["adType"] = eventData.type;
                    specific["isInline"] = !!eventData["isInline"];
                    specific["volume"] = eventData.volume || player.getVolume();
                    var creativeId = eventData["creativeId"];
                    if (creativeId !== undefined) {
                        specific["creativeId"] = creativeId;
                    }
                    return{base:base, specific:specific};
                }();
                return{getFor:function(type) {
                    var dataObj = map.base;
                    var specificParams = events[type] ? events[type].specificParams || [] : [];
                    for (var i = 0;i < specificParams.length;i++) {
                        dataObj[specificParams[i]] = map.specific[specificParams[i]];
                    }
                    return dataObj;
                }};
            }();
            return paramsMap.getFor(event["type"]);
        };
        var _getEventDataObject = function(event, data) {
            var e = {};
            if (!events[event]) {
                e = data;
            } else {
                e["type"] = data.type;
                e["data"] = getEventsData(data, this._player);
                e["player"] = this._playerAPI;
            }
            return e;
        };
        return{init:function(api) {
            this._super();
            this._player = api.adapter;
            this._playerAPI = api;
            setupEvents();
        }, dispatchEvent:function(event, data) {
            this._super(_getEventDataObject.call(this, event, data));
        }};
    }());
    vdb.eventProxyAdapter = {};
    vdb.EventProxyAdapter = vdb.core.Class.extend(function() {
        function addAdapterHandler(event, handler) {
            var _this = this;
            var setup = this.dispatchTable[event];
            if (!setup) {
                setup = {redispatcher:function(e) {
                    _this.dispatchEvent(event, {type:event, data:e.data});
                }, handlers:[]};
                this.dispatchTable[event] = setup;
                this.eventSource.addEventListener(event, setup.redispatcher);
            }
            setup.handlers.push(handler);
        }
        function removeAdapterHandler(event, handler) {
            var setup = this.dispatchTable[event];
            if (setup) {
                var handlers = setup.handlers.slice();
                for (var i = 0;i < handlers.length;i++) {
                    if (handlers[i] === handler) {
                        setup.handlers.splice(i, 1);
                    }
                }
                if (setup.handlers.length === 0) {
                    this.eventSource.removeEventListener(event, setup.redispatcher);
                    delete this.dispatchTable[event];
                }
            }
        }
        function bindUserAliasEvents(eventSource) {
            function createCallback(eventName) {
                return function(ae) {
                    this.dispatchEvent(eventName, {type:eventName, data:ae.data});
                };
            }
            var aliasMap = {};
            aliasMap[vdb.constants.PlayerEvent.VIDEO_PLAY] = [vdb.constants.PlayerEvent.AD_PLAY];
            aliasMap[vdb.constants.PlayerEvent.VIDEO_PAUSE] = [vdb.constants.PlayerEvent.AD_PAUSED];
            aliasMap[vdb.constants.PlayerEvent.VIDEO_TIMEUPDATE] = [vdb.constants.PlayerEvent.AD_TIMEUPDATE];
            aliasMap[vdb.constants.PlayerEvent.AD_WAITING] = [vdb.constants.PlayerEvent.AD_WAITING];
            aliasMap[vdb.constants.PlayerEvent.VIDEO_DATA_LOADED] = [vdb.constants.PlayerEvent.CONTENT_IMPRESSION];
            aliasMap[vdb.constants.PlayerEvent.VIDEO_VOLUME_CHANGED] = [vdb.constants.PlayerEvent.AD_VOLUME_CHANGED];
            for (var ev in aliasMap) {
                if (Object.prototype.hasOwnProperty.call(aliasMap, ev)) {
                    for (var i = 0;i < aliasMap[ev].length;i++) {
                        eventSource.addEventListener(aliasMap[ev][i], createCallback(ev).bind(this));
                    }
                }
            }
        }
        return{init:function(api) {
            this.eventSource = api.adapter || new vdb.EventBus;
            this.eventProxy = new vdb.ExternalEventsProxy(api);
            this.dispatchTable = {};
            bindUserAliasEvents.call(this, this.eventSource);
        }, addEventListener:function(event, handler) {
            this.eventProxy.addEventListener(event, handler);
            addAdapterHandler.call(this, event, handler);
        }, dispatchEvent:function(event, data) {
            this.eventProxy.dispatchEvent(event, data);
        }, removeEventListener:function(event, handler) {
            this.eventProxy.removeEventListener(event, handler);
            removeAdapterHandler.call(this, event, handler);
        }};
    }());
    vdb.extras.BaseExtra = vdb.EventBus.extend(function() {
        return{init:function(schemaName) {
            this._super();
            this._schemaName = schemaName || "empty";
        }, initExtra:function(config) {
            if (config["blocking"]) {
                this.unblockExtra();
            }
            this._region = vdb.utils.Region.parse(config["region"]);
        }, getSchema:function() {
            return "http://cdn.vidible.tv/dev/js/extras/schemas/" + this._schemaName + ".xml";
        }, unblockExtra:function() {
            var _this = this;
            setTimeout(function() {
                _this.dispatchEvent(new vdb.events.Event(vdb.events.PlayerModuleEvent.UNBLOCK));
            }, 0);
        }};
    }());
    vdb.extras.CoreExtra = vdb.extras.BaseExtra.extend(function() {
        return{};
    }());
    vdb.ioc.Injector = vdb.core.Class.extend(function() {
        function functionArgs(f) {
            var args = /\(((?:\s*\w*\s*,?)+)\)/g;
            var code = f.toString();
            args = args.exec(code);
            if (args) {
                args = args[1].replace(/\s+/g, "");
            }
            return args && args.split(",") || [];
        }
        function functionDependencies(f) {
            return f.$dependencies || functionArgs(f);
        }
        function resolveAll(dependencies) {
            var promises = [];
            var i = 0;
            for (var l = dependencies.length;i < l;i++) {
                var name = dependencies[i];
                promises.push(this.resolve(name));
            }
            return Promise.all(promises);
        }
        function init() {
            this._incubators = {};
            this._instances = {};
            this._enforceUniqueProviders = true;
            this.provideValue(vdb.ioc.Injector.NAME, this);
        }
        function provide(name, provider, isClass) {
            var dependencies = functionDependencies(provider);
            if (this._incubators[name]) {
                if (this._enforceUniqueProviders) {
                    throw new Error(name + " can't be provided twice");
                }
            } else {
                var options = {injector:this, dependencies:dependencies, provider:provider, name:name};
                this._incubators[name] = isClass ? new vdb.ioc.ClassIncubator(options) : new vdb.ioc.Incubator(options);
            }
            return this;
        }
        function provideValue(name, value) {
            if (!this._instances[name] || !this._enforceUniqueProviders) {
                this._instances[name] = value;
            }
            return provide.call(this, name, function() {
                return value;
            });
        }
        function provideClass(name, constructor) {
            return provide.call(this, name, constructor, true);
        }
        function createClass(constructor) {
            var options = {injector:this, dependencies:functionDependencies(constructor), provider:constructor};
            return(new vdb.ioc.ClassIncubator(options)).createObject();
        }
        function inject(receiver) {
            var dependencies;
            if (vdb.Utils.isArray(receiver)) {
                dependencies = receiver;
                receiver = dependencies.pop();
            } else {
                dependencies = functionDependencies(receiver);
            }
            return resolveAll.call(this, dependencies).then(function(instances) {
                return receiver.apply(null, instances);
            });
        }
        function isProvided(name) {
            return this._incubators[name] !== undefined;
        }
        function createChild() {
            return new vdb.ioc.ChildInjector(this);
        }
        function resolve(name) {
            var promise;
            var incubator = this._incubators[name];
            var factoryIncubator = this._incubators[name + "Factory"];
            if (incubator) {
                promise = incubator.createObject();
                if (!this._instances[name]) {
                    promise.then(function(value) {
                        this._instances[name] = value;
                    }.bind(this));
                }
            } else {
                if (factoryIncubator) {
                    promise = factoryIncubator.createObject().then(function(factory) {
                        return factory();
                    });
                } else {
                    promise = Promise.reject("no such dependency " + name);
                }
            }
            return Promise.race([promise, vdb.Utils.promiseTimeout(RESOLVE_TIMEOUT)["catch"](function() {
                throw new Error(name + " isn't resolved in " + RESOLVE_TIMEOUT + "ms");
            })]);
        }
        function resolveSync(name) {
            var instance = this._instances[name];
            if (!instance) {
                throw new Error("no instance created");
            }
            return instance;
        }
        function setOptions(options) {
            options = options || {};
            this._enforceUniqueProviders = typeof options.enforceUniqueProviders !== "undefined" ? options.enforceUniqueProviders : true;
        }
        var RESOLVE_TIMEOUT = 8E3;
        var Promise = vdb.Promise;
        return{init:init, provide:provide, provideValue:provideValue, provideClass:provideClass, createClass:createClass, inject:inject, createChild:createChild, isProvided:isProvided, resolve:resolve, resolveAll:resolveAll, resolveSync:resolveSync, setOptions:setOptions};
    }());
    vdb.ioc.ChildInjector = vdb.ioc.Injector.extend(function() {
        function resolve(name) {
            return this._super(name)["catch"](function(error) {
                var promise;
                if (/no such dependency/.exec(error)) {
                    promise = this._parent.resolve(name);
                } else {
                    throw error;
                }
                return promise;
            }.bind(this));
        }
        function init(parent) {
            this._super();
            this._parent = parent;
        }
        function isProvided(name) {
            return this._super(name) || this._parent.isProvided(name);
        }
        function resolveSync(name) {
            try {
                return this._super(name);
            } catch (e) {
                return this._parent.resolveSync(name);
            }
        }
        return{init:init, isProvided:isProvided, resolve:resolve, resolveSync:resolveSync};
    }());
    vdb.ioc.Injector.NAME = "injector";
    vdb.loader = {};
    vdb.loader.PlacementLoader = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("PlacementLoader");
        return{init:function(context) {
            this.context = context;
            this.bidModifier = this.context.getBidModifier();
            this.modifierQuery = this.bidModifier.getQuery();
            this._config = this.context.getInjector().resolveSync(vdb.enums.Dependencies.CONFIG);
        }, load:function() {
            if (typeof JSON !== "object") {
                vdb.Utils.injectScript(document, this.context.getCdnUrl("js/lib/json3.min.js"), function(loaded) {
                    if (loaded) {
                        this.load();
                    } else {
                        LOGGER.error("JSON isn't supported and ad hoc support code can't be loaded");
                    }
                }.bind(this));
                return;
            }
            var bidModifier = this.context.getBidModifier();
            var placement = this._config.getPlacement();
            if (placement && !bidModifier.hasModifications()) {
                this._onLoad(placement);
                return;
            }
            var url = this.context.getPlacementUrl();
            var parameters = this.context.getPlacementParameters();
            parameters["q"] = this.modifierQuery;
            parameters["bid"] = this.bidModifier.getBid();
            parameters["vid"] = this.bidModifier.getVideos().join(",");
            url += "?" + vdb.Utils.serialize(parameters);
            vdb.ajax.get(url, null, function(response) {
                var data;
                try {
                    data = response.data || JSON.parse(response.text);
                } catch (e) {
                }
                this._onLoad(data || {});
            }.bind(this), function(response) {
                LOGGER.error("Can't load config", "status", response.status);
            });
        }, _onLoad:function(placement) {
            var status = placement["status"];
            if (status["code"] === "GONE") {
                this.context.api.unavailable();
                return;
            }
            var bid = placement["bid"];
            if ((!bid["videos"] || bid["videos"].length === 0) && this.modifierQuery) {
                this.modifierQuery = null;
                this.load();
                return;
            }
            this._config.setBidId(bid["id"]);
            this._config.setPlacement(placement);
            this._config.setOverrideVideoId(bid["videoId"]);
            LOGGER.info("Placement loaded", placement);
            var adsParams = {};
            var vrmParams = {};
            adsParams["pid"] = this._config.getPlayerId();
            adsParams["bcid"] = this._config.getBuyerCompanyId();
            adsParams["bid"] = this._config.getBidId();
            vrmParams["pid"] = this._config.getPlayerId();
            vrmParams["bcid"] = this._config.getBuyerCompanyId();
            vrmParams["bid"] = this._config.getBidId();
            this.context.urls.setAdServerUrl(adsParams);
            this.context.urls.setVrmAdServerUrl(vrmParams);
            this.context.dispatchEvent(vdb.loader.PlacementLoader.LOADED, placement);
        }};
    }());
    (function(def) {
        def.LOADED = "PlacementLoadedEvent";
    })(vdb.loader.PlacementLoader);
    vdb.model = {};
    vdb.model.Config = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("Config");
        var MACRO_PREFIX = "m.";
        var SS_MACRO = MACRO_PREFIX + "ss";
        var REPORTING_MACRO_PREFIX = "rm.";
        var utl = vdb.Utils;
        var PlayerMacros = vdb.constants.PlayerMacros;
        var initParams = function() {
            LOGGER.debug("initParams");
            if (Object.prototype.hasOwnProperty.call(this._placement, "playerTemplate")) {
                this.coveringsSkinLocation = utl.safeCopy(this._placement["playerTemplate"]["coveringsSkinLocation"]);
            }
            this._uiTemplate = this._placement["playerTemplate"] || {};
            this._geo = this._placement["geo"] || {};
            var timestamp = this._placement["timestamp"] || 0;
            this._generateGUIDMethod = _getOption.call(this, "generateGUID") || function() {
                return(new vdb.utils.GUID(timestamp)).toString();
            };
            this._id = _getOption.call(this, "sid") || this._generateGUIDMethod();
            this._playerId = _getOption.call(this, "pid");
            this._preview = _getOption.call(this, "preview");
            this._playerType = _getOption.call(this, "pt");
            this._o2playerSettings = _getOption.call(this, "o2playerSettings") || window["o2playerSettings"] || {};
            this._buyerCompanyId = _getOption.call(this, "bcid");
            this._site = _getOption.call(this, "site");
            this._impressionTimestamp = _getOption.call(this, "it");
            this._videoCampaignIds = _collectVideoCampaignIds.call(this);
            this._autoplay = this._uiTemplate["initialization"] === "autoplay";
            this._autoplayInView = this._uiTemplate["autoplayInView"];
            this._ATPData = {};
            this._adParams = {};
            this._loggerParams = {};
            this._params = utl.deserialize(_getOption.call(this, "params"));
            this._adsDisabled = getMacro.call(this, PlayerMacros.DISABLEADS) === "1" || this._preview;
            this._loadTimeLimit = +getMacro.call(this, PlayerMacros.LOAD_TIME_LIMIT) * 1E3 || null;
            var midrollTimings = vdb.Utils.getValueOrDefault(this._placement, ["adSettings", "midrollTiming"], "");
            this._aggressiveMode = !!getMacro.call(this, PlayerMacros.AGGRESSIVE_AD_MODE) || midrollTimings === "-1";
            if (this._placement["playerWidget"]) {
                var playerWidgetUrl = this._placement["playerWidget"]["url"];
                this._flashVersion = vdb.Utils.findVersionInUrl(playerWidgetUrl);
            }
        };
        var getVideoCampaignIds = function() {
            return this._videoCampaignIds;
        };
        var _collectVideoCampaignIds = function() {
            var i;
            var video;
            var result = {};
            if (this._placement.bid && this._placement.bid.videos) {
                for (i = 0;i < this._placement.bid.videos.length;i++) {
                    video = this._placement.bid.videos[i];
                    if (video.vcid) {
                        result[video.videoId] = video.vcid;
                    }
                }
            }
            return result;
        };
        var getGenerateGuidMethod = function() {
            return this._generateGUIDMethod;
        };
        var getId = function() {
            return this._id;
        };
        var getBidId = function() {
            return this._bidId;
        };
        var setBidId = function(bidId) {
            this._bidId = bidId;
        };
        var getO2playerSettings = function() {
            return this._o2playerSettings;
        };
        var setO2playerSetting = function(key, value) {
            if (this._o2playerSettings) {
                this._o2playerSettings[key] = value;
            }
        };
        var getBuyerCompanyId = function() {
            return this._buyerCompanyId;
        };
        var getOverrideVideoId = function() {
            return this._overrideVideoId;
        };
        var setOverrideVideoId = function(overrideVideoId) {
            this._overrideVideoId = overrideVideoId;
        };
        var getPlayerId = function() {
            return this._playerId;
        };
        var getPlayerType = function() {
            return this._playerType;
        };
        var setPlayerType = function(type) {
            this._playerType = type;
            this._params["pt"] = type;
        };
        var getPreview = function() {
            return this._preview;
        };
        var getSite = function() {
            return this._site;
        };
        var getImpressionTimestamp = function() {
            return this._impressionTimestamp;
        };
        var getAdParams = function() {
            return this._adParams;
        };
        var setATPData = function(ATPData) {
            this._ATPData = ATPData;
        };
        var getATPData = function() {
            return this._ATPData;
        };
        var isAdsDisabled = function() {
            return this._adsDisabled;
        };
        var getParameters = function() {
            var allParams = {};
            utl.copy(getBasicParameters.call(this), allParams);
            utl.copy(this._params, allParams);
            return allParams;
        };
        var getBasicParameters = function() {
            return{"bid":this._bidId, "pid":this._playerId, "bcid":this._buyerCompanyId, "sid":this._id, "s":utl.isPageSecure() ? "true" : undefined, "pv":vdb.version(), "r":getReferrer.call(this), "vvuid":this._loggerParams["vvuid"], "pt":this._playerType};
        };
        var updateAdParams = function(params) {
            for (var i in params) {
                if (Object.prototype.hasOwnProperty.call(params, i)) {
                    this._adParams[i] = params[i];
                }
            }
        };
        var getMacro = function(macro) {
            var macroLower = typeof macro === "string" ? macro.toLowerCase() : macro;
            return this.getAllMacros(true)[MACRO_PREFIX + macroLower];
        };
        var setParam = function(key, value) {
            this._params[key] = value;
            this.resetReportingMacros();
            this.resetMacros();
        };
        var getAllMacros = function(ignoreCase) {
            if (!this._macros) {
                this._macros = utl.filterByPrefix(this._params, MACRO_PREFIX, {toLower:false});
            }
            if (!this._macros[SS_MACRO]) {
                var channel = utl.getS265Channel();
                if (channel) {
                    this._macros[SS_MACRO] = channel;
                }
            }
            if (ignoreCase) {
                return utl.filterByPrefix(this._macros, MACRO_PREFIX, {toLower:true});
            }
            return this._macros;
        };
        var getReportingMacros = function() {
            if (!this._reportingMacros) {
                this._reportingMacros = utl.filterByPrefix(this._params, REPORTING_MACRO_PREFIX, {modify:true});
            }
            return this._reportingMacros;
        };
        var resetReportingMacros = function() {
            this._reportingMacros = undefined;
        };
        var resetMacros = function() {
            this._macros = undefined;
        };
        var addLoggerParams = function(obj) {
            utl.copy(obj, this._loggerParams);
        };
        var getLoggerParams = function() {
            return this._loggerParams;
        };
        var getOverrider = function(overrider) {
            return this._o2playerSettings[overrider] || {};
        };
        var getParams = function() {
            return this._params || {};
        };
        var getParam = function(key) {
            return this._params && this._params[key];
        };
        var getPlacement = function() {
            return this._placement;
        };
        var setPlacement = function(placement) {
            this._placement = placement;
        };
        var getReferrer = function() {
            var referrer = this._site;
            referrer = referrer ? decodeURIComponent(referrer) : "";
            if (!referrer) {
                referrer = vdb.utils.WindowUtil.getTopMostLocation(window);
            }
            return referrer;
        };
        var playsNativeInline = function() {
            if (typeof this._playsNativeInlineCache !== "undefined") {
                return this._playsNativeInlineCache;
            }
            var result;
            if (utl.browser.playsNativeInline()) {
                result = utl.browser.isMobile() && this._uiTemplate["mobileAutoplayWifiOnly"] ? this._geo["connSpeed"] !== "mobile" : true;
            } else {
                result = false;
            }
            this._playsNativeInlineCache = result;
            return result;
        };
        var _getOption = function(name) {
            return name ? this._options[name] : undefined;
        };
        var getFlashVersion = function() {
            return this._flashVersion;
        };
        var getTrackingEnabled = function() {
            return!this._preview;
        };
        var getSkinId = function() {
            return this._placement && this._placement["playerTemplate"] ? this._placement["playerTemplate"]["csid"] : null;
        };
        var getSact = function() {
            return null;
        };
        var getGeo = function() {
            return this._geo;
        };
        var isAutoplay = function() {
            return this._autoplay || this._autoplayInView > 0;
        };
        var isTBV = function() {
            return false;
        };
        return{init:function(options, placement) {
            LOGGER.debug("init");
            this._options = options || {};
            this._placement = placement || {};
            initParams.call(this);
        }, getId:getId, getBidId:getBidId, setBidId:setBidId, getPlacement:getPlacement, setPlacement:setPlacement, getPlayerId:getPlayerId, getPlayerType:getPlayerType, setPlayerType:setPlayerType, getPreview:getPreview, getSite:getSite, getImpressionTimestamp:getImpressionTimestamp, getBuyerCompanyId:getBuyerCompanyId, getOverrideVideoId:getOverrideVideoId, setOverrideVideoId:setOverrideVideoId, getAdParams:getAdParams, getATPData:getATPData, getVideoCampaignIds:getVideoCampaignIds, setATPData:setATPData,
            isAdsDisabled:isAdsDisabled, getParameters:getParameters, getBasicParameters:getBasicParameters, updateAdParams:updateAdParams, getMacro:getMacro, setParam:setParam, getAllMacros:getAllMacros, getReportingMacros:getReportingMacros, resetReportingMacros:resetReportingMacros, resetMacros:resetMacros, addLoggerParams:addLoggerParams, getLoggerParams:getLoggerParams, getOverrider:getOverrider, getParams:getParams, getParam:getParam, getReferrer:getReferrer, playsNativeInline:playsNativeInline, getGenerateGuidMethod:getGenerateGuidMethod,
            getO2playerSettings:getO2playerSettings, setO2playerSetting:setO2playerSetting, getFlashVersion:getFlashVersion, getTrackingEnabled:getTrackingEnabled, getSkinId:getSkinId, getSact:getSact, getGeo:getGeo, isAutoplay:isAutoplay, getLoadTimeLimit:function() {
                return this._loadTimeLimit;
            }, isTBV:isTBV, useMidrollWorkaround:function(value) {
                this._midrollWorkaroundNeeded = value;
            }, getMidrollWorkaround:function() {
                return this._midrollWorkaroundNeeded;
            }, isAggressiveMode:function() {
                return this._aggressiveMode;
            }};
    }());
    vdb.modules = {};
    vdb.modules.ExtrasPool = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("ExtrasPool");
        var STATE = {LOADING:"loading", LOADED:"loaded", FAILED:"failed"};
        return{init:function() {
            this._pool = {};
            this._registerQueue = [];
        }, _onScriptLoaded:function(url, status) {
            if (status) {
                var registeringElement = this._registerQueue.shift();
                if (registeringElement) {
                    this._pool[url].state = STATE.LOADED;
                    this._pool[url].extra = registeringElement.extra;
                    this._pool[url].dependencies = registeringElement.dependencies;
                } else {
                    status = false;
                }
            }
            if (!status) {
                this._pool[url].state = STATE.FAILED;
            }
            var listeners = this._pool[url].listeners;
            LOGGER.debug("there are", listeners.length, "listeners in the pool");
            for (var i = 0;i < listeners.length;i++) {
                listeners[i](status);
            }
        }, _add:function(url) {
            this._pool[url] = {extra:null, state:STATE.LOADING, listeners:[]};
        }, _get:function(url) {
            return this._pool[url] || null;
        }, _has:function(url) {
            return this._pool.hasOwnProperty(url);
        }, _isLoading:function(url) {
            return this._has(url) && this._pool[url].state === STATE.LOADING;
        }, _isLoaded:function(url) {
            return this._has(url) && this._pool[url].state === STATE.LOADED;
        }, _isFailed:function(url) {
            return this._has(url) && this._pool[url].state === STATE.FAILED;
        }, registerExtra:function(constructor, dependencies) {
            LOGGER.debug("Register extra", constructor);
            this._registerQueue.push({extra:constructor, dependencies:dependencies});
        }, loadBundledExtra:function(url, doc) {
            var bundledExtras = doc["bundledExtras"];
            var fileNameRegExp = /(\w+)\.js/;
            var fileName = fileNameRegExp.exec(url);
            fileName = fileName && fileName[1];
            if (fileName && bundledExtras && bundledExtras.hasOwnProperty(fileName)) {
                bundledExtras[fileName]();
                return true;
            }
            return false;
        }, loadExtra:function(url, doc, onLoaded) {
            var loadedFromBundle = this.loadBundledExtra(url, doc);
            if (loadedFromBundle) {
                LOGGER.debug("script has been loaded from bundledExtras: ", url);
                onLoaded(true);
            } else {
                vdb.Utils.injectScript(doc, url, function(status) {
                    LOGGER.debug("script has been loaded: ", url);
                    onLoaded(status);
                });
            }
        }, receiveCore:function(url, callback) {
            LOGGER.debug("receive", url);
            var self = this;
            if (this._isLoaded(url) || this._isFailed(url)) {
                setTimeout(function() {
                    callback(self._pool[url].state == STATE.LOADED);
                }, 0);
            } else {
                if (!this._has(url)) {
                    this._add(url);
                    setTimeout(function() {
                        self.loadExtra(url, document, function(status) {
                            self._onScriptLoaded(url, status);
                        });
                    }, 0);
                }
                this._pool[url].listeners.push(callback);
                LOGGER.debug("listener has been added", url);
            }
        }, receiveNonCore:function(doc, url, callback) {
            var self = this;
            this.loadExtra(url, doc, function(status) {
                callback(status);
                self._registerQueue.shift();
            });
        }, getRegisteringExtra:function(url) {
            LOGGER.debug("getRegisteringExtra", url || "not core");
            if (url) {
                var item = this._get(url);
                return item && item.extra ? new item.extra : null;
            }
            var registeringExtra = this._registerQueue[0] && this._registerQueue[0].extra;
            return registeringExtra ? new registeringExtra : null;
        }, getRegisteringExtraDependencies:function(url) {
            if (url) {
                var item = this._get(url);
                return item && item.dependencies ? item.dependencies : null;
            }
            return this._registerQueue[0] && this._registerQueue[0].dependencies;
        }};
    }());
    vdb.define(function(ctx, context) {
        vdb.getExtrasPool();
        ctx["registerExtra"] = vdb["registerExtra"];
    });
    vdb.modules.ExtraManager = vdb.EventBus.extend(function() {
        var EXTRA_STATE = {LOADING:"loading", LOADED:"loaded", FAILED:"failed"};
        var _loadExtra = function(index) {
            var extraConfig = this._extraConfigs[index];
            var url = extraConfig["url"] + "?cb=" + vdb.ver();
            var self = this;
            var onInjected = function(success) {
                if (success) {
                    self._extras[index] = self._extrasPool.getRegisteringExtra(_isCoreExtra(extraConfig) ? url : null);
                    self._extraDependencies[index] = self._extrasPool.getRegisteringExtraDependencies(_isCoreExtra(extraConfig) ? url : null);
                    if (extraConfig["extraId"]) {
                        self._loadedExtras.push(extraConfig["url"]);
                    }
                    self.LOGGER.info("Extra loaded and registered", url, extraConfig);
                    extraConfig._state = EXTRA_STATE.LOADED;
                    if (self._initExtrasCalled) {
                        _initExtra.call(self, index);
                    }
                } else {
                    self.LOGGER.warn("Failed to load extra script", url);
                    extraConfig._state = EXTRA_STATE.FAILED;
                }
                if (_areBlockingExtrasLoaded.call(self)) {
                    _onBlockingExtrasLoaded.call(self);
                }
            };
            if (_isCoreExtra(extraConfig)) {
                this._extrasPool.receiveCore(url, onInjected);
            } else {
                this._extrasPool.receiveNonCore(this._document, url, onInjected);
            }
        };
        var _isCoreExtra = function(config) {
            return typeof config["urls"] !== "undefined" && typeof config["urls"]["CORE"] !== "undefined" && config["urls"]["CORE"] === config["url"];
        };
        var _onBlockingExtrasLoaded = function() {
            if (!this._blockingExtrasLoaded) {
                this.LOGGER.debug("All blocking extras loaded");
                this._blockingExtrasLoaded = true;
                this.dispatchEvent(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_LOADED);
                var blockingExtras = _getLoadedBlockingExtras.call(this);
                _initUnblockPool.call(this, blockingExtras);
            }
        };
        var _areBlockingExtrasLoaded = function() {
            for (var i = 0;i < this._extraConfigs.length;i++) {
                var config = this._extraConfigs[i];
                if (config["blocking"] && config._state == EXTRA_STATE.LOADING) {
                    return false;
                }
            }
            return true;
        };
        var _initExtra = function(index) {
            var extra = this._extras[index];
            var config = this._extraConfigs[index];
            var dependencies = this._extraDependencies[index];
            this.LOGGER.info("Init extra", {"extra":extra, "config":config});
            if (!extra) {
                this.LOGGER.error("Failed to init extra with config", config);
                config._state = EXTRA_STATE.FAILED;
                return;
            }
            if (!extra.Initialized || extra.reInitializable) {
                try {
                    var args = [config];
                    args.push.apply(args, this._params);
                    args.push(dependencies);
                    extra.initExtra.apply(extra, args);
                    extra.Initialized = true;
                } catch (e) {
                    this.LOGGER.error("Failed to init extra with config", config, e);
                    config._state = EXTRA_STATE.FAILED;
                }
            }
        };
        var _initUnblockPool = function(blockingExtras) {
            this.LOGGER.debug("init Unblock Pool", blockingExtras);
            this._unblockPool = new vdb.events.ReleaseOnEventPool(blockingExtras, vdb.events.PlayerModuleEvent.UNBLOCK);
            this._unblockPool.addEventListener(vdb.Pool.Event.RELEASED_ALL, _onBlockingExtrasReleased.bind(this));
        };
        var _onBlockingExtrasReleased = function() {
            if (!this._blockingExtrasReleased) {
                this.LOGGER.debug("All blocking extras released");
                this._blockingExtrasReleased = true;
                this.dispatchEvent(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_RELEASED);
            }
        };
        var setInitialState = function() {
            for (var i = 0;i < this._extraConfigs.length;i++) {
                this._extraConfigs[i]._state = EXTRA_STATE.LOADING;
            }
        };
        var removeAlreadyLoadedExtras = function() {
            for (var i = 0;i < this._extraConfigs.length;i++) {
                for (var j = 0;j < this._loadedExtras.length;j++) {
                    if (this._loadedExtras[j] == (this._extraConfigs[i] && this._extraConfigs[i].url)) {
                        this._extraConfigs.splice(i, 1);
                    }
                }
            }
        };
        var _loadExtras = function(callback) {
            setInitialState.call(this);
            removeAlreadyLoadedExtras.call(this);
            for (var i = 0;i < this._extraConfigs.length;i++) {
                _loadExtra.call(this, i);
            }
            if (this._selfInit) {
                vdb.events.EventContext.bindOnce(this, vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_LOADED, function() {
                    this.initExtras(this._ctx);
                }.bind(this));
                vdb.events.EventContext.bindOnce(this, vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_RELEASED, function() {
                    if (callback) {
                        callback();
                    }
                });
            }
            if (_areBlockingExtrasLoaded.call(this)) {
                _onBlockingExtrasLoaded.call(this);
            }
        };
        var _getLoadedBlockingExtras = function() {
            var blocking = [];
            for (var i = 0;i < this._extras.length;i++) {
                var extra = this._extras[i];
                var config = this._extraConfigs[i];
                if (config && config["blocking"] && config._state == EXTRA_STATE.LOADED) {
                    blocking.push(extra);
                }
            }
            return blocking;
        };
        return{init:function(name, doc, ctx, context, selfInit) {
            this._super();
            this._extras = [];
            this._extraConfigs = [];
            this._extraDependencies = [];
            this._loadedExtras = [];
            this._initExtrasCalled = false;
            this._blockingExtrasLoaded = false;
            this._blockingExtrasReleased = false;
            this._name = name;
            this._document = doc;
            this._ctx = ctx;
            this._context = context;
            this._selfInit = selfInit;
            this.LOGGER = vdb.log.getLogger("ExtraManager[" + name + "]");
            this._extrasPool = vdb.getExtrasPool();
        }, loadExtras:function(extraConfigs, callback) {
            this._extraConfigs = extraConfigs || [];
            for (var i = 0;i < this._extraConfigs.length;i++) {
                if (typeof this._extraConfigs[i] === "string") {
                    this._extraConfigs[i] = this._context.getExtraConfig(this._extraConfigs[i], true);
                }
            }
            _loadExtras.call(this, callback);
        }, addEventListener:function(eventName, func) {
            this._super(eventName, func);
            if (eventName == vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_LOADED && this._blockingExtrasLoaded) {
                this._notifyListener(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_LOADED, [], func);
            } else {
                if (eventName == vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_RELEASED && this._blockingExtrasReleased) {
                    this._notifyListener(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_RELEASED, [], func);
                }
            }
        }, resetState:function() {
            this._blockingExtrasLoaded = false;
            this._blockingExtrasReleased = false;
        }, initExtras:function(params) {
            this.LOGGER.debug("Init extras");
            this._params = Array.prototype.slice.call(arguments);
            for (var i = 0;i < this._extras.length;i++) {
                var config = this._extraConfigs[i];
                if (config && config._state == EXTRA_STATE.LOADED) {
                    _initExtra.call(this, i);
                } else {
                    this.LOGGER.info("Did not call init extra (not loaded yet) for - ", {"extra":config});
                }
            }
            this._initExtrasCalled = true;
        }};
    }());
    vdb.Pool = vdb.EventBus.extend(function() {
        function _warnUnableToRelease(entry, reason) {
            this._logger.warn("Unable to release", entry, "(Reason: " + reason + ")");
        }
        var _register = function(entries) {
            if (!entries) {
                return;
            }
            this._entries = entries.concat();
            this._logger.debug("Register", this._entries);
            var stmp = (new Date).getTime();
            for (var i = 0;i < this._entries.length;i++) {
                if (this._entries[i]) {
                    this._entries[i]._poolKey = stmp + "_" + i;
                }
            }
        };
        return{init:function(entries, loggerName) {
            this._super();
            this._logger = vdb.log.getLogger(loggerName || "Pool");
            this._released = false;
            _register.call(this, entries);
        }, getEntries:function() {
            return this._entries || [];
        }, size:function() {
            return this._entries.length;
        }, isEmpty:function() {
            return this.size() === 0;
        }, addEventListener:function(eventName, func) {
            this._super(eventName, func);
            if (eventName === vdb.Pool.Event.RELEASED_ALL && this.isEmpty()) {
                this._notifyListener(eventName, [this], func);
            }
        }, release:function(entry) {
            if (!entry) {
                _warnUnableToRelease.call(this, entry, "invalid entry value");
                return;
            }
            if (!entry._poolKey) {
                _warnUnableToRelease.call(this, entry, "entry w/o pool key");
                return;
            }
            for (var i = 0;i < this._entries.length;i++) {
                var storedEntry = this._entries[i];
                if (storedEntry._poolKey === entry._poolKey) {
                    var released = this._entries.splice(i, 1);
                    this._logger.debug("Released", released, "pool", this._entries);
                    if (this.isEmpty()) {
                        this.dispatchEvent(vdb.Pool.Event.RELEASED_ALL, this);
                    }
                    return;
                }
            }
            _warnUnableToRelease.call(this, entry, "not found");
        }};
    }());
    vdb.Pool.Event = {RELEASED_ALL:"Pool.Released.All"};
    vdb.events.ReleaseOnEventPool = vdb.Pool.extend(function() {
        var _attachEventListeners = function() {
            var self = this;
            var entries = this.getEntries();
            for (var i = 0;i < entries.length;i++) {
                (function(entry) {
                    vdb.events.EventContext.bindOnce(entry, self._eventType, function() {
                        self.release(entry);
                    });
                })(entries[i]);
            }
        };
        return{init:function(entries, eventType) {
            this._super(entries, "ReleaseOnEventPool_" + eventType);
            this._eventType = eventType;
            _attachEventListeners.call(this);
        }};
    }());
    vdb.reporting.moat.BaseTracker = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("vdb.reporting.moat.BaseTracker");
        var DEBUG_MODE = vdb.utils.UrlUtils.getParameterByName("moatdebug") !== "";
        var NO_VIDEO_URL = "no-video";
        var MoatEvent = vdb.reporting.moat.MoatEvent;
        var _onVolumeChange = function() {
            this.trackMoat(MoatEvent.AD_VOLUME_CHANGE);
        };
        var _onEnd = function() {
            this.trackMoat(MoatEvent.AD_VIDEO_COMPLETE);
            this.deleteMoatApi();
        };
        var _onPaused = function() {
            this._isPaused = true;
            this.trackMoat(MoatEvent.AD_PAUSED);
        };
        var _onPlay = function() {
            if (this._isPaused) {
                this._isPaused = false;
                this.trackMoat(MoatEvent.AD_PLAYING);
            }
        };
        var _sendQuartile = function(stage) {
            var event = MoatEvent.QUARTILE_EVENT_MAPPING[stage];
            if (event) {
                this.trackMoat(event);
            }
        };
        return{init:function(partnerCode, getIds, dispatcher, startEvent, container, environment) {
            LOGGER.debug("Init Moat tracking");
            this._environment = environment;
            this._dispatcher = dispatcher;
            this._partnerCode = partnerCode;
            this._container = container;
            this.getIds = getIds;
            if (startEvent) {
                this.startEventContext = vdb.events.EventContext.bind(this._dispatcher, startEvent, this.createNewMoatAPIInstance.bind(this));
            }
        }, createNewMoatAPIInstance:function(event) {
            LOGGER.debug("Creating new Moat API instance");
            this.deleteMoatApi();
            this._eventContext = vdb.events.EventContext.empty();
            this._moatFuture = new vdb.Future;
            var duration = isFinite(event["data"]["duration"]) ? event["data"]["duration"] : -1;
            var video = this._environment.getCurrentVideo();
            var videoUrl = video && video.videoUrls && video.videoUrls[0];
            var ids = this.getIds(video, event);
            if (DEBUG_MODE) {
                LOGGER.warn("MOAT: ", ids);
            }
            this.createMoatApi(ids, duration, videoUrl);
            this.initMoatTracking();
            this._bindTrackers();
            this.trackMoat(MoatEvent.AD_IMPRESSION);
            this.trackMoat(MoatEvent.AD_VIDEO_START);
        }, createMoatApi:function(ids, duration, videoUrl) {
            this._moatApiName = "_moatApi" + Math.floor(Math.random() * 1E8);
            this._moatApi = {"adData":{"ids":ids, "duration":duration || 0, "url":videoUrl || NO_VIDEO_URL}, "dispatchEvent":function(ev) {
                this["sendEvent"](ev);
            }};
            var doc = this._container.ownerDocument;
            this._win = doc.defaultView || doc.parentWindow;
            this._win[this._moatApiName] = this._moatApi;
        }, initMoatTracking:function() {
            var windowProtocol = window.location.protocol;
            var protocol = windowProtocol.indexOf("http") === 0 ? windowProtocol : "https:";
            var sub = protocol === "https:" ? "z" : "js";
            var url = protocol + "//" + sub + ".moatads.com/" + this._partnerCode + "/moatvideo.js#" + this._moatApiName;
            this._moatScript = document.createElement("script");
            this._moatScript.type = "text/javascript";
            this._container.insertBefore(this._moatScript, this._container.childNodes[0] || null);
            this._moatScript.src = url;
            this._moatScript.onload = this._moatFuture.resolve;
        }, trackMoat:function(type) {
            var moatEvent = {"type":type, "adVolume":this._environment.getVolume()};
            if (DEBUG_MODE) {
                LOGGER.warn("MOAT:", this._partnerCode, moatEvent);
            }
            this._moatFuture.getPromise().then(this._moatApi["dispatchEvent"].bind(this._moatApi, moatEvent));
        }, deleteMoatApi:function() {
            if (this._singleRun) {
                if (this.startEventContext) {
                    this.startEventContext.unbind();
                }
                this.startEventContext = null;
            }
            if (this._moatApiName) {
                try {
                    delete this._win[this._moatApiName];
                } catch (e) {
                    this._win[this._moatApiName] = undefined;
                }
            }
            if (this._moatScript && this._moatScript.parentNode) {
                this._moatScript.parentNode.removeChild(this._moatScript);
            }
            if (this._eventContext) {
                this._eventContext.unbind();
            }
            this._moatApiName = undefined;
            this._moatScript = undefined;
        }, singleRun:function(singleRun) {
            this._singleRun = singleRun;
        }, _bindTrackers:function() {
            this._isPaused = false;
        }, _onVolumeChange:_onVolumeChange, _onEnd:_onEnd, _onPaused:_onPaused, _onPlay:_onPlay, _sendQuartile:_sendQuartile};
    }());
    vdb.reporting.moat.AdTracker = vdb.reporting.moat.BaseTracker.extend(function() {
        var PlayerEvent = vdb.constants.PlayerEvent;
        var EventContext = vdb.events.EventContext;
        var onVideoVolumeChange = function() {
            if (this._adapter.isAd()) {
                this._onVolumeChange();
            }
        };
        var _onAdQuartile = function(e) {
            var stage = e["data"]["adStage"];
            this._sendQuartile(stage);
        };
        var _bindTrackers = function() {
            this._super();
            this._isPaused = false;
            EventContext.bind(this._adapter, PlayerEvent.VIDEO_VOLUME_CHANGED, onVideoVolumeChange.bind(this)).link(this._eventContext);
            EventContext.bind(this._adapter, PlayerEvent.AD_VOLUME_CHANGED, this._onVolumeChange.bind(this)).link(this._eventContext);
            EventContext.bind(this._adapter, PlayerEvent.AD_END, this._onEnd.bind(this)).link(this._eventContext);
            EventContext.bind(this._adapter, PlayerEvent.AD_PAUSED, this._onPaused.bind(this)).link(this._eventContext);
            EventContext.bind(this._adapter, PlayerEvent.AD_PLAY, this._onPlay.bind(this)).link(this._eventContext);
            EventContext.bind(this._adapter, PlayerEvent.AD_QUARTILE, _onAdQuartile.bind(this)).link(this._eventContext);
        };
        return{init:function(context, partnerCode, getIds) {
            this._context = context;
            this._adapter = context.api.adapter;
            var container = this._adapter.getContainer();
            var environment = context.getInjector().resolveSync(vdb.enums.Dependencies.ENVIRONMENT);
            this._super(partnerCode, getIds, this._adapter, PlayerEvent.AD_START, container, environment);
        }, _bindTrackers:_bindTrackers};
    }());
    vdb.reporting.moat.VideoTracker = vdb.reporting.moat.BaseTracker.extend(function() {
        var PlayerEvent = vdb.constants.PlayerEvent;
        var EventContext = vdb.events.EventContext;
        var _onContentQuartile = function(e) {
            var stage = "q" + e["data"]["quartile"];
            this._sendQuartile(stage);
        };
        return{init:function(context, partnerCode, getIds) {
            this._context = context;
            this._adapter = context.api.adapter;
            var container = this._adapter.getContainer();
            var environment = context.getInjector().resolveSync(vdb.enums.Dependencies.ENVIRONMENT);
            this._super(partnerCode, getIds, this._adapter, PlayerEvent.VIDEO_START, container, environment);
        }, _bindTrackers:function() {
            this._super();
            EventContext.bind(this._adapter, PlayerEvent.VIDEO_VOLUME_CHANGED, this._onVolumeChange.bind(this)).link(this._eventContext);
            EventContext.bind(this._adapter, PlayerEvent.VIDEO_END, this._onEnd.bind(this)).link(this._eventContext);
            EventContext.bind(this._adapter, PlayerEvent.VIDEO_PAUSE, this._onPaused.bind(this)).link(this._eventContext);
            EventContext.bind(this._adapter, PlayerEvent.VIDEO_PLAY, this._onPlay.bind(this)).link(this._eventContext);
            EventContext.bind(this._context.playerAPI, PlayerEvent.CONTENT_QUARTILE, _onContentQuartile.bind(this)).link(this._eventContext);
        }, _onVolumeChange:function() {
            if (!this._adapter.isAd()) {
                this._super();
            }
        }};
    }());
    vdb.reporting.viewability = {};
    vdb.reporting.viewability.ReportingBase = vdb.core.Class.extend(function() {
        var onContextIntent = function() {
            var video = this.environment.getCurrentVideo() || {};
            this.videoId = video.id || video.aolId;
        };
        var resetCounters = function() {
            this.isSeeking = false;
            this.adData = null;
            this.resetStopwatch();
            this.resetCounters();
        };
        var onAdStart = function(e) {
            resetCounters.call(this);
            this.adData = e.data;
            this.onAdStart();
        };
        var onVideoTimeUpdate = function(e) {
            if (!this.isSeeking) {
                this.onVideoTimeUpdate(e);
            }
        };
        var onVideoSeekStart = function() {
            this.isSeeking = true;
            this.resetStopwatch();
        };
        var onVideoSeekEnd = function() {
            this.isSeeking = false;
        };
        var bindEvents = function() {
            var resetStopwatch = this.resetStopwatch.bind(this);
            var EventContext = vdb.events.EventContext;
            var EnvironmentEvent = vdb.events.EnvironmentEvent;
            this._eventContext = EventContext.group(EventContext.bind(this.environment, EnvironmentEvent.AD_START, onAdStart.bind(this)), EventContext.bind(this.environment, EnvironmentEvent.AD_TIMEUPDATE, this.onAdTimeUpdate.bind(this)), EventContext.bind(this.environment, EnvironmentEvent.AD_PAUSED, resetStopwatch), EventContext.bind(this.environment, EnvironmentEvent.AD_WAITING, resetStopwatch), EventContext.bind(this.environment, EnvironmentEvent.AD_END, this.onAdEnd.bind(this)), EventContext.bind(this.environment,
                EnvironmentEvent.AD_BLOCKER_COMPLETE, this.onAdBlockerComplete.bind(this)), EventContext.bind(this.environment, EnvironmentEvent.CONTEXT_INTENT, onContextIntent.bind(this)), EventContext.bind(this.environment, EnvironmentEvent.VIDEO_START, resetCounters.bind(this)), EventContext.bind(this.environment, EnvironmentEvent.VIDEO_TIMEUPDATE, onVideoTimeUpdate.bind(this)), EventContext.bind(this.environment, EnvironmentEvent.VIDEO_SEEKSTART, onVideoSeekStart.bind(this)), EventContext.bind(this.environment,
                EnvironmentEvent.VIDEO_SEEKEND, onVideoSeekEnd.bind(this)), EventContext.bind(this.environment, EnvironmentEvent.VIDEO_PAUSE, resetStopwatch), EventContext.bind(this.environment, EnvironmentEvent.VIDEO_WAITING, resetStopwatch));
        };
        var unbind = function() {
            this._eventContext.unbind();
        };
        return{init:function(config, environment, tracker, viewability, eventBus) {
            this._viewability = viewability;
            this.config = config;
            this.environment = environment;
            this.tracker = tracker;
            this.eventBus = eventBus;
            this.isSeeking = false;
            this.stopwatch = 0;
            this.adData = null;
            bindEvents.call(this);
        }, getVisiblePercent:function() {
            return this._viewability.getVisiblePercent();
        }, resetStopwatch:function() {
            this.stopwatch = 0;
        }, onAdStart:function() {
        }, onAdTimeUpdate:function() {
        }, onAdEnd:function() {
        }, onAdBlockerComplete:function() {
        }, onVideoTimeUpdate:function() {
        }, resetCounters:function() {
        }, unbind:unbind};
    }());
    vdb.reporting.viewability.Iab = vdb.reporting.viewability.ReportingBase.extend(function() {
        return{PERCENT_VIEWABLE_REQUIREMENT:50, DURATION_REQUIREMENT_IN_SECS:2, init:function(config, environment, tracker, viewability) {
            this.secondsWatched = 0;
            this.secondsNotWatched = 0;
            this._super(config, environment, tracker, viewability);
            this.callbacksFuture = new vdb.Future;
            this.callbacksPromise = this.callbacksFuture.getPromise();
        }, setCallbacks:function(startCallback, successCallback, failCallback) {
            this.startCallback = startCallback;
            this.successCallback = successCallback;
            this.failCallback = failCallback;
            this.callbacksFuture.resolve();
        }, onAdStart:function() {
            this.startCallbackCalled = true;
            this.callbacksPromise.then(function() {
                this.startCallback();
            }.bind(this));
        }, onAdTimeUpdate:function() {
            if (this.successCallbackCalled) {
                return;
            }
            var now = +new Date;
            if (this.getVisiblePercent() >= this.PERCENT_VIEWABLE_REQUIREMENT) {
                if (this.stopwatch) {
                    this.secondsWatched += (now - this.stopwatch) / 1E3;
                    if (this.secondsWatched >= this.DURATION_REQUIREMENT_IN_SECS) {
                        this.callbacksPromise.then(function() {
                            this.successCallback();
                        }.bind(this));
                        this.successCallbackCalled = true;
                    }
                }
            } else {
                this.resetStopwatch();
            }
            this.stopwatch = now;
        }, onAdBlockerComplete:function() {
            if (this.startCallbackCalled && !this.successCallbackCalled) {
                this.callbacksPromise.then(function() {
                    this.failCallback();
                }.bind(this));
            }
        }, resetCounters:function() {
            this.startCallbackCalled = false;
            this.successCallbackCalled = false;
            this.secondsWatched = 0;
            this.secondsNotWatched = 0;
        }};
    }());
    vdb.reporting.viewability.IabFactory = function(config, environment, tracker, viewability) {
        return function() {
            return new vdb.reporting.viewability.Iab(config, environment, tracker, viewability);
        };
    };
    vdb.reporting.viewability.IabFactory.$dependencies = [vdb.enums.Dependencies.CONFIG, vdb.enums.Dependencies.ENVIRONMENT, vdb.enums.Dependencies.BASIC_TRACKER, vdb.enums.Dependencies.VIEWABILITY];
    vdb.tracking = {};
    vdb.tracking.PrimalTracker = vdb.core.Class.extend(function() {
        function _buildURLWithBaseParams(pixel, parameters) {
            var baseParams = vdb.Utils.multiSerialize([this._config.getBasicParameters(), this._config.getAllMacros(), this._config.getReportingMacros(), {"apid":this._config.getATPData()["utid"]}]);
            var combined = vdb.Utils.serialize(parameters);
            this._trackingUrl = this._trackingUrl || this._urls.getTrackingBaseUrl();
            return this._trackingUrl + "/" + pixel + "?" + baseParams + (combined ? "&" + combined : "") + "&cb=" + Math.random();
        }
        function init(config, debugInfo, urls) {
            this._config = config;
            this._debugInfo = debugInfo;
            this._urls = urls;
            this._enabled = this._config.getTrackingEnabled();
        }
        function callExternalPixel(pixelURL) {
            LOGGER.debug("PIXEL", pixelURL);
            if (!this._enabled) {
                LOGGER.debug("tracking is disabled");
                return;
            }
            if (typeof pixelURL !== "string" || pixelURL.indexOf("//") === -1) {
                LOGGER.debug("not sending pixel", pixelURL);
                return;
            }
            if (pixelURL.indexOf("//") === 0 && window.location.protocol.indexOf("http") !== 0) {
                pixelURL = "https:" + pixelURL;
            }
            pixelURL = pixelURL.replace("[APID]", this._config.getATPData()["utid"]);
            var tracker = vdb.dom.createElement("img");
            tracker.src = pixelURL;
            this._debugInfo.logPixel(pixelURL);
        }
        function _callUrl(pixelURL) {
            if (!this._enabled) {
                LOGGER.debug("PIXEL (log only)", pixelURL);
            } else {
                callExternalPixel.call(this, pixelURL);
            }
        }
        function getVcid(parameters) {
            var videoCampaignIds = this._config.getVideoCampaignIds();
            if (videoCampaignIds) {
                return videoCampaignIds[parameters["vid"]];
            }
            return false;
        }
        function callPixel(pixel, parameters) {
            var overrideVideoId = this._config.getOverrideVideoId();
            var vcid;
            parameters = parameters || {};
            if (parameters["vid"] && overrideVideoId && !isNaN(parameters["vid"])) {
                parameters["vid"] = overrideVideoId;
            }
            if (parameters["vid"]) {
                vcid = getVcid.call(this, parameters);
                if (vcid) {
                    parameters["vcid"] = vcid;
                }
            }
            if (this._config.isTBV()) {
                parameters["itg"] = "tbv";
            }
            this._callUrl(_buildURLWithBaseParams.call(this, pixel, parameters));
        }
        var LOGGER = vdb.log.getLogger("PrimalTracker");
        return{init:init, callPixel:callPixel, callExternalPixel:callExternalPixel, _callUrl:_callUrl};
    }());
    vdb.tracking.PixelTracker = vdb.tracking.PrimalTracker.extend(function() {
        var Dependencies = vdb.enums.Dependencies;
        return{init:function(dependencies) {
            var config = dependencies[Dependencies.CONFIG];
            var debugInfo = dependencies[Dependencies.DEBUG_INFO];
            var urls = dependencies[Dependencies.URLS];
            this._super(config, debugInfo, urls);
            this._environment = dependencies[Dependencies.ENVIRONMENT];
            this._trackingUrl = this._urls.getTrackingBaseUrl();
            this._viewability = dependencies[Dependencies.VIEWABILITY];
            this._moatViewability = dependencies[Dependencies.MOAT_VIEWABILITY];
        }, generatePixelParams:function(mandatory, optional, result) {
            for (var prop in mandatory) {
                if (mandatory.hasOwnProperty(prop)) {
                    result[prop] = mandatory[prop];
                }
            }
            for (prop in optional) {
                if (optional.hasOwnProperty(prop) && optional[prop] != null) {
                    var isNumber = typeof optional[prop] === "number";
                    var isNotANumber = isNaN(optional[prop]);
                    if (!isNumber || !isNotANumber) {
                        result[prop] = optional[prop];
                    }
                }
            }
            return result;
        }, viewabilityParams:function(result) {
            return this.generatePixelParams({"p.vw.active":+vdb.utils.PageUtil.isVisible(), "p.vw.sound":Math.round(this._environment.getVolume() * 100), "vwa":this._viewability.getVisiblePercent()}, {"vwm":this._moatViewability.getVisiblePercent()}, result);
        }};
    }(), [vdb.enums.Dependencies.CONFIG, vdb.enums.Dependencies.DEBUG_INFO, vdb.enums.Dependencies.URLS, vdb.enums.Dependencies.ENVIRONMENT, vdb.enums.Dependencies.VIEWABILITY, vdb.enums.Dependencies.MOAT_VIEWABILITY]);
    (function(def) {
        var LOGGER = vdb.log.getLogger("PixelTracker");
        def.callExternalPixel = function(pixelURL) {
            LOGGER.debug("PIXEL", pixelURL);
            var tracker = vdb.dom.createElement("img");
            tracker.src = pixelURL;
        };
    })(vdb.tracking.PixelTracker);
    vdb.reporting.BasicTracker = vdb.tracking.PixelTracker.extend(function() {
        var LOGGER = vdb.log.getLogger("BasicTracker");
        return{click:function(category, clickName) {
            LOGGER.debug("click");
            var parameters = {};
            if (category !== undefined) {
                parameters["category"] = category;
            }
            if (clickName !== undefined) {
                parameters["clickName"] = clickName;
            }
            this.callPixel("click.gif", parameters);
        }, display:function(size) {
            LOGGER.debug("display");
            var dt = (new Date).getTime() - this._config.getImpressionTimestamp();
            var placement = this._config.getPlacement();
            var integration = this._environment.getIntegration();
            this.callPixel("display.gif", {"dt":dt, "w":size.width, "h":size.height, "itg":integration, "csid":placement && placement["playerTemplate"] && placement["playerTemplate"]["csid"] || null, "sact":this._config.getSact()});
        }, action:function(actionType, adTime, contentTime, adData, externalId, model, pollsData) {
            LOGGER.debug("action", actionType);
            var _video = this._environment.getCurrentVideo();
            var parameters = {"action":actionType, "ct":contentTime, "vid":this._environment.getCurrentVideoId(), "seq":_video ? _video.sequence : ""};
            var isYoutube = _video && _video.videoSourceType === "youtube";
            var lastAd = isYoutube ? this._environment.getAdConfigEntry() : false;
            if (lastAd) {
                parameters["asid"] = lastAd.getAsid();
            } else {
                parameters["asid"] = _video ? _video.metadata["asid"] : "";
            }
            if (lastAd) {
                parameters["acid"] = lastAd.getAcid();
            } else {
                parameters["acid"] = _video ? _video.metadata["acid"] : "";
            }
            parameters["rid"] = lastAd ? lastAd.getRuleId() : "";
            parameters["vid"] = lastAd ? lastAd.getVideoId() : parameters["vid"];
            if (adTime) {
                parameters["at"] = adTime;
            }
            if (adData) {
                parameters["adId"] = adData.adId;
                parameters["rid"] = adData.rid;
                parameters["txid"] = adData.txid;
            }
            if (externalId) {
                parameters["externalId"] = externalId;
            }
            if (model) {
                parameters["\u04411"] = model._title;
                parameters["\u04412"] = model._clickthroughUrl;
                parameters["c3"] = model._action;
            }
            if (pollsData) {
                parameters["PollId"] = pollsData.pollId;
                parameters["AnswerId"] = pollsData.answerId;
            }
            this.callPixel("action.gif", parameters);
        }, fallback:function(adCycles, adType) {
            LOGGER.debug("ad-fallback (" + adCycles + ", " + adType + ")");
            this.callPixel("ad-fallback.gif", {ac:adCycles, at:adType.toLowerCase()});
        }};
    }());
    vdb.tracking.AdBlockTracker = vdb.tracking.PixelTracker.extend(function() {
        return{init:function(dependencies) {
            this._super(dependencies);
        }, trackAdInfo:function(data) {
            this.callPixel("abInfo.gif", {"ab":data.hasAdBlocker || 0});
        }};
    }());
    vdb.tracking.PlayerPixelTrackerBase = vdb.tracking.PixelTracker.extend(function() {
        function getVideoDomain(video) {
            var url = video && video.videoUrls && video.videoUrls.length && video.videoUrls[0];
            return vdb.Utils.getDomain(url);
        }
        function isFullscreen() {
            return vdb.utils.Fullscreen.enabled() ? +vdb.utils.Fullscreen.isFullscreen() : 0;
        }
        var MAX_T_FACTOR = 3;
        return{init:function(context) {
            var Dependencies = vdb.enums.Dependencies;
            var injector = context.getInjector();
            var dependencies = {};
            dependencies[Dependencies.CONFIG] = injector.resolveSync(Dependencies.CONFIG);
            dependencies[Dependencies.ENVIRONMENT] = injector.resolveSync(Dependencies.ENVIRONMENT);
            dependencies[Dependencies.URLS] = injector.resolveSync(Dependencies.URLS);
            dependencies[Dependencies.VIEWABILITY] = injector.resolveSync(Dependencies.VIEWABILITY);
            dependencies[Dependencies.MOAT_VIEWABILITY] = injector.resolveSync(Dependencies.MOAT_VIEWABILITY);
            dependencies[Dependencies.DEBUG_INFO] = injector.resolveSync(Dependencies.DEBUG_INFO);
            dependencies[Dependencies.FLASH_DETECTOR] = injector.resolveSync(Dependencies.FLASH_DETECTOR);
            this._super(dependencies);
            injector.resolve(Dependencies.BITRATE_TRACKER).then(function(bitrateTracker) {
                this._bitrateTracker = bitrateTracker;
            }.bind(this));
            injector.resolve(Dependencies.BUFFERED_CALCULATOR).then(function(bufferedCalculator) {
                this._bufferedCalculator = bufferedCalculator;
            }.bind(this));
        }, videoPlayedTimeParam:function(result) {
            var state = this._environment.getPlayerState() || {};
            var playTime = Math.min(state["videoLength"] * MAX_T_FACTOR, state["currentPlayTime"] || state["currentTime"] || 0);
            return this.generatePixelParams({"t":playTime > 0 ? Math.floor(playTime) : 0}, {}, result);
        }, bufferedParams:function(result, isDelta) {
            var buffering = this._bufferedCalculator && this._bufferedCalculator.getBufferingTime(isDelta);
            var bitrate = this._bitrateTracker && this._bitrateTracker.getAvgBitrate(isDelta);
            return this.generatePixelParams({}, {"bft":buffering, "bit":bitrate}, result);
        }, videoParams:function(result, video) {
            video = video || this._environment.getCurrentVideo() || {};
            return this.generatePixelParams({"vid":video.id || "", "vpt":video.vpt, "seq":video.sequence, "cvt":Math.floor(this._environment.getVideoTime()), "fs":isFullscreen()}, {"vcdn":getVideoDomain(video)}, result);
        }, sizeParams:function(result) {
            var size = this._environment.getSize() || {};
            return this.generatePixelParams({"w":size.width, "h":size.height}, {}, result);
        }, skinParams:function(result) {
            return this.generatePixelParams({}, {"csid":this._config.getSkinId()}, result);
        }};
    }());
    vdb.reporting.ContextReporting = vdb.tracking.PlayerPixelTrackerBase.extend(function() {
        function _onContextIntent() {
            var video = this._adapter.getCurrentVideo();
            this.callPixel("context-intent.gif", {"vid":video ? video["id"] : ""});
        }
        function _onContextStarted() {
            var params = {};
            this.bufferedParams(params);
            this.videoParams(params);
            this.viewabilityParams(params);
            this.callPixel("context-started.gif", params);
        }
        return{init:function(context) {
            this._super(context);
            this._adapter = context.api.adapter;
            this._adapter.addEventListener(vdb.constants.PlayerEvent.CONTEXT_INTENT, _onContextIntent.bind(this));
            this._adapter.addEventListener(vdb.constants.PlayerEvent.CONTEXT_STARTED, _onContextStarted.bind(this));
        }};
    }());
    vdb.tracking.PageTracker = vdb.tracking.PlayerPixelTrackerBase.extend(function() {
        function onContextIntent() {
            clearTimeout(this._timer);
        }
        function extractContentSource(data, reg) {
            var ret = "";
            var source = data["prop9"] || data["c15"];
            if (source && source.match(reg)[1]) {
                ret = source.match(reg)[1];
            }
            return ret;
        }
        var LOGGER = vdb.log.getLogger("PageTracker");
        var MAX_IDLE_TIME = 10 * 24 * 60 * 60 * 1E3;
        return{init:function(context) {
            this._super(context);
            this._context = context;
            this._idleTimer = 1E4;
            context.api.adapter.addEventListener(vdb.constants.PlayerEvent.CONTEXT_INTENT, onContextIntent.bind(this));
            this._timer = setTimeout(this.reportIdle.bind(this), this._idleTimer);
        }, reportIdle:function() {
            LOGGER.debug("pageIdle - " + this._idleTimer / 1E3 + "s");
            var dt = (new Date).getTime() - this._context.impressionTimestamp;
            var isActive = vdb.utils.PageUtil.isVisible() ? 1 : 0;
            this.callPixel("page-idle.gif", {"dt":dt, "p.vw.active":isActive});
            this._idleTimer *= 2;
            if (this._idleTimer < MAX_IDLE_TIME) {
                this._timer = setTimeout(this.reportIdle.bind(this), this._idleTimer);
            }
        }, pageInfo:function() {
            LOGGER.debug("pageInfo");
            var data = window["s_265"] || {};
            var context = this._context;
            if (this.pageinfoFired) {
                return;
            }
            this.pageinfoFired = true;
            this.callPixel("page-info.gif", {"it":"Omniture", "ss":data["channel"] || "", "pgt":extractContentSource(data, /^(.+?):/), "pgtid":extractContentSource(data, /:(.+?)$/), "pgn":data["pageName"] || "", "spnsr":data["c6"] || "", "unauthid":data["eVar52"] || "", "pid":context.playerId || "", "bcid":context.buyerCompanyId || "", "apid":context.ATPData ? context.ATPData["utid"] || "" : "", "dep":data["prop1"], "articlecat":data["prop18"], "sponsor":data["prop6custom"], "articletype":data["prop16"],
                "articletag":data["prop19"], "playerlocation":data["prop62"], "rd":vdb.Utils.getHostFromUrl(vdb.utils.WindowUtil.getDocumentReferrer() || context.getReferrer())});
        }};
    }());
    vdb.utils.CookieShare = vdb.core.Class.extend(function() {
        function getSharedCookies(node) {
            var future = new vdb.Future;
            node.iFramePromise.then(function(iframe) {
                try {
                    node.fifo.push(future);
                    iframe.contentWindow.postMessage("getCookies", "*");
                } catch (e) {
                    node.fifo.shift();
                    future.resolve("");
                }
            }, function() {
                future.resolve("");
            });
            return future.getPromise();
        }
        function prepareIFrame(node) {
            if (node.iFramePromise) {
                return;
            }
            node.iFramePromise = new vdb.Promise(function(resolve, reject) {
                var iframe = vdb.Utils.createElement("iframe", {"src":node.url, "style":"visibility:hidden;display:none;width:1px;height:1px;font-size:0;position:fixed;top:0;left:0;"}, window.document.body);
                iframe["onload"] = resolve.bind(null, iframe);
                iframe["onerror"] = reject;
            });
        }
        function getPreparedIFrameNode(url) {
            for (var i = 0;i < IFRAMES.length;i++) {
                var node = IFRAMES[i];
                if (url.indexOf(node.domain) !== -1) {
                    prepareIFrame(node);
                    return node;
                }
            }
            return null;
        }
        var LOGGER = vdb.log.getLogger("CookieShare");
        var NECESSITY_MATCHER = "konduit.me";
        var COOKIE_PREFIX = "cookies: ";
        var IFRAMES = [{domain:"advertising.com", iFramePromise:null, fifo:[], url:"//video.adaptv.advertising.com/iframe.html"}];
        return{init:function() {
            vdb.events.addEventListener(window, "message", function(event) {
                if (!event || typeof event !== "object" || !event["origin"]) {
                    return;
                }
                var node = getPreparedIFrameNode(event["origin"]);
                if (!node) {
                    return;
                }
                var cookieSource = event.data;
                var cookie;
                if (typeof cookieSource === "string" && cookieSource.indexOf(COOKIE_PREFIX) === 0) {
                    cookie = cookieSource.substr(COOKIE_PREFIX.length);
                }
                if (!cookie) {
                    return;
                }
                var future = node.fifo.shift();
                if (!future) {
                    LOGGER.error("Nobody is waiting for message");
                    return;
                }
                future.resolve(cookie);
            });
        }, getCookies:function(url) {
            if (url.indexOf(NECESSITY_MATCHER) !== -1) {
                var node = getPreparedIFrameNode(url);
                if (node) {
                    return getSharedCookies(node);
                }
            }
            return vdb.Promise.resolve("");
        }, setCookie:function(cookie, url) {
            var node = getPreparedIFrameNode(url);
            if (!node) {
                return;
            }
            node.iFramePromise.then(function(iframe) {
                iframe.contentWindow.postMessage("setCookies:" + cookie, "*");
            });
        }, processRequest:function(request, url) {
            var xCookieHeader;
            try {
                if (url.indexOf(NECESSITY_MATCHER) > -1) {
                    xCookieHeader = request.getResponseHeader("x-kme-set-cookie");
                }
            } catch (e) {
                LOGGER.debug("Unable to read kme cookie");
            }
            xCookieHeader = xCookieHeader || "";
            if (xCookieHeader) {
                var encodedCookies = xCookieHeader.split(",");
                for (var i = 0;i < encodedCookies.length;i++) {
                    var cookie = vdb.utils.StringUtils.trim(encodedCookies[i] || "");
                    if (cookie) {
                        this.setCookie(cookie, url);
                    }
                }
            }
        }};
    }());
    vdb.utils.DebugInfo = function() {
        var instance;
        var _debugInfo = vdb.core.Class.extend(function() {
            return{init:function() {
                var isDebugLogLevel = vdb.log.Logger.getLevel() === 0;
                this.isPixelsLogEnabled = isDebugLogLevel;
                this.isRequestsLogEnabled = isDebugLogLevel;
                this.pixelsLog = [];
                this.requestsLog = [];
            }, logPixel:function(url) {
                if (this.isPixelsLogEnabled) {
                    this.pixelsLog.push({"url":url, "ts":+new Date});
                }
            }, logRequest:function(url) {
                if (this.isRequestsLogEnabled) {
                    this.requestsLog.push({"url":url, "ts":+new Date});
                }
            }};
        }());
        return{getInstance:function() {
            if (!instance) {
                instance = new _debugInfo;
            }
            return instance;
        }};
    }();
    vdb.ajax = {};
    (function(def) {
        function xhr() {
            var browser = vdb.Utils.browser;
            if (window.XDomainRequest && browser["ie"] && browser.version < 10) {
                return new function() {
                    var _this = this;
                    var xdr = new XDomainRequest;
                    _this.status = 0;
                    _this.readyState = 0;
                    _this.setRequestHeader = function() {
                    };
                    _this.getResponseHeader = function(header) {
                        var result = "";
                        if (header == "content-type") {
                            result = this.mimeType;
                        }
                        return result;
                    };
                    _this.open = function(method, url) {
                        xdr.open(method, url);
                        xdr.onerror = function() {
                            _this.status = 499;
                            _this.responseText = "";
                            _this.mimeType = "";
                            _this.readyState = 4;
                            _this.onreadystatechange();
                        };
                        xdr.onprogress = function() {
                            _this.readyState = 2;
                            _this.onreadystatechange();
                        };
                        xdr.onload = function() {
                            _this.responseText = xdr["responseText"];
                            _this.mimeType = xdr["contentType"];
                            _this.readyState = 4;
                            _this.onreadystatechange();
                        };
                        xdr.ontimeout = function() {
                            _this.status = 408;
                            _this.responseText = "";
                            _this.mimeType = "";
                            _this.readyState = 4;
                            _this.onreadystatechange();
                        };
                        xdr.timeout = 0;
                        _this.readyState = 1;
                        _this.onreadystatechange();
                    };
                    _this.send = function(postData) {
                        xdr.send(postData);
                    };
                };
            }
            if (typeof XMLHttpRequest !== "undefined" && (window.location.protocol !== "file:" || !window.ActiveXObject)) {
                return new XMLHttpRequest;
            }
            try {
                return new ActiveXObject("Msxml2.XMLHTTP.6.0");
            } catch (e) {
            }
            try {
                return new ActiveXObject("Msxml2.XMLHTTP.3.0");
            } catch (e$$0) {
            }
            try {
                return new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e$$1) {
            }
            return false;
        }
        function successfulRequest(request) {
            return request.status >= 200 && request.status < 300 || request.status == 304 || request.status == 0 && request.responseText;
        }
        function parseJSON(string) {
            if (typeof string !== "string" || !string) {
                return null;
            }
            string = vdb.utils.StringUtils.trim(string);
            try {
                return eval("(" + string + ")");
            } catch (e) {
                return JSON.parse(string);
            }
        }
        function parseXML(string) {
            if (window.DOMParser) {
                return(new DOMParser).parseFromString(string, "text/xml");
            }
            var xml = new ActiveXObject("Microsoft.XMLDOM");
            xml.async = "false";
            xml.loadXML(string);
            return xml;
        }
        function logRequest(url) {
            if (url) {
                vdb.utils.DebugInfo.getInstance().logRequest(url);
            }
        }
        function ajax(url, options) {
            function respondToReadyState() {
                if (request.readyState == 4) {
                    var contentType = request.getResponseHeader("content-type") || "";
                    response.status = request.status;
                    response.text = request.responseText;
                    if (/json/.test(contentType)) {
                        response.data = parseJSON(request.responseText);
                    } else {
                        if (/xml/.test(contentType)) {
                            response.data = parseXML(request.responseText);
                        }
                    }
                    response.success = successfulRequest(request);
                    cookieShare.processRequest(request, url);
                    if (response.success) {
                        if (options.success) {
                            options.success(response, request);
                        }
                    } else {
                        if (options.error) {
                            vdb.Utils.callAsync(function() {
                                options.error(response, request, timedOut);
                            });
                        }
                    }
                    if (options.complete) {
                        options.complete(response, request);
                    }
                }
            }
            function setHeaders() {
                var defaults = {"Accept":"text/javascript, application/json, text/html, application/xml, text/xml, */*", "Content-Type":"application/x-www-form-urlencoded"};
                for (var name in defaults) {
                    if (!Object.prototype.hasOwnProperty.call(options.headers, name)) {
                        options.headers[name] = defaults[name];
                    }
                }
                if (options.contentType) {
                    options.headers["Content-Type"] = options.contentType;
                }
                for (name in options.headers) {
                    request.setRequestHeader(name, options.headers[name]);
                }
            }
            function send() {
                try {
                    setHeaders();
                    request.send(options.postBody);
                } catch (e) {
                    if (options.error) {
                        options.error();
                    }
                }
            }
            var request = xhr();
            var response = {};
            var chain;
            var timedOut = false;
            if (typeof options === "undefined") {
                options = {};
            }
            options.method = options.method ? options.method.toLowerCase() : "get";
            options.async = options.async !== false;
            options.postBody = options.postBody || "";
            request.onreadystatechange = respondToReadyState;
            try {
                request.open(options.method, url, options.async);
                if (typeof request.withCredentials !== "undefined") {
                    request.withCredentials = !!options.withCredentials;
                }
            } catch (e$$0) {
            }
            options.headers = options.headers || {};
            if (options.timeout) {
                request.timeout = options.timeout;
                timedOut = false;
                request.ontimeout = function() {
                    timedOut = true;
                };
            }
            chain = {header:function(key, value) {
                options.headers[key] = value;
                return chain;
            }, send:function(data, complete) {
                options.postBody = vdb.Utils.serialize(data);
                options.complete = complete;
                send();
                return chain;
            }, end:function(complete) {
                options.complete = complete;
                send();
                return chain;
            }, data:function(data) {
                options.postBody = vdb.Utils.serialize(data);
                return chain;
            }};
            return chain;
        }
        var cookieShare = new vdb.utils.CookieShare;
        def.get = function(url, data, success, error, complete, options) {
            if (typeof options === "undefined") {
                options = {};
            }
            options.success = success;
            options.error = error;
            options.method = "get";
            logRequest(url);
            return cookieShare.getCookies(url).then(function(cookies) {
                if (cookies) {
                    if (!options.headers) {
                        options.headers = {};
                    }
                    options.headers["X-Cookie"] = cookies;
                }
                ajax(url, options).send(data, complete);
            });
        };
        def.getWithPromise = function(url) {
            return new vdb.Promise(function(resolve, reject) {
                def.get(url, null, resolve, reject);
            });
        };
        def.post = function(url, data, success, error, complete, options) {
            if (typeof options === "undefined") {
                options = {};
            }
            options.success = success;
            options.error = error;
            options.method = "post";
            return ajax(url, options).send(data, complete);
        };
    })(vdb.ajax);
    vdb.core.AdBlockerSniffer = vdb.core.Class.extend(function() {
        function findAdBlockerUsingDOM() {
            var testAd = vdb.Utils.createElement("div", {"class":"adsbox"}, document.body);
            testAd.style.height = "1px";
            testAd.style.width = "1px";
            return new vdb.Promise(function(resolve) {
                window.setTimeout(function() {
                    resolve(testAd.offsetHeight === 0);
                    vdb.Utils.removeFromParent(testAd);
                }, 100);
            });
        }
        function findAdBlocker(url) {
            function adBlockerFound() {
                return true;
            }
            function adBlockerPassed() {
                if (vdb.Utils.browser["safari"] && isHttps) {
                    return findAdBlockerUsingDOM.call(this);
                }
                return false;
            }
            _promise = vdb.ajax.getWithPromise(url || HONEY_POT_URL).then(adBlockerPassed.bind(this), adBlockerFound.bind(this));
            return _promise.then(trackAdInfo.bind(this)).then(adBlockDetectionComplete.bind(this));
        }
        function adBlockDetectionComplete(hasAdBlocker) {
            _context.dispatchEvent(vdb.constants.PlayerEvent.FINISHED_ADBLOCK_DETECTION, hasAdBlocker);
            return hasAdBlocker;
        }
        function trackAdInfo(hasAdBlocker) {
            this._adBlockTrackerPromise.then(function(tracker) {
                tracker.trackAdInfo({hasAdBlocker:hasAdBlocker ? 1 : 0});
            });
            return hasAdBlocker;
        }
        var isHttps = location.protocol === "https:";
        var PREFIX = isHttps ? "https://s" : "http://";
        var HONEY_POT_URL = PREFIX + "z.on.aol.com/advertisers/advertisers.txt?adunit=preroll&adId=5&agency=1&adType=preroll&ads=1&ad";
        var _context;
        var _promise;
        return{init:function(context) {
            _context = context;
            this._adBlockTrackerPromise = context.getInjector().createClass(vdb.tracking.AdBlockTracker);
        }, check:function(url) {
            return findAdBlocker.call(this, url);
        }, getPromise:function() {
            return _promise;
        }};
    }());
    vdb.utils.FlashDetector = vdb.core.Class.extend(function() {
        var VDB_FLASH_TIMEOUT = "vdb-fl";
        var flashPlayerVersion;
        var invokeFlashPlayerVersion = function() {
            flashPlayerVersion = {};
            flashPlayerVersion.major = -1;
            flashPlayerVersion.minor = -1;
            flashPlayerVersion.release = -1;
            var getActiveXVersion = function(activeXObj) {
                var version = -1;
                try {
                    version = activeXObj.GetVariable("$version");
                } catch (err) {
                }
                return version;
            };
            var getActiveXObject = function(name) {
                var obj = -1;
                try {
                    obj = new ActiveXObject(name);
                } catch (err) {
                    obj = {activeXError:true};
                }
                return obj;
            };
            var parseActiveXVersion = function(str) {
                var versionArray = str.split(",");
                return{"major":parseInt(versionArray[0].split(" ")[1], 10), "minor":parseInt(versionArray[1], 10), "release":parseInt(versionArray[2], 10)};
            };
            var parseStandardVersion = function(str) {
                var descParts = str.split(/ +/);
                var majorMinor = descParts[2].split(/\./);
                var release = descParts[3];
                return{"raw":str, "major":parseInt(majorMinor[0], 10), "minor":parseInt(majorMinor[1], 10), "release":parseInt(release.substr(1), 10)};
            };
            var activeXDetectRules = [{"name":"ShockwaveFlash.ShockwaveFlash.7", "version":function(obj) {
                return getActiveXVersion(obj);
            }}, {"name":"ShockwaveFlash.ShockwaveFlash.6", "version":function(obj) {
                var version = "6,0,21";
                try {
                    obj.AllowScriptAccess = "always";
                    version = getActiveXVersion(obj);
                } catch (err) {
                }
                return version;
            }}, {"name":"ShockwaveFlash.ShockwaveFlash", "version":function(obj) {
                return getActiveXVersion(obj);
            }}];
            (function() {
                var plugins;
                var mimeTypes;
                var version;
                var versionObj;
                try {
                    plugins = navigator.plugins;
                    mimeTypes = navigator.mimeTypes;
                } catch (e) {
                }
                if (plugins && plugins.length > 0) {
                    var type = "application/x-shockwave-flash";
                    if (mimeTypes && mimeTypes[type] && mimeTypes[type].enabledPlugin && mimeTypes[type].enabledPlugin.description) {
                        version = mimeTypes[type].enabledPlugin.description;
                        versionObj = parseStandardVersion(version);
                        flashPlayerVersion.major = versionObj.major;
                        flashPlayerVersion.minor = versionObj.minor;
                        flashPlayerVersion.release = versionObj.release;
                    }
                } else {
                    if (navigator.appVersion.indexOf("Mac") === -1 && window.execScript) {
                        version = -1;
                        for (var i = 0;i < activeXDetectRules.length && version === -1;i++) {
                            var obj = getActiveXObject(activeXDetectRules[i].name);
                            if (!obj.activeXError) {
                                version = activeXDetectRules[i].version(obj);
                                if (version !== -1) {
                                    versionObj = parseActiveXVersion(version);
                                    flashPlayerVersion.major = versionObj.major;
                                    flashPlayerVersion.minor = versionObj.minor;
                                    flashPlayerVersion.release = versionObj.release;
                                }
                            }
                        }
                    }
                }
            })();
        };
        var countFlashTimeouts = function() {
            var counter = +vdb.localStorage.getItem(VDB_FLASH_TIMEOUT) || 0;
            vdb.localStorage.setItem(VDB_FLASH_TIMEOUT, counter + 1);
            return " (" + +(counter === 0) + ", " + +(counter > 0 && counter < 5) + ", " + counter + ")";
        };
        var getFlashTimeoutCounter = function() {
            return+vdb.localStorage.getItem(VDB_FLASH_TIMEOUT) || 0;
        };
        var isFlashSupported = function() {
            var version = flashPlayerVersion;
            return version.major === 11 && version.minor >= 1 || version.major > 11;
        };
        var isFlashAvailable = function() {
            var disableFlashAd = this._config.getMacro(vdb.constants.PlayerMacros.DISABLE_FLASH_AD);
            return this.isFlashSupported() && !this.isFlashBlocked() && !disableFlashAd && this.getFlashTimeoutCounter() < 4;
        };
        var flashVersionAtLeast = function() {
            var result;
            var version = flashPlayerVersion;
            var properties = [version.major, version.minor, version.release];
            var len = Math.min(properties.length, arguments.length);
            for (var i = 0;i < len;i++) {
                if (properties[i] >= arguments[i]) {
                    if (!(i + 1 < len && properties[i] === arguments[i])) {
                        result = true;
                    }
                } else {
                    result = false;
                }
            }
            return result;
        };
        var isFlashBlocked = function() {
            if (vdb.Utils.browser.name === "firefox" && vdb.Utils.browser.version >= 39) {
                if (vdb.utils.UrlUtils.getParameterByName("ignoreexcludeff") === 1) {
                    return false;
                }
                if (!flashVersionAtLeast.call(this, 19, 0, 0)) {
                    return true;
                }
            }
            return false;
        };
        return{init:function(dependencies) {
            invokeFlashPlayerVersion();
            this._config = dependencies[vdb.enums.Dependencies.CONFIG];
        }, countFlashTimeouts:countFlashTimeouts, getFlashTimeoutCounter:getFlashTimeoutCounter, isFlashAvailable:isFlashAvailable, isFlashSupported:isFlashSupported, isFlashBlocked:isFlashBlocked};
    }(), [vdb.enums.Dependencies.CONFIG]);
    vdb.context.ContextBase = vdb.core.Class.extend(function() {
        function getHostContainer(elementOrId) {
            var container = typeof elementOrId === "string" ? document.getElementById(elementOrId) : elementOrId;
            if (!container) {
                var msg = "ERROR: can't find DOM container '" + elementOrId + "'";
                LOGGER.error(msg);
                throw new Error(msg);
            }
            return container;
        }
        function getVisiblePercent() {
            return this.viewability.getVisiblePercent();
        }
        function getViewability() {
            return this.viewability.getViewableOpportunity();
        }
        function getViewableOpportunity() {
            return this.moatViewability.getViewableOpportunity();
        }
        function getMoatViewability() {
            return this.moatViewability.getVisiblePercent();
        }
        function createContextNamespace(context) {
            var ctx = {};
            for (var p in vdb) {
                ctx[p] = vdb[p];
            }
            ctx.ads = vdb.Utils.copy(vdb.ads);
            ctx.player = vdb.Utils.copy(vdb.player);
            ctx.ctx = context;
            ctx.LOGGER_PARAMS_UPDATED = "LoggerParamsUpdated";
            return ctx;
        }
        function getATPdata() {
            return this.ATPData || {};
        }
        function getParams() {
            return this.params || {};
        }
        function getParam(key) {
            return this.params && this.params[key];
        }
        var LOGGER = vdb.log.getLogger("Context");
        var MACRO_PREFIX = "m.";
        var utl = vdb.Utils;
        return{init:function(options, globalDefinitions, placement) {
            var timestamp = placement && placement["timestamp"] || +new Date;
            this.hostContainer = getHostContainer(options["content"] || options["contentId"]);
            this.ctx = createContextNamespace(this);
            this.generateGUID = options["generateGUID"] || function() {
                return(new vdb.utils.GUID(timestamp)).toString();
            };
            this.id = options["sid"] || this.generateGUID();
            this.placement = placement;
            this.preview = options["preview"];
            this.playerId = options["pid"];
            this.playerType = options["pt"];
            this.buyerCompanyId = options["bcid"];
            this.impressionTimestamp = options["it"];
            this.params = vdb.Utils.deserialize(options["params"]);
            this.bidModifier = new vdb.context.BidModifier(options["bidModifier"] || window["vdbBidModifier"] || {});
            this.o2playerSettings = options["o2playerSettings"] || window["o2playerSettings"] || {};
            this.site = options["site"];
            this.adsDisabled = this.getMacro(vdb.constants.PlayerMacros.DISABLEADS) === "1";
            this.options = options;
            this._flashDetector = this.getInjector().resolveSync(vdb.enums.Dependencies.FLASH_DETECTOR);
            this.isVPAID = false;
            this.needToOverrideAds = false;
            window["vdbBidModifier"] = undefined;
            this.definitions = globalDefinitions.slice();
            this.eventBus = new vdb.EventBus;
            this.debugInfo = vdb.utils.DebugInfo.getInstance();
            this.moatViewability = new vdb.utils.viewability.MoatViewability(this.api.getElement());
            this.viewability = new vdb.utils.viewability.Viewability(this.api.getElement());
            this.setLoggerParams({"imid":utl.rand().join("").substring(1, 16), "uid":""});
            this["getATPdata"] = this.getATPdata.bind(this);
            this["getParams"] = this.getParams.bind(this);
            this["getVisiblePercent"] = this.getVisiblePercent.bind(this);
            this["getViewability"] = this.getViewability.bind(this);
            this["detectIabViewability"] = this.detectIabViewability.bind(this);
            this["startAdChrome"] = this.startAdChrome.bind(this);
            this["getMoatViewability"] = this.getMoatViewability.bind(this);
        }, getATPdata:getATPdata, getParams:getParams, getParam:getParam, addEventListener:function(event, handler) {
            this.eventBus.addEventListener(event, handler);
        }, removeEventListener:function(event, handler) {
            this.eventBus.removeEventListener(event, handler);
        }, dispatchEvent:function(event) {
            var args = Array.prototype.slice.call(arguments);
            this.eventBus.dispatchEvent.apply(this.eventBus, args);
        }, getPlacementParameters:function() {
            var obj = this.getParameters();
            delete obj["bid"];
            delete obj["pid"];
            return obj;
        }, getBasicParameters:function() {
            return{"bid":this.bidId, "pid":this.playerId, "bcid":this.buyerCompanyId, "sid":this.id, "s":this.urls.isSecure() ? "true" : undefined, "pv":vdb.version(), "r":this.getReferrer(), "pt":this.playerType};
        }, getParameters:function() {
            var allParams = {};
            vdb.Utils.copy(this.getBasicParameters(), allParams);
            vdb.Utils.copy(this.params, allParams);
            return allParams;
        }, getPlatformSupport:function() {
            return "html5-vpaid" + (this._flashDetector.isFlashAvailable() ? ",swf" : "");
        }, setParam:function(key, value) {
            this.params[key] = value;
            this.macros = undefined;
            this.reportingMacros = undefined;
        }, getMacro:function(macro) {
            var macro_lower = typeof macro === "string" ? macro.toLowerCase() : macro;
            return this.getAllMacros(true)[MACRO_PREFIX + macro_lower];
        }, getAllMacros:function(ignoreCase) {
            if (!this.macros) {
                this.macros = vdb.Utils.filterByPrefix(this.params, MACRO_PREFIX, {toLower:false});
            }
            if (ignoreCase) {
                return vdb.Utils.filterByPrefix(this._macros, MACRO_PREFIX, {toLower:true});
            }
            return this.macros;
        }, getReportingMacros:function() {
            if (!this.reportingMacros) {
                this.reportingMacros = vdb.Utils.filterByPrefix(this.params, "rm.", {modify:true});
            }
            return this.reportingMacros;
        }, initContext:function() {
            var definitions = this.definitions;
            for (var def;def = definitions.shift();) {
                def(this.ctx, this);
            }
        }, setBaseUrls:function(override) {
            this.urls = new vdb.context.ContextUrls(override, this.playerId, this.preview);
        }, getBaseUrls:function(url) {
            return this.urls.getBaseUrls(url);
        }, detectIabViewability:function() {
            return new vdb.Promise(function(resolve, reject) {
                this.getInjector().resolve(vdb.enums.Dependencies.IAB).then(function(iab) {
                    iab.setCallbacks(function() {
                    }, resolve, reject);
                });
            }.bind(this));
        }, startAdChrome:function(code, ids) {
            var getIds = function() {
                return JSON.parse(ids);
            };
            var moatAdTracker = new vdb.reporting.moat.AdTracker(this, code, getIds);
            vdb.events.EventContext.bindOnce(this.api.adapter, vdb.constants.PlayerEvent.AD_BLOCKER_COMPLETE, function() {
                moatAdTracker.deleteMoatApi.bind(moatAdTracker);
            });
        }, getReferrer:function() {
            var referrer = this.site;
            referrer = referrer ? decodeURIComponent(referrer) : "";
            if (!referrer) {
                if (window.top != window) {
                    return document.referrer;
                }
                return window.top.location.href;
            }
            return referrer;
        }, getLoggerParams:function() {
            return this.loggerParams;
        }, setLoggerParams:function(obj) {
            this.loggerParams = this.loggerParams || {};
            vdb.Utils.copy(obj, this.loggerParams);
            this.dispatchEvent(this.ctx.LOGGER_PARAMS_UPDATED, this.loggerParams);
        }, getBidModifier:function() {
            return this.bidModifier;
        }, getAdServerUrl:function(relativePath, parameters) {
            return this.urls.getAdServerUrl(relativePath, parameters);
        }, getVisiblePercent:getVisiblePercent, getViewability:getViewability, getViewableOpportunity:getViewableOpportunity, getMoatViewability:getMoatViewability, getInjector:function() {
            if (!this._injector) {
                this._injector = new vdb.ioc.Injector;
            }
            return this._injector;
        }};
    }());
    vdb.utils.InViewHandler = vdb.core.Class.extend(function() {
        function _bindEvents() {
            this._eventGroup.unbind();
            this.bindEvents();
        }
        function _unbindEvents() {
            this._eventGroup.unbind();
            EC.bind(this._environment, vdb.events.EnvironmentEvent.PLAYER_DOCKED, _bindEvents.bind(this)).link(this._eventGroup);
        }
        var EC = vdb.events.EventContext;
        return{init:function(dependencies) {
            this._listeners = [];
            this._eventGroup = EC.empty();
            this._environment = dependencies[vdb.enums.Dependencies.ENVIRONMENT];
            this._viewability = dependencies[vdb.enums.Dependencies.VIEWABILITY];
        }, setInviewPercent:function(inviewPercent) {
            this._inviewPercent = inviewPercent;
            return this;
        }, isInView:function() {
            return this._viewability.isVisible() && this._viewability.getVisiblePercent() >= this._inviewPercent;
        }, addInViewChangeListener:function(callback) {
            this._listeners.push(callback);
            if (this._listeners.length === 1) {
                _bindEvents.call(this);
            }
        }, removeInViewChangeListener:function(callback) {
            vdb.Utils.removeFromArray(this._listeners, callback);
            if (this._listeners.length === 0) {
                _unbindEvents.call(this);
            }
        }, _checkInView:function() {
            var inView = this.isInView();
            for (var i = 0;i < this._listeners.length;i++) {
                this._listeners[i](inView);
            }
        }, bindEvents:function() {
        }};
    }());
    vdb.utils.InViewHandlerBlur = vdb.utils.InViewHandler.extend(function() {
        var EC = vdb.events.EventContext;
        return{bindEvents:function() {
            var _checkInViewCb = this._checkInView.bind(this);
            EC.bind($win, "blur", _checkInViewCb).link(this._eventGroup);
            EC.bind($win, "focus", _checkInViewCb).link(this._eventGroup);
            var eventName = vdb.utils.PageUtil.getVisibilityChangeEventName();
            if (eventName) {
                EC.bind($doc, eventName, _checkInViewCb).link(this._eventGroup);
            }
        }};
    }());
    vdb.utils.InViewHandlerExternal = vdb.utils.InViewHandler.extend(function() {
        function _checkExternalMessage(externalEvent) {
            var eventData = externalEvent.data;
            if (eventData && eventData.event === "playerInView") {
                this._externalVisibity = eventData["percentageVisible"];
                this._checkInView.call(this);
            }
        }
        var EC = vdb.events.EventContext;
        return{bindEvents:function() {
            EC.bind($win, "message", _checkExternalMessage.bind(this)).link(this._eventGroup);
        }, isInView:function() {
            var result = this._super();
            if (this._externalVisibity !== undefined) {
                result = this._externalVisibity >= this._inviewPercent;
            }
            return result;
        }};
    }());
    vdb.utils.InViewHandlerScroll = vdb.utils.InViewHandler.extend(function() {
        var EC = vdb.events.EventContext;
        return{bindEvents:function() {
            var win = vdb.utils.WindowUtil.getTopMostWindow();
            EC.bind(win, "scroll", this._checkInView.bind(this)).link(this._eventGroup);
        }};
    }());
    vdb.utils.InViewManager = vdb.EventBus.extend(function() {
        var types = vdb.enums.IN_VIEW_TYPES;
        var LOGGER = vdb.log.getLogger("InViewManager");
        var _inViewWrapper = function(inViewAction) {
            LOGGER.debug("inView");
            inViewAction();
        };
        var _outOfViewWrapper = function(isAutoPauseCb, outOfViewAction) {
            if (isAutoPauseCb()) {
                LOGGER.debug("outOfView");
                outOfViewAction();
            }
        };
        var _isAutoPause = function(autoPauseMacroValue) {
            autoPauseMacroValue = autoPauseMacroValue && autoPauseMacroValue.toLowerCase();
            switch(autoPauseMacroValue) {
                case types.ALWAYS:
                    return true;
                case types.MUTED:
                    return this._environment.isMuted();
                case types.NEVER:
                    return false;
                default:
                    return true;
            }
        };
        var _isAutoPauseBlur = function(pauseIfTabSwitch) {
            return _isAutoPause.call(this, pauseIfTabSwitch);
        };
        var _isAutoPauseScroll = function(pauseIfScrolledAway) {
            return this._pauseOnScroll && _isAutoPause.call(this, pauseIfScrolledAway);
        };
        var onStateChange = function(handler, index) {
            for (var j = 0;j < handler.length;j++) {
                handler[j][index]();
            }
        };
        var inView = function(handler) {
            onStateChange.call(this, handler, 0);
        };
        var outOfView = function(handler) {
            onStateChange.call(this, handler, 1);
        };
        var _unbindInViewHandler = function(inViewHandler, index) {
            if (index) {
                inViewHandler.splice(index, 1);
            } else {
                inViewHandler.length = 0;
            }
        };
        var _createOnInViewChange = function(handler) {
            return function(isInView) {
                if (this._inView !== isInView) {
                    this._inView = isInView;
                    if (isInView) {
                        inView.call(this, handler);
                    } else {
                        outOfView.call(this, handler);
                    }
                }
            }.bind(this);
        };
        return{init:function(dependencies) {
            LOGGER.debug("init");
            this._super();
            this._environment = dependencies[vdb.enums.Dependencies.ENVIRONMENT];
            this._dependencies = dependencies;
            this._inView = false;
            this._pauseOnScroll = true;
            this._onInViewChangeScroll = [];
            this._onInViewChangeExternal = [];
            this._onInViewChangeBlur = [];
            this._inviewHandlerScroll = {};
            this._inviewHandlerExternal = {};
            this._inviewHandlerBlur = {};
            this._onInViewChangeHandlerScroll = _createOnInViewChange.call(this, this._onInViewChangeScroll);
            this._onInViewChangeHandlerExternal = _createOnInViewChange.call(this, this._onInViewChangeExternal);
            this._onInViewChangeHandlerBlur = _createOnInViewChange.call(this, this._onInViewChangeBlur);
        }, bindInViewChangeEvent:function(inViewOptions) {
            var inViewPercent = inViewOptions.inViewPercent;
            var inViewAction = inViewOptions.inViewAction;
            var outOfViewAction = inViewOptions.outOfViewAction;
            var pauseIfTabSwitch = inViewOptions.pauseIfTabSwitch;
            var pauseIfScrolledAway = inViewOptions.pauseIfScrolledAway;
            this._inviewHandlerScroll[inViewPercent] = this._inviewHandlerScroll[inViewPercent] || (new vdb.utils.InViewHandlerScroll(this._dependencies)).setInviewPercent(inViewPercent);
            this._inviewHandlerExternal[inViewPercent] = this._inviewHandlerExternal[inViewPercent] || (new vdb.utils.InViewHandlerExternal(this._dependencies)).setInviewPercent(inViewPercent);
            this._inviewHandlerBlur[inViewPercent] = this._inviewHandlerBlur[inViewPercent] || (new vdb.utils.InViewHandlerBlur(this._dependencies)).setInviewPercent(inViewPercent);
            var inViewCb = _inViewWrapper.bind(this, inViewAction);
            var outOfViewScroll = _outOfViewWrapper.bind(this, _isAutoPauseScroll.bind(this, pauseIfScrolledAway), outOfViewAction);
            var outOfViewBlur = _outOfViewWrapper.bind(this, _isAutoPauseBlur.bind(this, pauseIfTabSwitch), outOfViewAction);
            this._onInViewChangeScroll.push([inViewCb, outOfViewScroll]);
            this._onInViewChangeExternal.push([inViewCb, outOfViewScroll]);
            this._onInViewChangeBlur.push([inViewCb, outOfViewBlur]);
            this._inviewHandlerScroll[inViewPercent].addInViewChangeListener(this._onInViewChangeHandlerScroll);
            this._inviewHandlerExternal[inViewPercent].addInViewChangeListener(this._onInViewChangeHandlerExternal);
            this._inviewHandlerBlur[inViewPercent].addInViewChangeListener(this._onInViewChangeHandlerBlur);
        }, setPauseOnScroll:function(value) {
            this._pauseOnScroll = value;
        }, unbindInViewChangeEvent:function(inViewOptions) {
            var inViewAction = inViewOptions.inViewAction;
            var outOfViewAction = inViewOptions.outOfViewAction;
            var index = vdb.Utils.indexOf(this._onInViewChangeScroll, [inViewAction, outOfViewAction]);
            _unbindInViewHandler.call(this, this._onInViewChangeScroll, index);
            _unbindInViewHandler.call(this, this._onInViewChangeExternal, index);
            _unbindInViewHandler.call(this, this._onInViewChangeBlur, index);
        }, isInView:function(inviewPercent) {
            return this._inviewHandlerScroll[inviewPercent].isInView() && this._inviewHandlerBlur[inviewPercent].isInView() && this._inviewHandlerExternal[inviewPercent].isInView();
        }, ready:function(inviewPercent) {
            this._inView = this.isInView(inviewPercent);
        }};
    }(), [vdb.enums.Dependencies.ENVIRONMENT, vdb.enums.Dependencies.VIEWABILITY]);
    var ctx = {};
    vdb.context.Context = vdb.core.Class.extend(function() {
        function getHostContainer(elementOrId) {
            var container = typeof elementOrId === "string" ? document.getElementById(elementOrId) : elementOrId;
            if (!container) {
                var msg = "ERROR: can't find DOM container '" + elementOrId + "'";
                LOGGER.error(msg);
                throw new Error(msg);
            }
            return container;
        }
        function createContextNamespace(context) {
            var ctx = {};
            for (var p in vdb) {
                if (Object.prototype.hasOwnProperty.call(vdb, p)) {
                    ctx[p] = vdb[p];
                }
            }
            ctx.ads = vdb.Utils.copy(vdb.ads);
            ctx.player = vdb.Utils.copy(vdb.player);
            ctx.ctx = context;
            ctx.LOGGER_PARAMS_UPDATED = "LoggerParamsUpdated";
            return ctx;
        }
        function getLoggerParams() {
            return this._config.getLoggerParams();
        }
        function getATPdata() {
            return this._config.getATPData();
        }
        function setInViewTopBoundary(topBoundary) {
            this._inViewTopBoundary = topBoundary;
        }
        function getVisiblePercent() {
            return this.viewability.getVisiblePercent(this._inViewTopBoundary);
        }
        function getViewability() {
            return this.viewability.getViewableOpportunity();
        }
        function getViewableOpportunity() {
            return this.moatViewability.getViewableOpportunity();
        }
        function bindAdapter() {
            var firstTime = this._isAdapterBound === undefined;
            if (firstTime) {
                this._isAdapterBound = true;
            } else {
                if (!this._isTagRecreation) {
                    this.setVvuid();
                    var errorTracker = this.getInjector().resolveSync(Dependencies.ERROR_TRACKER);
                    errorTracker.trackError("js", "context", "context rebind");
                }
            }
            this.dispatchEvent({type:this.ctx.adapter.BIND, data:{firstTime:firstTime, isTagRecreation:!!this._isTagRecreation}});
            this._isTagRecreation = false;
        }
        function getParams() {
            return this._config.getParams();
        }
        function getParam(key) {
            return this.params && this.params[key];
        }
        function overrideAeg(aeg) {
            var overrider = this.getOverrider(vdb.enums.ClientOverrideEnum.AD_ENGINE);
            var adEngineOverrider = new vdb.override.AdEngineOverrider(overrider);
            if (!vdb.Utils.isEmpty(overrider)) {
                this.needToOverrideAds = true;
            }
            return adEngineOverrider.override(aeg || []);
        }
        function loadModule(name, callback) {
            var module = this.getExtraConfig(name, true);
            var extraManager = new vdb.modules.ExtraManager(name + "PlayerModule", document, this.ctx, this, true);
            LOGGER.debug("Load module", name, module);
            extraManager.loadExtras([module], callback);
        }
        function _checkAdBlocker() {
            this._adBlockerSniffer = new vdb.core.AdBlockerSniffer(this);
            this._adBlockerSniffer.check();
        }
        function getMoatViewability() {
            return this.moatViewability.getVisiblePercent();
        }
        function resolveDependencies() {
            return this.getInjector().provide(Dependencies.IAB_FACTORY, vdb.reporting.viewability.IabFactory).provideValue(Dependencies.VIEWABILITY, this.viewability).provideValue(Dependencies.MOAT_VIEWABILITY, this.moatViewability).provideValue(Dependencies.DEBUG_INFO, this.debugInfo).provideValue(Dependencies.ENVIRONMENT, this.environment).provideValue(Dependencies.URLS, this.urls).provideValue(Dependencies.CONFIG, this._config).provideValue(Dependencies.HOST_WINDOW_PROVIDER, new vdb.utils.HostWindowProvider($win)).provideClass(Dependencies.SMART_VIEWABILITY,
                vdb.utils.viewability.SmartViewability).provideClass(Dependencies.BASIC_TRACKER, vdb.reporting.BasicTracker).provideClass(Dependencies.PIXEL_TRACKER, vdb.tracking.PixelTracker).provideClass(Dependencies.ERROR_TRACKER, vdb.tracking.ErrorTracker).provideClass(Dependencies.IN_VIEW_MANAGER, vdb.utils.InViewManager).provideClass(Dependencies.FLASH_DETECTOR, vdb.utils.FlashDetector).resolveAll([Dependencies.BASIC_TRACKER, Dependencies.PIXEL_TRACKER, Dependencies.ERROR_TRACKER, Dependencies.IN_VIEW_MANAGER,
                Dependencies.SMART_VIEWABILITY, Dependencies.FLASH_DETECTOR]).then(function() {
                this._injector.provideValue(Dependencies.PARAMETERS_COMBINE, new vdb.utils.ParametersCombine(this._injector));
            }.bind(this));
        }
        function initApiMethods() {
            this["getLoggerParams"] = this.getLoggerParams.bind(this);
            this["getATPdata"] = this.getATPdata.bind(this);
            this["bindAdapter"] = this.bindAdapter.bind(this);
            this["isAdapterBound"] = this.isAdapterBound.bind(this);
            this["getParams"] = this.getParams.bind(this);
            this["overrideAeg"] = this.overrideAeg.bind(this);
            this["getVisiblePercent"] = this.getVisiblePercent.bind(this);
            this["getViewability"] = this.getViewability.bind(this);
            this["showAdBlockerOverlay"] = this.showAdBlockerOverlay.bind(this);
            this["detectIabViewability"] = this.detectIabViewability.bind(this);
            this["startAdChrome"] = this.startAdChrome.bind(this);
            this["getMoatViewability"] = this.getMoatViewability.bind(this);
        }
        var Dependencies = vdb.enums.Dependencies;
        var LOGGER = vdb.log.getLogger("Context");
        return{init:function(options, globalDefinitions, placement) {
            this._config = new vdb.model.Config(options, placement);
            this.hostContainer = getHostContainer(options["content"] || options["contentId"]);
            this.ctx = createContextNamespace(this);
            this.id = this._config.getId();
            this.generateGUID = this._config.getGenerateGuidMethod();
            this.playerId = this._config.getPlayerId();
            this.buyerCompanyId = this._config.getBuyerCompanyId();
            this.params = this._config.getParams();
            this.loggerParams = this._config.getLoggerParams();
            this.o2playerSettings = this._config.getO2playerSettings();
            this.playerType = this._config.getPlayerType();
            this.preview = this._config.getPreview();
            this.site = this._config.getSite();
            this.impressionTimestamp = this._config.getImpressionTimestamp();
            this.placement = placement;
            this.bidModifier = new vdb.context.BidModifier(options["bidModifier"] || window["vdbBidModifier"]);
            this.extensions = options["extensions"] || {};
            this.urls = new vdb.context.ContextUrls(null, this.playerId, this.preview);
            this.isVPAID = false;
            this.needToOverrideAds = false;
            window["vdbBidModifier"] = undefined;
            this.definitions = globalDefinitions.slice();
            this.eventBus = new vdb.EventBus;
            this.debugInfo = vdb.utils.DebugInfo.getInstance();
            this.reportingParameters = new vdb.reporting.ReportingParameters(this);
            this.environment = new vdb.reporting.Environment(this);
            initApiMethods.call(this);
            this.setLoggerParams({"imid":vdb.Utils.rand().join("").substring(1, 16), "uid":""});
            this.setVvuid(options["vvuid"]);
            var deps = {};
            deps[Dependencies.ROOT_CONTAINER] = this.hostContainer;
            deps[Dependencies.VIEWABILITY_ROOT_CONTAINER] = this.hostContainer;
            this.viewability = new vdb.utils.viewability.CTPFakeViewability(new vdb.utils.viewability.Viewability(deps), this);
            var isMoatDisabled = this.getMacro(vdb.constants.PlayerMacros.DISABLE_MOAT) === "1";
            this.moatViewability = new vdb.utils.viewability.CTPFakeViewability(new vdb.utils.viewability.MoatViewability(deps, isMoatDisabled), this);
            this.dependenciesReadyPromise = resolveDependencies.call(this);
            this.dependenciesReadyPromise.then(_checkAdBlocker.bind(this));
        }, triggerBlockContentCycle:function() {
            if (this["adBlockerSnifferResult"]) {
                _checkAdBlocker.call(this);
            }
            var adBlockerSnifferResult = this._adBlockerSniffer.getPromise();
            this["adBlockerSnifferResult"] = adBlockerSnifferResult;
            if (this.playbackMode === vdb.enums.player.PlaybackMode.AUTOPLAY && !this._config.isAggressiveMode()) {
                adBlockerSnifferResult.then(function(hasAdBlocker) {
                    if (hasAdBlocker) {
                        this.showAdBlockerOverlay();
                    }
                }.bind(this));
            }
        }, setLoggerParams:function(obj) {
            this._config.addLoggerParams(obj);
            vdb.Utils.copy(obj, this.loggerParams);
            this.dispatchEvent(this.ctx.LOGGER_PARAMS_UPDATED, this.loggerParams);
        }, setVvuid:function(vvuid) {
            vvuid = vvuid || this.generateGUID().toUpperCase();
            this.setLoggerParams({"vvuid":vvuid});
        }, setIsExpanded:function(isExpanded) {
            this.setLoggerParams({"epl":isExpanded ? "1" : "0"});
        }, getPlaybackMode:function() {
            return this.playbackMode;
        }, getLoggerParams:getLoggerParams, getATPdata:getATPdata, setInViewTopBoundary:setInViewTopBoundary, getVisiblePercent:getVisiblePercent, getViewability:getViewability, getViewableOpportunity:getViewableOpportunity, getMoatViewability:getMoatViewability, bindAdapter:bindAdapter, getParams:getParams, getParam:getParam, overrideAeg:overrideAeg, getBidModifier:function() {
            return this.bidModifier;
        }, getOverrider:function(overrider) {
            return this._config.getOverrider(overrider);
        }, getPlacementUrl:function(isAol) {
            return this.urls.getPlacementUrl(isAol);
        }, addEventListener:function(event, handler) {
            this.eventBus.addEventListener(event, handler);
        }, removeEventListener:function(event, handler) {
            this.eventBus.removeEventListener(event, handler);
        }, dispatchEvent:function() {
            var args = Array.prototype.slice.call(arguments);
            this.eventBus.dispatchEvent.apply(this.eventBus, args);
        }, getReferrer:function() {
            return this._config.getReferrer();
        }, getPlacementParameters:function() {
            var obj = this.getParameters();
            delete obj["bid"];
            delete obj["pid"];
            return obj;
        }, getBasicParameters:function() {
            return this._config.getBasicParameters();
        }, getParameters:function() {
            return this._config.getParameters();
        }, getPlatformSupport:function() {
            return vdb.Utils.getPlatformSupport(this.getFlashDetector().isFlashAvailable());
        }, getFlashDetector:function() {
            return this._injector.resolveSync(Dependencies.FLASH_DETECTOR);
        }, setParam:function(key, value) {
            this._config.setParam(key, value);
        }, getMacro:function(macro) {
            return this._config.getMacro(macro);
        }, getAllMacros:function() {
            return this._config.getAllMacros();
        }, getReportingMacros:function() {
            this._config.getReportingMacros();
        }, initContext:function() {
            return this.dependenciesReadyPromise.then(function() {
                var definitions = this.definitions;
                var errors = [];
                for (var def;definitions.length > 0;) {
                    def = definitions.shift();
                    try {
                        def(this.ctx, this);
                    } catch (error) {
                        LOGGER.error(error);
                        errors.push(error);
                    }
                }
                if (errors.length > 0) {
                    throw new Error("ERROR: can't initialize context:\n" + errors.join("\n"));
                }
            }.bind(this));
        }, createPlayer:function() {
            return this.dependenciesReadyPromise.then(function() {
                this.playerAPI = this.ctx.createPlayerAPI(this.hostContainer);
                return this.playerAPI;
            }.bind(this));
        }, createVPAIDPlayer:function(vpaidAPI, vpaidOptions) {
            return this.dependenciesReadyPromise.then(function() {
                this.playerAPI = this.ctx.createPlayerAPI(this.hostContainer, vpaidAPI, vpaidOptions);
                return this.playerAPI;
            }.bind(this));
        }, runPlugin:function(params) {
            var moduleUrl;
            var type = params["type"];
            var hidden = false;
            var isolated = true;
            var cdnUrl = this.urls.getBaseUrls("cdn");
            switch(type) {
                case "brightcove":
                    moduleUrl = cdnUrl + "/js/plugins/brightcove_plugin-17.16.dev180-min.js";
                    isolated = false;
                    break;
                case "flowplayer":
                    moduleUrl = cdnUrl + "/js/plugins/flowplayer_plugin-17.16.dev180-min.js";
                    hidden = true;
                    break;
                default:
                    ;
            }
            if (!moduleUrl) {
                throw new Error("Bad or undefined module type: " + type);
            }
            return this.ctx.createModuleLoader({container:this.hostContainer, scriptUrls:moduleUrl}).setHidden(hidden).setIsolated(isolated).load(function(iwin) {
                iwin["init"](params);
            });
        }, setPlayerType:function(type) {
            this._config.setPlayerType(type);
        }, setBaseUrls:function(override) {
            this.urls.setup(override, this.playerId, this.preview);
        }, getBaseUrls:function(url) {
            return this.urls.getBaseUrls(url);
        }, getCdnUrl:function(relativePath) {
            return this.urls.getCdnUrl(relativePath);
        }, getHtml5PlayerUrl:function() {
            return this.getCdnUrl("player-hls.js");
        }, getUnmuteOverlayUrl:function() {
            return this.getCdnUrl("js/unmute-overlay.html");
        }, getExtraConfig:function(name, isBlocking) {
            return{"url":this.urls.getExtraUrl(name), "name":name, "blocking":isBlocking};
        }, getPortalUrl:function(relativePath) {
            return this.urls.getPortalUrl(relativePath);
        }, getDemoUrl:function() {
            return this.urls.getDemoUrl();
        }, getAdServerUrl:function(relativePath, parameters) {
            return this.urls.getAdServerUrl(relativePath, parameters);
        }, getAdTrackingUrl:function(relativePath, parameters) {
            return this.urls.getAdTrackingUrl(relativePath, parameters);
        }, getInlinePlayerUrl:function() {
            return this.urls.getInlinePlayerUrl();
        }, isAdapterBound:function() {
            return this._isAdapterBound || false;
        }, showAdBlockerOverlay:function() {
            loadModule.call(this, "adBlockerOverlay", function() {
                this.ctx.AdBlockerOverlay.draw(this.playerAPI.getElement(), function() {
                    this._isTagRecreation = true;
                    this.playerAPI.reloadPlayer.call(this.playerAPI);
                }.bind(this));
            }.bind(this));
        }, drawErrorMessage:function(container, message) {
            loadModule.call(this, "errorMessages", function() {
                this.errorMessage = this.ctx.ErrorMessage.draw(container, message);
                if (this.playerAPI.adapter) {
                    this.playerAPI.adapter.hideSpinner();
                }
                if (this.playerAPI.loadingPlaceholder) {
                    this.playerAPI.loadingPlaceholder.hide();
                }
            }.bind(this));
        }, clearErrorMessage:function() {
            vdb.Utils.removeFromParent(this.errorMessage);
        }, detectIabViewability:function() {
            return new vdb.Promise(function(resolve, reject) {
                this.getInjector().resolve(Dependencies.IAB).then(function(iab) {
                    iab.setCallbacks(function() {
                    }, resolve, reject);
                });
            }.bind(this));
        }, startAdChrome:function(code, ids) {
            var getIds = typeof ids === "function" ? ids : function() {
                return JSON.parse(ids);
            };
            (new vdb.reporting.moat.AdTracker(this, code, getIds)).singleRun(true);
        }, getAdParams:function() {
            return this._config.getAdParams();
        }, updateAdParams:function(params) {
            this._config.updateAdParams(params);
        }, playsNativeInline:function() {
            return this._config.playsNativeInline();
        }, getInjector:function() {
            if (!this._injector) {
                this._injector = new vdb.ioc.Injector;
            }
            return this._injector;
        }, getStripServiceUrl:function() {
            return this.urls.getStripServiceUrl();
        }, getAdBlockerSnifferPromise:function() {
            return this._adBlockerSniffer.getPromise();
        }, getDirectVideoUrl:function() {
            return this.urls.getDirectVideoUrl();
        }, getCoveringsSkinLocation:function() {
            return this._config.coveringsSkinLocation || {};
        }};
    }());
    vdb.api = {};
    vdb.api.PlayerAPIBase = vdb.core.Class.extend(function() {
        function executeDeferCommands() {
            for (var cmd;cmd = this.deferCommands.shift();) {
                cmd();
            }
        }
        function onAdapterCreated(adapter) {
            LOGGER.debug("onAdapterCreated", adapter);
            this.adapter = adapter;
            this.player = this.adapter.player;
            for (var event in this.handlers) {
                var listener = this.handlers[event];
                if (this.handlers.hasOwnProperty(event) && typeof listener !== "function") {
                    this.adapter.addEventListener(event, listener.handler);
                }
            }
            this.eventProxyAdapter = new vdb.EventProxyAdapter(this);
            executeDeferCommands.call(this);
            new vdb.reporting.ContextReporting(this._context);
            vdb.events.EventContext.bindOnce(adapter, PlayerEvent.PLAYER_READY, function() {
                this._context.pageTracker = this._context.pageTracker || new vdb.tracking.PageTracker(this._context);
                this._context.pageTracker.pageInfo();
            }.bind(this));
            adapter.addEventListener(PlayerEvent.CONTEXT_ENDED, function() {
                this._context.setVvuid();
            }.bind(this));
        }
        function onConfigLoad(config) {
            this.updateConfig(config);
        }
        function disposeAdapter() {
            if (this.adapter) {
                this.adapter.dispose();
                this.adapter = undefined;
            }
        }
        function loadCoreExtras(callback) {
            this._extraManager = new vdb.modules.ExtraManager(vdb.extras.ExtraManagerType.CORE, document, this._ctx, this._context);
            this._extraManager.addEventListener(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_LOADED, function() {
                this._extraManager.initExtras(this._context);
            }.bind(this));
            this._extraManager.addEventListener(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_RELEASED, function() {
                if (callback) {
                    callback();
                }
            });
            this._extraManager.loadExtras((new vdb.extras.ExtrasResolver(this.uiTemplate)).getCoreExtras());
        }
        function loadCoreExtras(callback) {
            var isMoatDisabled = this._context.getMacro(PlayerMacros.DISABLE_MOAT) === "1";
            var coreExtras;
            this._extraManager = new vdb.modules.ExtraManager(vdb.extras.ExtraManagerType.CORE, document, this._ctx, this._context);
            this._extraManager.addEventListener(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_LOADED, function() {
                this._extraManager.initExtras(this._context);
            }.bind(this));
            this._extraManager.addEventListener(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_RELEASED, function() {
                if (callback) {
                    callback();
                }
            });
            coreExtras = (new vdb.extras.ExtrasResolver(this.uiTemplate)).getCoreExtras();
            if (isMoatDisabled) {
                coreExtras = utl.filterArr(coreExtras, function(extra) {
                    return extra.name !== "moat";
                });
            }
            this._extraManager.loadExtras(coreExtras);
        }
        var LOGGER = vdb.log.getLogger("PlayerAPIBase");
        var PlayerEvent = vdb.constants.PlayerEvent;
        var utl = vdb.Utils;
        var PlayerMacros = vdb.constants.PlayerMacros;
        return{init:function(container, context) {
            vdb.constants.PlayerEvent.exposeGlobal();
            this._context = context;
            this._ctx = context.ctx;
            this._context.api = this;
            this.ver = vdb.ver();
            this._container = container;
            this._element = this._playerWrapper = container;
            this.deferCommands = [];
            this._context.addEventListener(this._ctx.adapter.CREATED, onAdapterCreated.bind(this));
            this._context.addEventListener(this._ctx.adapter.DESTROY, this.destroy.bind(this));
            this._context.addEventListener(vdb.loader.PlacementLoader.LOADED, onConfigLoad.bind(this));
            if (this._context.playerId) {
                (new vdb.loader.PlacementLoader(this._context)).load();
            }
        }, updateConfig:function(config) {
            this._lastConfig = config;
            this.uiTemplate = config["playerTemplate"];
            this.config = config;
            var playerWidget = this.playerWidget = config["playerWidget"];
            loadCoreExtras.call(this, function() {
                setTimeout(this.createAdapter.bind(this), 0);
            }.bind(this));
        }, addEventListener:function(event, handler) {
            if (event && handler && typeof handler === "function") {
                handler._registeredHandler = handler.bind(this);
                if (!this.adapter && !this._error) {
                    this.deferCommands.push(function() {
                        this.addEventListener(event, handler._registeredHandler);
                    }.bind(this));
                } else {
                    this.eventProxyAdapter.addEventListener(event, handler._registeredHandler);
                }
            }
        }, removeEventListener:function(event, handler) {
            var handlerToRemove = handler && handler._registeredHandler || handler;
            if (!this.adapter) {
                this.deferCommands.push(function() {
                    this.removeEventListener(event, handlerToRemove);
                }.bind(this));
            } else {
                this.eventProxyAdapter.removeEventListener(event, handlerToRemove);
            }
        }, dispatchEvent:function(event) {
            if (this.eventProxyAdapter) {
                this.eventProxyAdapter.dispatchEvent(event.type, event);
            }
        }, destroy:function() {
            if (this.adapter) {
                this._beforUnloadHandler();
                disposeAdapter.call(this);
                var hostContainer = this._container;
                hostContainer["vdb_Context"].eventBus.removeAllListeners();
                delete hostContainer["vdb_Context"];
                delete hostContainer["vdb_Player"];
                if (this._playerWrapper.parentNode) {
                    this._playerWrapper.parentNode.removeChild(this._playerWrapper);
                }
                vdb.events.removeEventListener($win, "beforeunload", this._beforUnloadHandler);
                vdb.removeContext(this._context.id);
                if (this._resizeHandler) {
                    vdb.events.removeEventListener($win, "resize", this._resizeHandler);
                }
                LOGGER.debug(this._context.id, "destroyed");
            }
        }, createAdapter:function() {
        }};
    }());
    vdb.define(function(ctx, context) {
        ctx.adapter = {};
        ctx.adapter.BaseAdapter = {};
        ctx.adapter.BaseAdapter = vdb.EventBus.extend(function() {
            var compareLogEntries = function(a, b) {
                return a["ts"] - b["ts"];
            };
            var getLog = function(primaryLog, secondaryLog) {
                return secondaryLog ? primaryLog.concat(secondaryLog).sort(compareLogEntries) : primaryLog;
            };
            return{init:function(uiTemplate, container) {
                this._uiTemplate = uiTemplate;
                this._rootContainer = container;
                context.addEventListener(vdb.constants.PlayerEvent.IN_VIEW, this.inView.bind(this));
                context.addEventListener(vdb.constants.PlayerEvent.OUT_OF_VIEW, this.outOfView.bind(this));
                this._super();
            }, addEventListener:function(event, handler) {
                this._super(event, handler);
            }, removeEventListener:function(event, handler) {
                this._super(event, handler);
            }, onBidUpdated:function(bid) {
            }, inView:function() {
            }, outOfView:function() {
            }, play:function() {
            }, playVideoByIndex:function() {
            }, pause:function() {
            }, getPixelsLog:function(secondaryLog) {
                return getLog(context.debugInfo.pixelsLog, secondaryLog);
            }, getRequestsLog:function(secondaryLog) {
                return getLog(context.debugInfo.requestsLog, secondaryLog);
            }, getVersion:function() {
            }, mute:function() {
            }, volume:function(vol) {
            }, caption:function() {
            }, seekTo:function(time) {
            }, sendKey:function(keyCode) {
            }, resolvePlaceholders:function(value) {
            }, rewind:function() {
            }, enterFullscreen:function() {
            }, exitFullscreen:function() {
            }, getPlayerState:function() {
            }, setResponsive:function() {
            }, getCurrentVideo:function() {
            }, getCurrentVideoId:function() {
            }, getCurrentVideoIndex:function() {
            }, getNextVideo:function() {
            }, getNextVideoIndex:function() {
            }, getVolume:function() {
            }, setVideosToPlay:function() {
            }, getAdDuration:function(prop) {
            }, getFlashVersion:function() {
            }, getPlayerType:function() {
            }, isAd:function() {
            }, onWinResize:function() {
            }, dispose:function() {
            }, getContainer:function() {
                return this._rootContainer;
            }, getVideoContainer:function() {
                return this._rootContainer;
            }, getUiTemplate:function() {
                return this._uiTemplate;
            }, isPlaying:function() {
            }, showUIExtras:function() {
                context.dispatchEvent(vdb.constants.PlayerEvent.SHOW_UI_EXTRAS);
            }, hideUIExtras:function() {
                context.dispatchEvent(vdb.constants.PlayerEvent.HIDE_UI_EXTRAS);
            }, getContext:function() {
                return context;
            }, dispatchPlayerApiInteractionEvent:function() {
            }, hideSpinner:function() {
            }};
        }());
        ctx.adapter.CREATED = "AdapterCreatedEvent";
        ctx.adapter.BIND = "AdapterBind";
        ctx.adapter.NOT_SUPPORTED = "AdapterNotSupportedEvent";
        ctx.adapter.DESTROY = "AdapterDestroyEvent";
    });

    vdb.constants.CssClass = {FLOATER:{INNER_FLOATING_CONTAINER:"inner-floating-container", SIDE_VIEW_CLOSE_BUTTON:"side-view-close-button", O2_IN_SIDE_VIEW:"o2-in-side-view"}, SCRIPT_API_WRAPPER:"o2-script-api-wrapper"};
    vdb.define(function(ctx, context) {
        if (window != top) {
            var checkHosts = function() {
                var topUrl = vdb.utils.WindowUtil.getTopMostLocation();
                var topmostUrl = vdb.Utils.parseUrl(topUrl);
                var iframeUrl = vdb.Utils.parseUrl(location.href);
                var topmostHost = topmostUrl.host;
                var iframeHost = iframeUrl.host;
                if (topmostHost != iframeHost && topmostHost.indexOf(iframeHost) < 0) {
                    context.getInjector().resolve(vdb.enums.Dependencies.ERROR_TRACKER).then(function(tracker) {
                        tracker.trackError("domainDiscrepancy", "iframe", {"topmostDomain":topmostHost, "hostDomain":iframeHost});
                    });
                }
            }()
        }
    });
    vdb.enums.AdEngineType = {VAST:"VAST", EMBED_VAST:"VIDEO", IMA:"IMA"};
    vdb.enums.AdReason = {NO_ADS:"NO_ADS", AD_GROUP_FAILED:"AD_GROUP_FAILED"};
    vdb.enums.AdStrategyType = {CONTENT_BASED:"CONTENT_BASED", ADSET_BASED:"ADSET_BASED"};
    vdb.enums.AdType = {PREROLL:"Preroll", MIDROLL:"Midroll", OVERLAY:"Overlay", ALL:"All"};
    vdb.enums.AdUserInteraction = {EXPAND:"expand", COLLAPSE:"collapse", ACCEPT_INVITATION:"acceptInvitation", ACCEPT_INVITATION_LINEAR:"acceptInvitationLinear", CLOSE:"close", CLOSE_LINEAR:"closeLinear"};
    vdb.enums.ApiType = {VPAID:"vpaid"};
    vdb.enums.ClickToVastInteraction = {PLAY:"play", PAUSE:"pause", MUTE:"mute", UNMUTE:"unmute", ENTER_FULLSCREEN:"fullscreen", EXIT_FULLSCREEN:"unfullscreen", REPLAY:"replay"};
    vdb.enums.ClientOverrideEnum = {PLAYER_SIZE:"playerSizeOverride", EXTRAS:"extrasOverride", AD_ENGINE:"aegOverride", VIDEOS:"videoOverride", COMPANIONS:"companionsSettingsOverride"};
    vdb.enums.CompanionSelectorType = {ID:"id", CLASS:"class"};
    vdb.enums.ContextParams = {FLOATING_PLAYER:"floatingPlayer", IS_FLOATED:"isFloated", IS_LIGHTBOX_ACTIVE:"isLightboxActive"};
    vdb.enums.EndCardType = {UP_NEXT:"next", MOSAIC:"carousel"};
    vdb.enums.Html5PlayerEventType = {FORCE_STOP:"PlayerForceStop", REPLAY:"PlayerReplayEvent"};
    vdb.enums.player = {};
    vdb.enums.player.MobilePlaybackMode = {AS_DESKTOP:"as_desktop", AUTOPLAY:"autoplay", AUTOPLAY_IN_VIEW:"autoplay_when_in_view", AUTOPLAY_AD_ONLY:"autoplay_ad_only", CLICK:"click"};
    vdb.enums.player.PlaybackMode = {AUTOPLAY:"autoplay", AUTOPLAY_IN_VIEW:"autoplay_when_in_view", AUTOPLAY_AD_ONLY:"autoplay_ad_only", MOUSEOVER:"mouseover", CLICK:"click"};
    vdb.enums.player.SoundMode = {MOUSEOVER:"mouseover", MOUSEOVER_OFF:"mouseover_off", MUTED:"muted", NORMAL:"normal"};
    vdb.enums.PlayerType = {FLASH:"flash", HTML5:"html5", SMART:"smart", YOUTUBE:"youtube", YOUKU:"youku", O2UNIT:"o2unit", OATH_SDK:"VRM_plgn"};
    vdb.enums.ReportingMacros = {ADAP_VIEWABLE_OPPORTUNITY:["[ADAP_VIEWABLE_OPPORTUNITY]"], ADSEQ:["{adNumber}"], APID:["[APID]"], ASSETURI:["[ASSETURI]"], AUTOPLAY:["|ap|", "[AUTOPLAY]"], BEON_CW:["|beoncw|", "[BEON_CW]"], BEON_VIDEO_ID:["|beonvid|", "[BEON_VIDEO_ID]"], BID:["[BID]"], CACHE_BUSTER:["[cachebuster]", "[CACHEBUSTER]", "[CACHE_BUSTER]", "[CACHE_BREAKER]", "[CACHEBUSTING]"], CONTAINER_HEIGHT:["[container_height]", "[CONTAINER_HEIGHT]"], CONTAINER_WIDTH:["[container_width]", "[CONTAINER_WIDTH]"],
        CONTENTPLAYHEAD:["[CONTENTPLAYHEAD]"], DEPTH:["[DEPTH]"], DE_RSS_ID:["[DE_RSS_ID]"], DE_URL:["|DE_URL|", "[DE_URL]"], DOMAIN:["[DOMAIN_ROOT]"], DOMAIN_NAME:["[DOMAIN_NAME]"], ECPM:["[ECPM]"], FLASH_SUPPORT:["[FLASH_SUPPORT]"], FOCUS:["[P_VW_ACTIVE]", "<a.active>"], LOCATION_LAT:["[LOCATION_LAT]"], LOCATION_LON:["[LOCATION_LON]"], MOAT_VIEWABILITY:["[MOAT_PREBID]"], MUTED:["|muted|", "[MUTED]"], NULLABLE:["[MCC]", "[MNC]", "[APPNAME]"], PID:["[PID]"], PLAYER_COMPANY_ID:["[PLAYER_COMPANY_ID]"], PLAYER_SIZE:["[P_VW_SIZE]",
            "<a.psize>"], RSS_ID:["[RSS_ID]"], TIMESTAMP:["[timestamp]", "[TIMESTAMP]"], VIDEO_DESCRIPTION:["[VIDEO_DESCRIPTION]", "VIDEO_DESCRIPTION"], VIDEO_DETAIL_PAGE:["[VIDEO_DETAIL_PAGE]", "VIDEO_DETAIL_PAGE"], VIDEO_DURATION:["[VIDEO_DURATION]", "VIDEO_DURATION"], VIDEO_FILE_URL:["[VIDEO_FILE_URL]"], VIDEO_HEIGHT:["[video_height]", "[VIDEO_HEIGHT]"], VIDEO_ID:["[VIDEO_ID]", "VIDEO_ID"], VIDEO_KEYWORDS:["[VIDEO_KEYWORDS]", "VIDEO_KEYWORDS"], VIDEO_PERCENT:["|%|", "[VIDEO_PERCENT]"], VIDEO_TITLE:["[VIDEO_TITLE]",
            "VIDEO_TITLE"], VIDEO_URL:["VIDEO_URL", "|URL|", "[CONTENT_URL]", "EMBEDDING_PAGE_URL", "[URL]", "[A_D_PAGEURL]"], VIDEO_WIDTH:["[video_width]", "[VIDEO_WIDTH]"], VIEWABILITY:["[P_VW_VIEWABLE]", "<a.viewable>"], VIEWABLE_OPPORTUNITY:["[P_VW_VIEWABLE_OPPORTUNITY]", "<a.viewableOpportunity>"], VVUID:["[VVUID]"]};
    (function() {
        var macros = vdb.enums.ReportingMacros;
        var values = {};
        for (var k in macros) {
            if (Object.prototype.hasOwnProperty.call(macros, k)) {
                values[k] = macros[k][0];
            }
        }
        macros.placeholder = values;
    })();
    vdb.enums.UserInteraction = {PLAY:"Play", PAUSE:"Pause", LOGO_CLICK:"LogoClick", FLOATER_DOCK:"FloaterDock", MUTE:"Mute", UNMUTE:"Unmute", VOLUME:"Volume", CC_DEACTIVATED:"CCDeactivated", CC_ACTIVATED:"CCActivated", SEEK_START:"SeekStart", SEEK_END:"SeekEnd", ENTER_FULLSCREEN:"EnterFullscreen", EXIT_FULLSCREEN:"ExitFullscreen", REPLAY:"Replay", VIDEO:"Video", CC_SELECT_LANGUAGE:"SelectLanguage", HOVER:"PlayerHover", UNMUTE_OVERLAY_CLICK:"UnmuteOverlayClick"};
    vdb.enums.VastEvents = {IMPRESSION:"impression", CREATIVE_VIEW:"creativeView", START:"start", MIDPOINT:"midpoint", FIRST_QUARTILE:"firstQuartile", THIRD_QUARTILE:"thirdQuartile", COMPLETE:"complete", MUTE:"mute", UNMUTE:"unmute", PAUSE:"pause", REWIND:"rewind", RESUME:"resume", FULLSCREEN:"fullscreen", EXPAND:"expand", COLLAPSE:"collapse", ACCEPT_INVITATION:"acceptInvitation", CLOSE:"close", SKIP:"skip", CLICK:"click", PROGRESS:"progress"};
    vdb.enums.video = {};
    vdb.enums.video.ProjectionType360 = {EQUIRECTANGULAR:"equirectangular", FISHEYE:"fisheye", THREESIXTYFLY:"360fly"};
    vdb.enums.video.SubscriptMode = {OFF:"OFF", ON:"ON", AUTO_DETECT:"AUTO_DETECT"};
    vdb.enums.video.Type = {THREE_SIXTY:"360", VOD:"VOD", LIVE:"Live"};
    vdb.enums.VideoSourceType = {ENVRMNT:"envrmnt", FILE:"file", YOUKU:"youku", YOUTUBE:"youtube"};
    vdb.enums.VrRendererType = {O2:"O2", ENVRMNT:"ENVRMNT"};
    vdb.events.PlayerErrorEvent = {BID_UPDATE_FAILED:"bidUpdateFailed", NO_VIDEOS_TO_PLAY:"noVideosToPlay", SERVER_ERROR:"serverError"};
    vdb.events.VideoEvent = {MOUSE_OVER_VIDEO:"RollOverVideo", THIRD_PARTY_POSTER_AVAILABLE:"ThirdPartyPosterAvailable", VIDEO_BUFFERING_END:"VideoBufferingEnd", VIDEO_BUFFERING_START:"VideoBufferingStart", VIDEO_CLICK:"VideoClickEvent", VIDEO_END:"VideoEndEvent", VIDEO_ERROR:"VideoErrorEvent", VIDEO_FORCE_END:"VideoForceEnd", VIDEO_LOAD:"VideoLoadEvent", VIDEO_METADATA:"VideoMetaDataEvent", VIDEO_PAUSE:"VideoPauseEvent", VIDEO_PLAY:"VideoPlayEvent", VIDEO_PROGRESS:"VideoProgressEvent", VIDEO_RESUME:"VideoResumeEvent",
        VIDEO_SEEK:"VideoSeekEvent", VIDEO_SEEKEND:"VideoSeekEnd", VIDEO_SEEKSTART:"VideoSeekStart", VIDEO_STARTED:"VideoStartEvent", VIDEO_TIMEUPDATE:"VideoTimeUpdateEvent", VIDEO_TOUCH_START:"VideoTouchStartEvent", VIDEO_VOLUME_CHANGED:"VideoVolumeChangedEvent", VIDEO_WAITING:"VideoWaiting", VIDEO_WEBKIT_BEGIN_FULLSCREEN:"VideoWebkitBeginFullscreen", VIDEO_WEBKIT_END_FULLSCREEN:"VideoWebkitEndFullscreen"};
    vdb.events.VpaidApiEvent = {AD_VIDEO_FIRST_QUARTILE:"AdVideoFirstQuartile", AD_VIDEO_MIDPOINT:"AdVideoMidpoint", AD_VIDEO_THIRD_QUARTILE:"AdVideoThirdQuartile", AD_VIDEO_COMPLETE:"AdVideoComplete"};
    vdb.events.VPAIDEvent = {AD_LOADED:"AdLoaded", AD_STARTED:"AdStarted", AD_STOPPED:"AdStopped", AD_SKIPPED:"AdSkipped", AD_SKIPPABLE_STATE_CHANGE:"AdSkippableStateChange", AD_SIZE_CHANGE:"AdSizeChange", AD_LINEAR_CHANGE:"AdLinearChange", AD_DURATION_CHANGE:"AdDurationChange", AD_EXPANDED_CHANGE:"AdExpandedChange", AD_REMAINING_TIME_CHANGE:"AdRemainingTimeChange", AD_VOLUME_CHANGE:"AdVolumeChange", AD_IMPRESSION:"AdImpression", AD_VIDEO_START:"AdVideoStart", AD_VIDEO_FIRST_QUARTILE:"AdVideoFirstQuartile",
        AD_VIDEO_MIDPOINT:"AdVideoMidpoint", AD_VIDEO_THIRD_QUARTILE:"AdVideoThirdQuartile", AD_VIDEO_COMPLETE:"AdVideoComplete", AD_CLICK_THRU:"AdClickThru", AD_INTERACTION:"AdInteraction", AD_USER_ACCEPT_INVITATION:"AdUserAcceptInvitation", AD_USER_MINIMIZE:"AdUserMinimize", AD_USER_CLOSE:"AdUserClose", AD_PAUSED:"AdPaused", AD_PLAYING:"AdPlaying", AD_LOG:"AdLog", AD_ERROR:"AdError"};
    vdb.extras.ExtraType = {FLASH:"FLASH", JS:"JS", CORE:"CORE"};
    vdb.extras.ExtraUiPositionType = {DEFAULT:"DEFAULT", RIGHT:"RIGHT", SLIDING_RIGHT:"SLIDING_RIGHT", BOTTOM:"BOTTOM"};
    vdb.modules.LoadingPlaceholder = vdb.core.Class.extend(function() {
        var createPlaceholder = function() {
            var containerStyles = "display: none; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-position: center; background-repeat: no-repeat; background-size: cover;" + "-webkit-transition: opacity ease " + this.TRANSITION_DURATION + "s; -moz-transition: opacity ease " + this.TRANSITION_DURATION + "s; transition: opacity ease " + this.TRANSITION_DURATION + "s;";
            var textWrapperStyles = "position: absolute; top: 11px; left: 11px; display: inline-block; font: 12px Arial; color: rgba(255,255,255,0.8); z-index: 1;";
            this._container = vdb.Utils.createElement("div", {"style":containerStyles}, this._parent);
            vdb.Utils.createElement("div", {"style":textWrapperStyles}, this._container, this.TEXT);
        };
        var bindEvents = function() {
            var player = this._adapter.player;
            var hidePlaceholder = this.hide.bind(this);
            this._eventContext.unbind();
            vdb.events.EventContext.bind(player, vdb.constants.PlayerEvent.CONTEXT_STARTED, hidePlaceholder).link(this._eventContext);
            vdb.events.EventContext.bind(player, vdb.constants.PlayerEvent.VIDEO_POSTER_READY, hidePlaceholder).link(this._eventContext);
        };
        return{init:function(context, parent) {
            this._context = context;
            this._parent = parent;
            this._eventContext = vdb.events.EventContext.empty();
            this._isVisible = false;
            this._adapterPromise = context.api.getAdapterPromise();
            this._adapterPromise.then(function(adapter) {
                this._adapter = adapter;
                if (adapter.getPlayerType() !== vdb.enums.PlayerType.HTML5) {
                    this._disabled = true;
                }
            }.bind(this));
            createPlaceholder.call(this);
        }, show:function(imageUrl) {
            if (imageUrl && !this._disabled) {
                vdb.Utils.setStyle(this._container, {backgroundImage:'url("' + imageUrl + '")', display:"block"});
                this._isVisible = true;
                this._adapterPromise.then(function() {
                    if (this._disabled) {
                        this.hide();
                    } else {
                        bindEvents.call(this);
                    }
                }.bind(this));
            }
        }, hide:function() {
            if (!this._isVisible) {
                return;
            }
            this._isVisible = false;
            this._eventContext.unbind();
            this._container.style.opacity = 0;
            setTimeout(function() {
                vdb.Utils.setStyle(this._container, {display:"none", opacity:1});
            }.bind(this), this.TRANSITION_DURATION * 1E3);
        }, getContainer:function() {
            return this._container;
        }, TRANSITION_DURATION:.5, TEXT:"Content loading..."};
    }());
    vdb.override = {};
    vdb.override.PlayerInitializationOverrider = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("PlayerInitializationOverrider");
        return{init:function() {
            LOGGER.debug("init");
        }, override:function(uiTemplate, playsNativeInline) {
            var PlaybackMode = vdb.enums.player.PlaybackMode;
            var MobilePlaybackMode = vdb.enums.player.MobilePlaybackMode;
            var mobileInit;
            if (!playsNativeInline) {
                uiTemplate["initialization"] = PlaybackMode.CLICK;
            } else {
                if (vdb.Utils.browser.isMobile()) {
                    mobileInit = (uiTemplate["mobileInit"] || MobilePlaybackMode.AS_DESKTOP).toLowerCase();
                    if (mobileInit !== MobilePlaybackMode.AS_DESKTOP) {
                        uiTemplate["initialization"] = mobileInit;
                    } else {
                        if (uiTemplate["initialization"] === PlaybackMode.MOUSEOVER) {
                            uiTemplate["initialization"] = PlaybackMode.CLICK;
                        }
                    }
                }
            }
        }};
    }());
    vdb.override.PlayerSizeOverrider = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("PlayerSizeOverrider");
        return{init:function(context) {
            LOGGER.debug("init");
            this._overrider = context.getOverrider(vdb.enums.ClientOverrideEnum.PLAYER_SIZE);
        }, override:function(uiTemplate) {
            if (!vdb.Utils.isEmpty(this._overrider)) {
                uiTemplate["playerWidth"] = this._overrider["playerWidth"];
                uiTemplate["playerHeight"] = this._overrider["playerHeight"];
                uiTemplate["videoLocation"]["w"] = this._overrider["playerWidth"];
                uiTemplate["videoLocation"]["h"] = this._overrider["playerHeight"];
            }
        }};
    }());
    vdb.override.PlayerSoundOverrider = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("PlayerInitializationOverrider");
        var isAutoplay = function(playbackMode) {
            var PlaybackMode = vdb.enums.player.PlaybackMode;
            return[PlaybackMode.AUTOPLAY, PlaybackMode.AUTOPLAY_AD_ONLY, PlaybackMode.AUTOPLAY_IN_VIEW].indexOf(playbackMode) !== -1;
        };
        return{init:function() {
            LOGGER.debug("init");
        }, override:function(uiTemplate) {
            if (vdb.Utils.browser.restrictsAutoplayWithSound() && isAutoplay(uiTemplate["initialization"])) {
                uiTemplate["sound"] = vdb.enums.player.SoundMode.MUTED;
            }
        }};
    }());
    vdb.override.ResponsiveOverrider = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("Responsive Overrider");
        var updateDimensionsAndLocation = function(obj, widthMultiplier, videoHeight, computedVideoHeight) {
            obj["w"] = vdb.Utils.round(obj["w"] * widthMultiplier);
            obj["x"] = ~~(obj["x"] * widthMultiplier);
            obj["h"] = ~~(obj["h"] - videoHeight + computedVideoHeight);
        };
        var updateRegion = function(obj, widthMultiplier, verticalOffset) {
            obj["w"] = ~~(obj["w"] * widthMultiplier);
            obj["x"] = ~~(obj["x"] * widthMultiplier);
            obj["y"] += verticalOffset;
        };
        return{init:function() {
            LOGGER.debug("init");
        }, override:function(uiTemplate, container) {
            var playerWidth = uiTemplate["playerWidth"];
            var playerHeight = uiTemplate["playerHeight"];
            var videoLocation = uiTemplate["videoLocation"];
            var controlsSkinLocation = uiTemplate["controlsSkinLocation"];
            var coveringsSkinLocation = uiTemplate["coveringsSkinLocation"];
            var containerWidth = container.clientWidth;
            var containerHeight = container.clientHeight;
            var extras = uiTemplate["extras"];
            var widthMultiplier = containerWidth / playerWidth;
            var videoHeight = videoLocation["h"];
            var nonVideoHeight = playerHeight - videoHeight;
            var computedVideoHeight = containerHeight - nonVideoHeight;
            var i = -1;
            var extrasCount;
            var extra;
            var region;
            var regionWidth;
            var config;
            var opt;
            uiTemplate["playerWidth"] = ~~containerWidth;
            uiTemplate["playerHeight"] = ~~containerHeight;
            updateDimensionsAndLocation(videoLocation, widthMultiplier, videoHeight, computedVideoHeight);
            updateDimensionsAndLocation(controlsSkinLocation, widthMultiplier, videoHeight, computedVideoHeight);
            updateDimensionsAndLocation(coveringsSkinLocation, widthMultiplier, videoHeight, computedVideoHeight);
            if (vdb.Utils.isArray(extras)) {
                for (extrasCount = extras.length;++i < extrasCount;) {
                    extra = extras[i];
                    region = extra["region"];
                    if (region) {
                        regionWidth = region["w"];
                        updateRegion(region, widthMultiplier, region["y"] > videoLocation["y"] ? videoLocation["h"] - videoHeight : 0);
                    }
                    config = extra["config"];
                    if (config) {
                        for (opt in config) {
                            if (opt === "nextButton") {
                                config[opt]["x"] = region["w"] - regionWidth + config[opt]["x"];
                            }
                        }
                    }
                }
            }
        }};
    }());
    vdb.override.VideoOverrider = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("Video Overrider");
        var AVAILABLE_PROPERTIES = ["name", "thumbnail", "fullsizeThumbnail"];
        var init = function(context) {
            LOGGER.debug("init");
            this._overrider = context.getOverrider(vdb.enums.ClientOverrideEnum.VIDEOS);
        };
        var _overrideVideo = function(video) {
            for (var videoProp in video) {
                if (video.hasOwnProperty(videoProp)) {
                    _overrideProperty.call(this, video, videoProp);
                }
            }
        };
        var _overrideProperty = function(video, videoProp) {
            var ovr = this._overrider[video["videoId"]];
            for (var overrideProp in ovr) {
                if (ovr.hasOwnProperty(overrideProp)) {
                    if (videoProp === overrideProp && _isAvailable(overrideProp)) {
                        video[videoProp] = ovr[overrideProp];
                    }
                }
            }
        };
        var _isAvailable = function(prop) {
            return vdb.Utils.indexOf(AVAILABLE_PROPERTIES, prop) != -1;
        };
        var override = function(bid) {
            var videos = bid["videos"];
            for (var videoKey in videos) {
                if (videos.hasOwnProperty(videoKey)) {
                    _overrideVideo.call(this, videos[videoKey]);
                }
            }
        };
        return{init:init, override:override};
    }());
    vdb.api.CaptionApi = vdb.core.Class.extend(function() {
        function onAdapterReady(adapter) {
            if (adapter.player && adapter.player.controller) {
                this._manager = adapter.player.controller.getSubtitlesManager();
                return this;
            }
            throw new Error("CaptionApi not available");
        }
        return{init:function(context) {
            this._context = context;
        }, getPromise:function() {
            return this._context.playerAPI.getAdapterPromise().then(onAdapterReady.bind(this));
        }, "setLanguage":function(code) {
            this._manager.setLanguage(code);
        }, "enabled":function() {
            return this._manager.enabled();
        }, "hasSubtitles":function() {
            return this._manager.hasSubtitles();
        }, "getSubtitles":function() {
            return this._manager.getSubtitles();
        }, "updateSetting":function(name, value) {
            this._manager.updateSetting(name, value);
        }, "getSetting":function(name) {
            return this._manager.getSetting(name);
        }, "resetSettings":function() {
            this._manager.resetSettings();
        }, "off":function() {
            this._manager.off();
        }};
    }());
    vdb.api.PostMessageApi = vdb.core.Class.extend(function() {
        var addPauseListener = function() {
            var listener = function(event) {
                var data = event.data;
                if (typeof data === "string") {
                    try {
                        data = JSON && JSON.parse(data);
                    } catch (e) {
                        return;
                    }
                }
                if (data && data["method"] === "pause" && data["value"] && data["value"].match(/vidible/)) {
                    this._context.api.pause();
                }
            }.bind(this);
            vdb.events.addEventListener(window, "message", listener);
        };
        return{init:function(context) {
            this._context = context;
        }, addListeners:function() {
            addPauseListener.call(this);
        }};
    }());
    vdb.errors = {};
    vdb.errors.Error = {};
    vdb.errors.ParseError = {};
    vdb.errors.TimeoutError = {};
    vdb.errors.NotImplementedError = {};
    (function(def) {
        def.Error = vdb.core.Class.extend(function() {
            return{init:function(message) {
                this.message = message || "";
            }, toString:function() {
                return "Error{message=" + this.message + "}";
            }};
        }());
        def.ParseError = def.Error.extend({init:function(message, code) {
            this._super(message);
            this.code = code;
        }});
        def.TimeoutError = def.Error.extend({timeoutMs:0, init:function(message, timeoutMs) {
            this._super(message);
            this.timeoutMs = timeoutMs;
        }});
        def.NotImplementedError = def.Error.extend({});
    })(vdb.errors);
    vdb.events.AdEvent = vdb.events.Event.extend(function() {
        var init = function(type, adType, data) {
            this._super(type);
            this.adType = adType;
            this.data = data;
        };
        var clone = function() {
            return new vdb.events.AdEvent(this.type, this.adType, this.data);
        };
        return{adType:null, data:null, init:init, clone:clone};
    }());
    (function(def) {
        def.AD_BLOCKER_COMPLETE = "Ads.Blocker.Complete";
        def.AD_BLOCKER_REQUEST = "Ads.Blocker.Request";
        def.AD_BLOCKER_STARTED = "Ads.Blocker.Started";
        def.AD_ENGINES_LOAD = "Ads.Engines.Load";
        def.AD_ENGINE_READY = "Ads.Engine.Ready";
        def.AD_ENGINE_RUN = "Ads.Engine.Run";
        def.AD_ENGINE_COMPLETE = "Ads.Engine.Complete";
        def.AD_INTERACTION_START = "Ads.Engine.InterationStart";
        def.AD_INTERACTION_END = "Ads.Engine.InterationEnd";
        def.AD_LINEAR_CHANGE = "Ads.Engine.LinearChange";
        def.AD_NONE = "Ads.Engine.None";
        def.ADS_LOADED = "Ads.Loaded";
        def.AD_LOADED = "Ads.Ad.Loaded";
        def.AD_STARTING = "Ads.Ad.Starting";
        def.AD_STARTED = "Ads.Ad.Started";
        def.AD_FINISHED = "Ads.Ad.Finished";
        def.AD_PAUSED = "Ads.Ad.Paused";
        def.AD_RESUMED = "Ads.Ad.Resumed";
        def.AD_VOLUME_CHANGED = "Ads.Ad.VolumeChanged";
        def.AD_CLICK = "Ads.Ad.Click";
        def.AD_QUARTILE = "Ads.Ad.Quartile";
        def.AD_TIMEUPDATE = "Ads.Ad.TimeUpdate";
        def.AD_WAITING = "Ads.Ad.Waiting";
        def.AD_SHOW_COMPANIONS = "adshowcompanions";
        def.AD_SHOW_ICON = "Ads.Ad.ShowIcon";
        def.AD_HIDE_ICON = "Ads.Ad.HideIcon";
        def.AD_SKIPPED = "Ads.Ad.Skipped";
        def.AD_SKIPPABLE_STATE_CHANGE = "Ads.Ad.SkippableStateChange";
        def.AD_SKIP_REQUESTED = "Ads.Ad.SkipRequested";
        def.AD_SUBTITLES_FOUND = "Ads.Ad.SubtitlesFound";
    })(vdb.events.AdEvent);
    vdb.events.AdRemainingTimeUpdateEvent = {};
    (function(def) {
        def.AdRemainingTimeUpdateEvent = vdb.events.Event.extend(function() {
            var init = function(remainingTime) {
                this._super(def.AdRemainingTimeUpdateEvent.TYPE);
                this._remainingTime = remainingTime;
            };
            var clone = function() {
                return new def.AdRemainingTimeUpdateEvent(this._remainingTime);
            };
            return{init:init, clone:clone};
        }());
        def.AdRemainingTimeUpdateEvent.TYPE = "AdRemainingTimeUpdateEvent";
    })(vdb.events);
    vdb.events.TrackEvent = vdb.events.Event.extend(function() {
        var init = function(type, data, callback) {
            this._super(type, true, true);
            this.data = data;
            this.callback = callback;
        };
        return{data:null, callback:null, init:init};
    }());
    (function(def) {
        def.VIDEO_PLAY = "Reporting.Video.Play";
        def.VIDEO_DECILE = "Reporting.Video.Decile";
        def.VIDEO_HWM = "Reporting.Video.HWM";
        def.REVENUE_SHARE = "Reporting.RevenueShare";
        def.AD_REQUEST = "Reporting.Ad.Request";
        def.AD_ENGINE_REQUEST = "Reporting.Ad.Engine.Request";
        def.AD_ENGINE_RESPONSE = "Reporting.Ad.Engine.Response";
        def.AD_ENGINE_FLOW = "Reporting.Ad.Engine.Flow";
        def.AD_FALLBACK = "Reporting.Ad.Fallback";
        def.AD_INTERACTION = "Reporting.Ad.Interaction";
        def.AD_EARLY_STOP = "Reporting.Ad.Early.Stop";
        def.AD_ISSUE = "Reporting.Ad.Issue";
        def.AD_SLOT_OPPORTUNITY = "Reporting.Ad.Slot.Opportunity";
        def.DISPLAY = "Reporting.Basic.Display";
        def.CLICK = "Reporting.Basic.Click";
        def.ERROR = "Reporting.Basic.Error";
    })(vdb.events.TrackEvent);
    vdb.flashembed = function() {
        function extend(to, from) {
            if (from) {
                for (var key in from) {
                    if (from.hasOwnProperty(key)) {
                        to[key] = from[key];
                    }
                }
            }
            return to;
        }
        function map(arr, func) {
            var newArr = [];
            for (var i in arr) {
                if (arr.hasOwnProperty(i)) {
                    newArr[i] = func(arr[i]);
                }
            }
            return newArr;
        }
        function Flash(root, opts, conf) {
            if (f.isSupported(opts.version)) {
                root.innerHTML = f.getHTML(opts, conf);
            } else {
                if (opts.expressInstall && f.isSupported([6, 65])) {
                    root.innerHTML = f.getHTML(extend(opts, {src:opts.expressInstall}), {MMredirectURL:encodeURIComponent(location.href), MMplayerType:"PlugIn", MMdoctitle:document.title});
                } else {
                    if (opts.onFail) {
                        var ret = opts.onFail.call(this);
                        if (typeof ret === "string") {
                            root.innerHTML = ret;
                        }
                    }
                }
            }
            if (IE) {
                window[opts.id] = document.getElementById(opts.id);
            }
            extend(this, {getRoot:function() {
                return root;
            }, getOptions:function() {
                return opts;
            }, getConf:function() {
                return conf;
            }, getApi:function() {
                return root.firstChild;
            }});
            this["getApi"] = this.getApi;
        }
        var IE = document.all;
        var URL = "http://get.adobe.com/flashplayer";
        var JQUERY = typeof jQuery === "function";
        var RE = /(\d+)[^\d]+(\d+)[^\d]*(\d*)/;
        var GLOBAL_OPTS = {"width":"100%", "height":"100%", "id":"_" + ("" + Math.random()).slice(9), "allowFullScreen":true, "allowScriptAccess":"always", version:[3, 0], onFail:null, expressInstall:null, w3c:false, cachebusting:false};
        if (window.attachEvent) {
            window.attachEvent("onbeforeunload", function() {
                __flash_unloadHandler = function() {
                };
                __flash_savedUnloadHandler = function() {
                };
            });
        }
        var embed = function(root, opts, conf) {
            if (typeof root === "string") {
                root = document.getElementById(root.replace("#", ""));
            }
            if (!root) {
                return;
            }
            if (typeof opts === "string") {
                opts = {"src":opts};
            }
            return new Flash(root, extend(extend({}, GLOBAL_OPTS), opts), conf);
        };
        var f = extend({}, {conf:GLOBAL_OPTS, getVersion:function() {
            var fo;
            var ver;
            try {
                ver = navigator.plugins["Shockwave Flash"].description.slice(16);
            } catch (e) {
                try {
                    fo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
                    ver = fo && fo.GetVariable("$version");
                } catch (err) {
                    try {
                        fo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                        ver = fo && fo.GetVariable("$version");
                    } catch (err2) {
                    }
                }
            }
            ver = RE.exec(ver);
            return ver ? [1 * ver[1], 1 * ver[ver[1] * 1 > 9 ? 2 : 3] * 1] : [0, 0];
        }, asString:function(obj) {
            if (obj === null || obj === undefined) {
                return null;
            }
            var type = typeof obj;
            if (type == "object" && obj.push) {
                type = "array";
            }
            switch(type) {
                case "string":
                    obj = obj.replace(new RegExp('(["\\\\])', "g"), "\\$1");
                    obj = obj.replace(/^\s?(\d+\.?\d*)%/, "$1pct");
                    return'"' + obj + '"';
                case "array":
                    return "[" + map(obj, function(el) {
                        return f.asString(el);
                    }).join(",") + "]";
                case "function":
                    return'"function()"';
                case "object":
                    var str = [];
                    for (var prop in obj) {
                        if (obj.hasOwnProperty(prop)) {
                            str.push('"' + prop + '":' + f.asString(obj[prop]));
                        }
                    }
                    return "{" + str.join(",") + "}";
            }
            return String(obj).replace(/\s/g, " ").replace(/\'/g, '"');
        }, getHTML:function(opts, conf) {
            opts = extend({}, opts);
            var html = '<object width="' + opts["width"] + '" height="' + opts["height"] + '" id="' + opts["id"] + '"';
            if (opts.cachebusting) {
                opts["src"] += (opts["src"].indexOf("?") != -1 ? "&" : "?") + Math.random();
            }
            if (opts.w3c || !IE) {
                html += ' data="' + opts["src"] + '" type="application/x-shockwave-flash"';
            } else {
                html += ' classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"';
            }
            html += ">";
            if (opts.w3c || IE) {
                html += '<param name="movie" value="' + opts["src"] + '" />';
            }
            opts["width"] = opts["height"] = opts["id"] = opts.w3c = opts["src"] = null;
            opts.onFail = opts.version = opts.expressInstall = null;
            for (var key in opts) {
                if (opts[key]) {
                    html += '<param name="' + key + '" value="' + opts[key] + '" />';
                }
            }
            var vars = "";
            if (conf) {
                for (var k in conf) {
                    if (conf[k]) {
                        var val = conf[k];
                        vars += k + "=" + (/function|object/.test(typeof val) ? f.asString(val) : val) + "&";
                    }
                }
                vars = vars.slice(0, -1);
                html += '<param name="flashvars" value="' + vars.replace(/"/g, "%5C%22") + '" />';
            }
            html += "</object>";
            return html;
        }, isSupported:function(ver) {
            return VERSION[0] > ver[0] || VERSION[0] == ver[0] && VERSION[1] >= ver[1];
        }});
        var VERSION = f.getVersion();
        return extend({embed:embed, flashVersion:VERSION}, f);
    }();
    vdb.flashembed["embed"] = vdb.flashembed.embed;
    vdb.modules.WindowPreparer = vdb.core.Class.extend(function() {
        function prepareSimple(win) {
        }
        function prepareIsolated(win, doc) {
        }
        return{prepareSimple:prepareSimple, prepareIsolated:prepareIsolated};
    }());
    vdb.override.CompanionsSettingsOverrider = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("Companions overrider");
        return{init:function(context) {
            LOGGER.debug("init", "context:", context);
            this._context = context;
            this._overrider = context.getOverrider(vdb.enums.ClientOverrideEnum.COMPANIONS);
        }, override:function(adSettings) {
            if (vdb.Utils.isEmpty(this._overrider)) {
                return adSettings;
            }
            adSettings["companions"] = this._overrider["companions"];
            return adSettings;
        }};
    }());
    vdb.utils.CompanyMetadataResolver = vdb.core.Class.extend(function() {
        function unifyEventName(userEventName) {
            return userEventName.replace(/[_\s-]/g, "").toLowerCase();
        }
        return{init:function() {
            this._unifiedEvents = {};
            var exposedEvents = vdb.constants.PlayerEvent.EXPOSED_EVENTS;
            for (var key in exposedEvents) {
                if (Object.prototype.hasOwnProperty.call(exposedEvents, key)) {
                    var unifiedKey = unifyEventName(key);
                    this._unifiedEvents[unifiedKey] = exposedEvents[key];
                }
            }
        }, resolveEvent:function(userEventName) {
            return this._unifiedEvents[this.matchEvent(userEventName)];
        }, matchEvent:function(eventName) {
            var match = /(?:vidible|vdb)\.([\w-]+)/.exec(eventName);
            if (match) {
                eventName = unifyEventName(match[1]);
            } else {
                eventName = unifyEventName(eventName);
            }
            return eventName;
        }};
    }());
    vdb.utils.Constants = {STANDARD_VIDEO_ASPECT_RATIO:9 / 16};
    vdb.utils.Cookies = vdb.core.Class.extend(function() {
        return{get:function(name) {
            var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)"));
            return matches ? decodeURIComponent(matches[1]) : undefined;
        }, set:function(name, value, props) {
            props = props || {};
            var exp = props.expires;
            if (typeof exp === "number" && exp) {
                var d = new Date;
                d.setTime(d.getTime() + exp * 1E3);
                exp = d;
                props.expires = d;
            }
            if (exp && exp.toUTCString) {
                delete props.expires;
                props["expires"] = exp.toUTCString();
            }
            value = encodeURIComponent(value);
            var updatedCookie = name + "=" + value;
            for (var propName in props) {
                updatedCookie += "; " + propName;
                var propValue = props[propName];
                if (propValue !== true) {
                    updatedCookie += "=" + propValue;
                }
            }
            document.cookie = updatedCookie;
        }, "delete":function(name) {
            this.set(name, "", {expires:-1});
        }};
    }());
    vdb.utils.iframeBusters = {};
    vdb.utils.iframeBusters.IFrameBuster = vdb.core.Class.extend(function() {
        function restorePlayerTag() {
            var options = this._options;
            var overrideUrls = this._overrideUrls;
            var source = this._dom.nodeFromHTML(options["content"].outerHTML);
            var tag = source.cloneNode();
            var children = source.childNodes;
            var i = 0;
            for (var l = children.length;i < l;i++) {
                var node = children[i];
                if (node.nodeType === vdb.NodeType.ELEMENT_NODE && node.nodeName === "SCRIPT" && node.src.indexOf(overrideUrls.cdn) === 0) {
                    continue;
                }
                tag.appendChild(node.cloneNode());
            }
            tag.className = tag.className + "vdb_" + options["pid"] + options["bcid"];
            return tag.outerHTML;
        }
        function noResponse() {
            document.body.removeChild(this._busterIframe);
            callOnNotBusted.call(this);
        }
        function tryBustOut() {
            var iframe = this._busterIframe = this._dom.createElement("iframe");
            var referrer = vdb.Utils.parseUrl(document.referrer);
            var _this = this;
            iframe.style.display = "none";
            iframe.onload = function() {
                _this._timeoutId = setTimeout(noResponse.bind(_this), RESPONSE_TIMEOUT);
                iframe.contentWindow.postMessage(["bustout", encodeURIComponent(restorePlayerTag.call(_this)), encodeURIComponent(window.location.href)].join(":"), "*");
            };
            iframe.src = [referrer.protocol, "//", referrer.host, this._getBusterLocation()].join("");
            document.body.appendChild(iframe);
        }
        function callOnNotBusted() {
            if (vdb.Utils.isFunction(this._onNotBusted)) {
                this._onNotBusted();
            }
        }
        var RESPONSE_TIMEOUT = 1E3;
        return{init:function(options, overrideUrls, onNotBusted) {
            this._options = options;
            this._overrideUrls = overrideUrls;
            this._onNotBusted = onNotBusted;
            this._dom = vdb.utils.DomUtils.initDOM(document);
        }, tryBustOut:tryBustOut};
    }());
    (function(def) {
        def.bustIfNeeded = function(options, overrideUrls, onNotBusted) {
            function tryNextBuster() {
                if (busters && busters[0]) {
                    var busterClass = busters.shift();
                    var buster = new busterClass(options, overrideUrls, tryNextBuster);
                    buster.tryBustOut();
                } else {
                    onNotBusted();
                }
            }
            var busters = [def.EyewonderBuster, def.DefaultBuster];
            if (window.top === self) {
                onNotBusted();
            } else {
                tryNextBuster();
            }
        };
    })(vdb.utils.iframeBusters);
    vdb.utils.iframeBusters.DefaultBuster = vdb.utils.iframeBusters.IFrameBuster.extend(function() {
        var BUSTER_LOCATION = "/aol-o2/index.html";
        return{_getBusterLocation:function() {
            return BUSTER_LOCATION;
        }};
    }());
    vdb.utils.iframeBusters.EyewonderBuster = vdb.utils.iframeBusters.IFrameBuster.extend(function() {
        var BUSTER_LOCATION = "/eyewonder/interim.html";
        return{_getBusterLocation:function() {
            this._context = new vdb.context.ContextUrls(this._overrideUrls);
            return BUSTER_LOCATION + "?----" + this._context.getCdnUrl("js/lib/iframe-buster-lib.js");
        }};
    }());
    vdb.utils.ObjectMap = vdb.core.Class.extend(function() {
        function iter(arr) {
            return{cur:0, hasNext:function() {
                return this.cur < arr.length;
            }, next:function() {
                return arr[this.cur++];
            }};
        }
        return{init:function() {
            this._entries = [];
        }, set:function(key, value) {
            this._entries.push({key:key, value:value});
        }, get:function(key) {
            for (var i = 0;i < this._entries.length;i++) {
                var entry = this._entries[i];
                try {
                    if (entry.key === key) {
                        return entry.value;
                    }
                } catch (e) {
                }
            }
        }, keys:function() {
            var keys = [];
            for (var i = 0;i < this._entries.length;i++) {
                var entry = this._entries[i];
                keys.push(entry.key);
            }
            return iter(keys);
        }};
    }());
    vdb.utils.PerformanceConstants = function() {
        return{API:{GET_ENTRIES_BY_TYPE:"getEntriesByType", MARK:"mark", TIMING:"timing", NAVIGATION_START:"navigationStart"}, ENTRY_TYPE:{MARK:"mark", RESOURCE:"resource"}, INITIATOR_TYPE:{IMG:"img", SCRIPT:"script", XHR:"xmlhttprequest"}};
    }();
    vdb.utils.Point = vdb.core.Class.extend({init:function(x, y) {
        this.x = x || 0;
        this.y = y || 0;
    }});
    vdb.utils.RegexResolverRule = vdb.core.Class.extend(function() {
        var init = function(pattern, resolveFunc) {
            this._pattern = pattern;
            this._resolveFunc = resolveFunc;
        };
        var apply = function(string) {
            return string.replace(this._pattern, this._resolveFunc);
        };
        return{init:init, apply:apply};
    }());
    vdb.loadTime = {};
    vdb.loadTime.LoadTimeConstants = function() {
        var isSecure = vdb.utils.StringUtils.startsWith(location.href, "https");
        return{SCRIPTS:{DELIVERY_URL:isSecure ? "https://delivery.vidible.tv/" : "http://delivery.vidible.tv/", VIDIBLE_MIN:"vidible-min.js"}, MARKERS:{PLAYER_LOAD_TIME_START:"player-load-time-start", CONTEXT_CREATED:"context-created", ADAPTER_CREATED:"adapter-created"}, AD_MODEL:{INIT_TIME:"initTime", AD_START_TIME:"startAdTime", AD_SERVER_REQUESTS:"adServerRequests", AD_GROUPS:"adGroups", ADS:"ads", AD_CHAIN:"adChain", AD_MEDIA_FILES:"adMediaFiles"}, AD_MARKERS:{AD_SYSTEM_INIT:"adSystem-initTime", AD_SYSTEM_AD_START:"adSystem-adStartTime"},
            BREAKPOINT_TYPE:{PLAYER:"player", AD:"ad"}, MODEL_READY_TIMEOUT:30 * 1E3, MODEL_STATE:{READY:"ready", LOADING:"loading", ERROR:"error"}};
    }();
    vdb.model.Video = vdb.core.Class.extend(function() {
        function capitalizeAdConfigList() {
            for (var i = 0;i < this.adConfigList.length;i++) {
                this.adConfigList[i]["adType"] = vdb.utils.StringUtils.capitalizeFirstLetter(this.adConfigList[i]["adType"]);
            }
        }
        return{setUrlToPlay:function(url) {
            this.urlToPlay = url;
        }, setOriginalIndex:function(index) {
            this.originalIndex = index;
            this.sequence = index + 1;
        }, init:function(json) {
            this.id = json["videoId"];
            this.aolId = json["aolVideoId"];
            this.videoUrls = json["videoUrls"];
            this.title = json["name"];
            this.chanName = json["chanName"];
            this.categoryIds = json["categoryIds"];
            this.catName = json["catName"];
            this.cq = json["cq"];
            this.detailPage = json["detailPage"];
            this.flags = json["flags"];
            this.thumbnail = json["thumbnail"];
            this.fullSizeThumbnail = json["fullsizeThumbnail"] || this.thumbnail;
            this.trailer = json["trailer"];
            this.description = json["description"];
            this.keywords = json["keywords"];
            this.subtitles = json["captions"] || {};
            this.metadata = json["metadata"] || {};
            this.externalId = json["externalId"] || this.metadata["externalId"];
            this.videoSourceType = (json["videoSourceType"] || this.metadata["videoSourceType"] || "").toLowerCase();
            this.rssVideoId = json["rssVideoId"];
            this.deRssId = json["deRssId"];
            this.ownerId = json["ownerId"];
            this.studioName = json["studioName"];
            this.partnerName = json["partnerName"];
            this.cs = json["cs"];
            this.raw = json;
            this.adConfigList = json["adConfigList"] || [];
            this.thumbnailId = json["thumbnailId"];
            this.urlToPlay = "";
            this.sequence = null;
            this.originalIndex = null;
            this.cuePoints = json["cuePoints"] || [];
            capitalizeAdConfigList.call(this);
        }, getMetadataResolver:function() {
            return vdb.utils.PlaceholdersResolver.fromObject(this.metadata, "[META:", "]");
        }, getUrlByType:function(type) {
            var result;
            if (this.videoUrls) {
                for (var i = 0;i < this.videoUrls.length;i++) {
                    if (this.videoUrls[i].indexOf(type) > -1) {
                        result = this.videoUrls[i];
                    }
                }
            }
            return result;
        }, isInternal:function() {
            var url = this.getUrlByType("mp4");
            var result = false;
            if (url) {
                var host = vdb.Utils.parseUrl(url).hostname;
                var videosDomain = vdb.Props["videos.domain"];
                var lowlanderVideosDomain = vdb.Props["lowlander.videos.domain"];
                result = host.indexOf(videosDomain) > -1 || host.indexOf(lowlanderVideosDomain) > -1;
            }
            return result;
        }, cuePointsToAdsConfig:function() {
            var converted = [];
            for (var i = 0;i < this.cuePoints.length;i++) {
                if (this.cuePoints[i].time) {
                    converted[i] = {"adType":"MIDROLL", "unit":"SECOND", "value":this.cuePoints[i].time};
                }
            }
            return converted;
        }};
    }());
    vdb.utils.Timer = vdb.core.Class.extend(function() {
        var init = function() {
            this._running = false;
        };
        var schedule = function(callback, targetTime, autoStart, recurring) {
            this._rememberedTime = 0;
            this._targetTime = targetTime;
            if (recurring) {
                this._complete = function() {
                    callback();
                    this._running = false;
                    this.resume();
                }.bind(this);
            } else {
                this._complete = callback;
            }
            this._running = false;
            if (autoStart || typeof autoStart === "undefined") {
                this.start();
            }
        };
        var start = function() {
            this.resume();
        };
        var stop = function() {
            this.pause();
        };
        var pause = function() {
            if (!this._running) {
                return;
            }
            this._running = false;
            this._rememberedTime += (new Date).getTime() - this._startTime;
            clearTimeout(this._timerId);
        };
        var resume = function() {
            if (this._running || !this._complete) {
                return;
            }
            this._running = true;
            this._startTime = (new Date).getTime();
            this._timerId = setTimeout(this._complete, this.remaining());
        };
        var isRunning = function() {
            return this._running || false;
        };
        var remaining = function() {
            return Math.max(this._targetTime - this.elapsed(), 0);
        };
        var elapsed = function() {
            return this._rememberedTime + (this._running ? (new Date).getTime() - this._startTime : 0);
        };
        var clean = function() {
            this._running = false;
            clearTimeout(this._timerId);
            this._complete = null;
        };
        return{init:init, schedule:schedule, start:start, stop:stop, pause:pause, resume:resume, isRunning:isRunning, remaining:remaining, elapsed:elapsed, clean:clean};
    }());
    vdb.model.Bid = vdb.core.Class.extend(function() {
        return{init:function(json, context) {
            this.id = json["bidId"];
            this.raw = json;
            this._currentVideoIndex = 0;
            this._videos = [];
            this.context = context;
            this.addVideos(vdb.Utils.getWithDefault(json["videos"], []));
        }, addVideos:function(rawVideos) {
            for (var i = 0;i < rawVideos.length;i++) {
                var video = rawVideos[i];
                video = video instanceof vdb.model.Video ? video : new vdb.model.Video(video);
                if (video.videoUrls) {
                    for (var j = 0;j < video.videoUrls.length;j++) {
                        var url = video.videoUrls[j];
                        if (this.context && url.indexOf(".cdn.aolon.com") !== -1 && !vdb.utils.UrlUtils.getParameterByName("sid", url)) {
                            video.videoUrls[j] = url + (url.indexOf("?") > -1 ? "&" : "?") + "sid=" + this.context.id;
                        }
                    }
                }
                video.setOriginalIndex(i);
                this._videos.push(video);
            }
        }, getCurrentVideo:function() {
            return this._videos[this._currentVideoIndex];
        }, getCurrentVideoIndex:function() {
            return this._currentVideoIndex;
        }, getNextVideo:function() {
            return this._videos[this.getNextVideoIndex()];
        }, getNextVideoIndex:function() {
            return this._currentVideoIndex + 1 >= this._videos.length ? 0 : this._currentVideoIndex + 1;
        }, selectNextVideo:function() {
            this._currentVideoIndex = this.getNextVideoIndex();
            return this._currentVideoIndex;
        }, selectVideoByIndex:function(index) {
            this._currentVideoIndex = index >= this._videos.length || index < 0 ? 0 : index;
            return this._currentVideoIndex;
        }, getVideo:function(index) {
            return this._videos[index];
        }, getVideos:function() {
            return this._videos.slice(0);
        }, isEmpty:function() {
            return this.getLength() === 0;
        }, getLength:function() {
            return this._videos.length;
        }};
    }());
    vdb.utils.DomUtils = {_instances:null, initDOM:function(doc) {
        if (!vdb.utils.DomUtils._instances) {
            vdb.utils.DomUtils._instances = new vdb.utils.ObjectMap;
        }
        if (!doc) {
            doc = document;
        }
        var instance = vdb.utils.DomUtils._instances.get(doc);
        if (!instance) {
            instance = new vdb.Dom(doc);
            vdb.utils.DomUtils._instances.set(doc, instance);
        }
        return instance;
    }, getGlobalPosition:function(element) {
        var result = new vdb.utils.Point;
        do {
            result.x += element.offsetLeft;
            result.y += element.offsetTop;
            element = element.offsetParent;
        } while (element != null);
        return result;
    }, globalToLocal:function(element, point) {
        var position = vdb.utils.DomUtils.getGlobalPosition(element);
        return new vdb.utils.Point(point.x - position.x, point.y - position.y);
    }};
    vdb.utils.Queue = vdb.core.Class.extend(function() {
        function remove() {
            this._running = false;
            this._shift = this._q.shift();
            if (this._shift) {
                this._running = true;
                this._shift();
            } else {
                for (var i = 0;i < this._drainPromises.length;i++) {
                    this._drainPromises[i]();
                }
                this._drainPromises = [];
            }
        }
        return{init:function() {
            this._q = [];
            this._drainPromises = [];
            this._running = false;
        }, add:function(callback) {
            return new vdb.Promise(function(resolve) {
                this._q.push(function() {
                    var finished = callback();
                    resolve(this._q[this._q.length - 1]);
                    if (finished && finished.then) {
                        finished.then(remove.bind(this));
                    } else {
                        if (typeof finished === "undefined" || finished) {
                            remove.call(this);
                        }
                    }
                }.bind(this));
                if (!this._running) {
                    remove.call(this);
                }
            }.bind(this));
        }, drain:function() {
            return new vdb.Promise(function(resolve) {
                if (this._q.length) {
                    this._drainPromises.push(resolve);
                } else {
                    resolve();
                }
            }.bind(this));
        }, next:remove, empty:function() {
            this._q = [];
            remove.call(this);
        }};
    }());
    vdb.Utils360 = function() {
        return{has360Videos:function(bid) {
            var videos = bid["videos"];
            for (var i = 0;i < videos.length;i++) {
                if (vdb.Utils360.checkIfVideo360(videos[i])) {
                    return true;
                }
            }
            return false;
        }, checkIfVideo360:function(video) {
            var metadata = video && (video["metadata"] || video.metadata) || {};
            return metadata["videoType"] === vdb.enums.video.Type.THREE_SIXTY;
        }};
    }();
    vdb.utils.ParametersCombine = vdb.core.Class.extend(function() {
        function getBasicParams() {
            var macros = this._config.getAllMacros();
            var params = macros ? vdb.Utils.copy(macros) : {};
            var atpData = this._config.getATPData();
            var size = this._environment.getSize();
            if (atpData) {
                params["APID"] = atpData.utid;
            }
            params["width"] = size.width;
            params["height"] = size.height;
            params["p.vw.active"] = this._viewability.isVisible() ? 1 : 0;
            params["p.vw.viewable"] = this._viewability.getViewableOpportunity();
            params["p.vw.viewableOpportunity"] = this._moatViewability.getViewableOpportunity();
            params["moatViewableOpportunity"] = this._moatViewability.getVisiblePercent();
            params["adapViewableOpportunity"] = this._viewability.getVisiblePercent();
            params["r"] = vdb.utils.WindowUtil.getTopMostLocation(window);
            params["ps"] = "html5-vpaid" + (this._flashDetector.isFlashAvailable() ? ",swf" : "");
            params["sid"] = this._config.getId();
            params["vvuid"] = this._config.getLoggerParams()["vvuid"];
            params["lookahead"] = true;
            return params;
        }
        var Dependencies = vdb.enums.Dependencies;
        return{init:function(injector) {
            this._viewability = injector.resolveSync(Dependencies.VIEWABILITY);
            this._moatViewability = injector.resolveSync(Dependencies.MOAT_VIEWABILITY);
            this._flashDetector = injector.resolveSync(Dependencies.FLASH_DETECTOR);
            this._config = injector.resolveSync(Dependencies.CONFIG);
            this._environment = injector.resolveSync(Dependencies.ENVIRONMENT);
        }, getDSPreplayParams:function() {
            var params = this.getVrmParams(vdb.enums.AdType.PREROLL);
            for (var key in params) {
                if (Object.prototype.hasOwnProperty.call(params, key)) {
                    params["ad." + key] = params[key];
                    delete params[key];
                }
            }
            params["ad.m.ssai"] = 1;
            params["ad.ps"] = "vast_only";
            params["ad"] = "vrm";
            params["v"] = 2;
            params["bcid"] = this._config.getBuyerCompanyId();
            params["pid"] = this._config.getPlayerId();
            params["bid"] = this._config.getBidId();
            return params;
        }, getVrmParams:function(type) {
            var video = this._environment.getCurrentVideo();
            var params = {};
            if (video && video.id) {
                params["vid"] = video.id;
                params["pt"] = vdb.enums.PlayerType.HTML5.toLowerCase();
                params["at"] = type ? type.toLowerCase() : "";
                var macros = this._config.getAllMacros();
                for (var key in macros) {
                    if (Object.prototype.hasOwnProperty.call(macros, key)) {
                        if (key.indexOf("m.vrm") === 0) {
                            params[key] = macros[key];
                        }
                    }
                }
            }
            params["p.vw.sound"] = Math.round(this._environment.getVolume() * 100);
            params["autoplayInit"] = this._config.isAutoplay() ? 1 : 0;
            return vdb.Utils.copy(getBasicParams.call(this), params);
        }, getAdsParams:function(type) {
            var video = this._environment.getCurrentVideo();
            var params = {};
            if (video) {
                params["vid"] = video.id;
                var meta = video.metadata || {};
                if (meta["duration"]) {
                    params["t"] = meta["duration"] / 1E3;
                }
            }
            params["at"] = type ? type.toLowerCase() : "";
            return vdb.Utils.copy(getBasicParams.call(this), params);
        }};
    }());
    vdb.api.ScriptApi = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("ScriptApi");
        var convertToQuery = function(object) {
            var result = "";
            for (var k in object) {
                if (Object.prototype.hasOwnProperty.call(object, k)) {
                    var key = k;
                    var value = object[k];
                    if (key.indexOf("m.") !== 0) {
                        key = "m." + key;
                    }
                    result += [result.length === 0 ? "" : "&", encodeURIComponent(k), "=", encodeURIComponent(value)].join("");
                }
            }
            return result;
        };
        var parseOptions = function() {
            if (!this._options) {
                return null;
            }
            var options = {};
            options["pid"] = this._options["pid"];
            options["bcid"] = this._options["bcid"];
            if (!options["pid"] || !options["bcid"]) {
                LOGGER.error("mandatory parameters - pid and bcid aren't passed");
                return null;
            }
            options["pt"] = this._options["pt"] || "smart";
            options["site"] = this._options["site"] || vdb.utils.WindowUtil.getTopMostLocation(window);
            options["apid"] = this._options["apid"] || "";
            options["it"] = (new Date).getTime();
            options["content"] = this._contentContainer;
            options["bidModifier"] = {"bid":this._options["bid"], "videos":this._options["videos"], "query":this._options["query"]};
            options["extensions"] = this._options["extensions"];
            var removedProperties = ["pid", "bcid", "pt", "site", "bid", "videos", "query", "extensions"];
            var i = 0;
            for (var l = removedProperties.length;i < l;i++) {
                delete this._options[removedProperties[i]];
            }
            this._options["m.api"] = "dynamic";
            options["params"] = convertToQuery(this._options);
            this._options = undefined;
            return options;
        };
        var makeApiWrapper = function(method) {
            return function() {
                var args = arguments;
                return this._apiPromise.then(function(api) {
                    return api[method].apply(api, args);
                });
            };
        };
        var makeApiWrappers = function() {
            var methods = ["updateBid", "getFlashVersion", "getPixelsLog", "getRequestsLog", "play", "pause", "mute", "volume", "seekTo", "addEventListener", "removeEventListener", "setVideosToPlay", "destroy", "version", "getPlayerInfo"];
            var i = 0;
            for (var l = methods.length;i < l;i++) {
                var method = methods[i];
                this[method] = makeApiWrapper.call(this, method);
            }
        };
        var initApi = function(api) {
            var context = api._context;
            var tracker = context.getInjector().resolveSync(vdb.enums.Dependencies.PIXEL_TRACKER);
            var params = {"ifr":window !== window.top, "sid":api._context.id};
            tracker.callPixel("impression.gif", params);
            tracker.callPixel("js-loaded.gif", params);
            tracker.callPixel("js-started.gif", params);
            this._resolveApiPromise(api);
            return api;
        };
        var loadOptions = function(options) {
            return vidible["createPlayerAsync"](options).then(initApi.bind(this)).then(function(api) {
                return api.getAdapterPromise();
            });
        };
        return{init:function(targetElement) {
            var _this = this;
            this._options = {};
            if (typeof targetElement === "string") {
                targetElement = $doc.getElementById(targetElement);
            }
            if (targetElement) {
                this._contentContainer = vdb.Utils.createElement("div", {"class":vdb.constants.CssClass.SCRIPT_API_WRAPPER}, targetElement);
            }
            this._apiPromise = new vdb.Promise(function(resolve) {
                _this._resolveApiPromise = resolve;
            });
            makeApiWrappers.call(this);
            vdb.constants.PlayerEvent.exposeGlobal();
        }, "setup":function(options) {
            vdb.Utils.copy(options, this._options);
            return this;
        }, "load":function() {
            if (!this._contentContainer) {
                LOGGER.error("Could not locate target element");
                return this;
            }
            var options = parseOptions.call(this);
            if (options) {
                var scriptApiPromise = vdb["scriptApiPromise"] || vdb.Promise.resolve();
                vdb["scriptApiPromise"] = scriptApiPromise.then(loadOptions.bind(this, options));
            }
            return this;
        }, "on":function(event, handler) {
            this._apiPromise.then(function(api) {
                api.addEventListener(event, handler);
            });
            return this;
        }, "off":function(event, handler) {
            this._apiPromise.then(function(api) {
                api.removeEventListener(event, handler);
            });
            return this;
        }};
    }());
    window["vidible"]["player"] = function(divId) {
        return new vdb.api.ScriptApi(divId);
    };
    vdb.EntryPoint = {};
    vdb.log.getLogger("EntryPoint").info("Vidible version:", vdb.ver());
    (function(curScript) {
        if (curScript && curScript.src.indexOf("embedtag") === -1) {
            vdb.define(function(ctx, context) {
                var link = document.createElement("link");
                link["href"] = context.getHtml5PlayerUrl();
                link["rel"] = "preload";
                link["as"] = "script";
                curScript.parentElement.insertBefore(link, curScript);
            });
        }
    })(document["currentScript"]);
    vdb.events.VpaidEventDispatcher = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("VpaidEventDispatcher");
        var VpaidEvent = vdb.events.VpaidApiEvent;
        var _onAdQuartile = function(e) {
            LOGGER.debug("onAdQuartile", e);
            var AdStage = vdb.ads.AdStage;
            var event;
            switch(e.data.adStage) {
                case AdStage.FIRST_QUARTILE:
                    event = VpaidEvent.AD_VIDEO_FIRST_QUARTILE;
                    break;
                case AdStage.SECOND_QUARTILE:
                    event = VpaidEvent.AD_VIDEO_MIDPOINT;
                    break;
                case AdStage.THIRD_QUARTILE:
                    event = VpaidEvent.AD_VIDEO_THIRD_QUARTILE;
                    break;
                case AdStage.FINISHED:
                    event = VpaidEvent.AD_VIDEO_COMPLETE;
                    break;
                default:
                    ;
            }
            if (event) {
                this._vpaidApi.sendEvent(event);
            }
        };
        var _addListeners = function() {
            this._adController.addEventListener(vdb.events.AdEvent.AD_QUARTILE, _onAdQuartile.bind(this));
        };
        var init = function(adController, vpaidApi) {
            LOGGER.debug("init");
            this._adController = adController;
            this._vpaidApi = vpaidApi;
            _addListeners.call(this);
        };
        return{init:init};
    }());
    vdb.ext = {};
    vdb.ext.Registry = vdb.core.Class.extend(function() {
        function init() {
            this._extensions = {};
        }
        function provide(name, provider) {
            var state = getExtensionState.call(this, name);
            state.providerFuture.resolve(provider);
            state.isProvided = true;
        }
        function getProvider(name) {
            var state = getExtensionState.call(this, name);
            if (!state.loaderPromise && !state.isProvided) {
                return Promise.reject("load('" + name + "', url) should be called first");
            } else {
                if (state.loaderPromise) {
                    return state.loaderPromise.then(waitForProvider.bind(this, name));
                }
            }
            return waitForProvider.call(this, name);
        }
        function load(name, url) {
            var state = getExtensionState.call(this, name);
            if (state.isProvided) {
                if (url) {
                    LOGGER.info("extension '" + name + "' is embedded. Ignoring provided url: " + url);
                }
                return Promise.resolve();
            }
            if (state.loaderPromise) {
                if (state.url != url) {
                    LOGGER.error("two different URLs provided for extension '" + name + "'. Only " + state.url + " is honoured");
                }
            } else {
                LOGGER.debug("loading extension " + name + " from " + url);
                state.loaderPromise = loadScript.call(this, url);
                state.url = url;
            }
            return state.loaderPromise;
        }
        function getExtensionState(name) {
            var state = this._extensions[name];
            if (!state) {
                state = this._extensions[name] = {};
                state.providerFuture = new Future;
                state.isProvided = false;
            }
            return state;
        }
        function loadScript(url) {
            return Promise.race([Utils.promiseTimeout(LOAD_TIMEOUT), vdb.dom.loadScript(url)]);
        }
        function waitForProvider(name) {
            var state = getExtensionState.call(this, name);
            return Promise.race([Utils.promiseTimeout(PROVIDE_TIMEOUT), state.providerFuture.getPromise()]);
        }
        var LOGGER = vdb.log.getLogger("vdb.ext.Registry");
        var LOAD_TIMEOUT = 5E3;
        var PROVIDE_TIMEOUT = 100;
        var Future = vdb.Future;
        var Promise = vdb.Promise;
        var Utils = vdb.Utils;
        return{init:init, provide:provide, getProvider:getProvider, load:load};
    }());
    if (!vdb.Utils.isFunction(vdb.getExtensionsRegistry)) {
        var singleton;
        vdb.getExtensionsRegistry = function() {
            singleton = singleton || new vdb.ext.Registry;
            return singleton;
        };
    }
    vdb["extension"] = function(name, provider) {
        vdb.getExtensionsRegistry().provide(name, provider);
    };
    vdb.ext.Registry.getInstance = function() {
        return vdb.getExtensionsRegistry();
    };
    vdb.extras.AdsExtra = vdb.extras.BaseExtra.extend(function() {
        return{};
    }());
    vdb.extras.Html5Extra = vdb.extras.BaseExtra.extend(function() {
        return{};
    }());
    vdb.extras.UIExtra = vdb.extras.BaseExtra.extend(function() {
        return{initExtra:function(config, playerController) {
            this._config = config;
            this._controller = playerController;
            this._player = this._controller.getPlayer();
            this._context = vdb.ctx;
            this._dom = vdb.utils.DomUtils.initDOM(this._player._element.ownerDocument);
            this.onPlayerReady(this.runExtra.bind(this));
        }, register:function(classRef, schema) {
            var instance = window[classRef];
            if (schema == null) {
                schema = "empty";
            }
            instance.exportSchema("http://cdn.vidible.tv/dev/js/extras/schemas/" + ("" + schema + ".xml"));
            window["vdb"]["registerExtra"](classRef);
        }, exportSchema:function(url) {
            this["getSchema"] = function() {
                return url;
            };
            return url;
        }, onPlayerReady:function(f) {
            var self = this;
            if (this._controller.getVideo(0) == null) {
                var onMetadata = function(e) {
                    self._player.removeEventListener(vdb.constants.PlayerEvent.VIDEO_META, onMetadata);
                    f();
                };
                this._player.addEventListener(vdb.constants.PlayerEvent.VIDEO_META, onMetadata);
            } else {
                f();
            }
        }, getSchemaProperty:function(property) {
            return this._config["config"] && this._config["config"][property];
        }, isBlocking:function() {
            return this._config["blocking"];
        }, unblock:function() {
            if (this.isBlocking()) {
                this.dispatchEvent(vdb.events.PlayerModuleEvent.UNBLOCK);
            }
        }, px:function(value, defaultValue) {
            return defaultValue == null || value != 0 ? "" + value + "px" : defaultValue;
        }};
    }());
    vdb.api.ViewApi = vdb.core.Class.extend(function() {
        function getAdapterLayers(adapter) {
            if (adapter.player && adapter.player.controller) {
                this._videoContainerFuture.resolve(adapter.player.controller.getContainer());
            }
        }
        function init(context) {
            this._videoContainerFuture = new vdb.Future;
            this._context = context;
            this._injector = new vdb.ioc.Injector;
            this._injector.provide(TAG_CONTAINER, function() {
                return context.playerAPI.getContainer();
            });
            this._injector.provide(PLAYER_CONTAINER, function() {
                return vdb.Promise.race([this._videoContainerFuture.getPromise(), utils.promiseTimeout(MAX_WAIT_TIME)]);
            }.bind(this));
            this._context.playerAPI.getAdapterPromise().then(getAdapterLayers.bind(this));
        }
        function getContainer(name) {
            if ([PLAYER_CONTAINER, TAG_CONTAINER].indexOf(name) === -1) {
                throw new Error("Unknown container name");
            }
            return this._injector.resolve(name);
        }
        var PLAYER_CONTAINER = "playerContainer";
        var TAG_CONTAINER = "tagContainer";
        var MAX_WAIT_TIME = 5E3;
        var utils = vdb.Utils;
        return{init:init, "PLAYER_CONTAINER":PLAYER_CONTAINER, "TAG_CONTAINER":TAG_CONTAINER, "getContainer":getContainer};
    }());
    vdb.ext.Manager = vdb.core.Class.extend(function() {
        function provideAPI(type) {
            switch(type) {
                case PLAYER_API:
                    return this._context.playerAPI;
                case VIEW_API:
                    return new vdb.api.ViewApi(this._context);
                case CAPTION_API:
                    return(new vdb.api.CaptionApi(this._context)).getPromise();
                case VR_API:
                    return(new vdb.api.VRApi(this._context)).getPromise();
            }
            throw new Error("No API defined " + type);
        }
        function init(context, extensions) {
            extensions = extensions || {};
            this._context = context;
            this._promises = [];
            this._injectors = [];
            this._injector = new vdb.ioc.Injector;
            var i = 0;
            for (var l = APIS.length;i < l;i++) {
                var api = APIS[i];
                this._injector.provide(api, provideAPI.bind(this, api));
            }
            i = 0;
            for (l = extensions.length;i < l;i++) {
                loadExtension.call(this, extensions[i]);
            }
        }
        function destroy() {
            for (var i = 0;i < this._promises.length;i++) {
                var promise = this._promises[i];
                promise.then(function(ext) {
                    if (utils.isFunction(ext.destroy)) {
                        ext.destroy();
                    }
                })["catch"](function(error) {
                    LOGGER.error("Error while destroying extension", error);
                });
            }
            this._promises = [];
            this._injectors = [];
        }
        function loadExtension(extension) {
            var url = extension["url"];
            var name = extension["name"];
            var registry = vdb.ext.Registry.getInstance();
            registry.load(name, url);
            var promise = registry.getProvider(name).then(createExtensionInstance.bind(this, extension))["catch"](onLoadError.bind(this, name));
            for (var i = 0;i < 100;i++) {
                var providedName = name + (i > 0 ? i : "");
                if (!this._injector.isProvided(providedName)) {
                    this._injector.provide(providedName, function() {
                        return promise;
                    });
                    break;
                }
            }
            this._promises.push(promise);
        }
        function createExtensionInstance(extension, provider) {
            var name = extension["name"];
            var config = extension["config"] || {};
            LOGGER.debug("Creating extension " + name);
            var childInjector = this._injector.createChild().provideValue("config", config);
            this._injectors.push(childInjector);
            return childInjector.inject(provider);
        }
        function onLoadError(name, error) {
            LOGGER.error("can't load " + name + " extension: ", error);
            throw error;
        }
        var utils = vdb.Utils;
        var LOGGER = vdb.log.getLogger("vdb.ext.Manager");
        var PLAYER_API = "player";
        var VIEW_API = "view";
        var CAPTION_API = "caption";
        var VR_API = "vr";
        var APIS = [PLAYER_API, VIEW_API, CAPTION_API, VR_API];
        return{init:init, destroy:destroy, loadExtension:loadExtension};
    }());
    vdb.loader.BidLoader = vdb.EventBus.extend(function() {
        var LOGGER = vdb.log.getLogger("BidLoader");
        return{init:function(context) {
            this.context = context;
            this._super();
        }, fetch:function(query, isAol) {
            isAol = isAol || false;
            var url = this.context.getPlacementUrl(isAol);
            var parameters = this.context.getPlacementParameters();
            parameters["q"] = query;
            url += "?" + vdb.Utils.serialize(parameters);
            return vdb.ajax.getWithPromise(url).then(function(response) {
                return response.data["bid"];
            })["catch"](function(response) {
                var err = "Can't fetch the bid, status " + response.status;
                LOGGER.error(err);
                throw err;
            });
        }, update:function(bid) {
            LOGGER.info("Bid updated", bid);
            this.dispatchEvent(vdb.loader.BidLoader.LOADED, bid);
        }, load:function(bidModifier, isAol) {
            this.context.getBidModifier().update(bidModifier);
            var promise = this.fetch(this.context.getBidModifier().getQuery(), isAol);
            promise.then(this.update.bind(this));
            return promise;
        }};
    }());
    (function(def) {
        def.LOADED = "BidLoadedEvent";
    })(vdb.loader.BidLoader);
    vdb.modules.EndCardManager = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("EndCardManager");
        var EC = vdb.events.EventContext;
        var PlayerEvent = vdb.constants.PlayerEvent;
        var EndCardType = vdb.enums.EndCardType;
        var onVideoStart = function(e) {
            if (e["data"]["stopOnEnd"]) {
                this.eventGroup = this.eventGroup || new vdb.events.EventContextBindGroup(EC.bind(this.player.adapter, PlayerEvent.CONTENT_QUARTILE, onContentQuartile.bind(this)), EC.bind(this.player.adapter, PlayerEvent.VIDEO_END, onVideoEnd.bind(this)));
            } else {
                if (this.eventGroup) {
                    this.eventGroup.unbind();
                    this.eventGroup = null;
                }
            }
        };
        var onContentQuartile = function(e) {
            if (e["data"]["quartile"] === 3) {
                loadEndCard.call(this);
            }
        };
        var onVideoEnd = function(e) {
            if (e["data"]["stop"]) {
                if (this.endCard) {
                    this.endCard.show();
                    EC.bindOnce(this.player.adapter, PlayerEvent.CONTEXT_STARTED, onContextStarted.bind(this));
                } else {
                    LOGGER.error("Failed to load the end card");
                }
            }
        };
        var onContextStarted = function() {
            this.endCard.hide();
        };
        var loadEndCard = function() {
            if (!this.endCard) {
                LOGGER.debug("Load end card");
                var endCardUrl = this.player._context.getCdnUrl("js/endcards/%s.js".replace("%s", this.cardType)) + "?cb=" + vdb.ver();
                vdb.Utils.injectScript(document, endCardUrl, onLoaded.bind(this));
            } else {
                setEndCardSource.call(this);
            }
        };
        var onLoaded = function() {
            LOGGER.debug("End card loaded");
            if (vdb.endcards && vdb.endcards[this.cardType]) {
                this.endCard = new vdb.endcards[this.cardType](this.player.adapter);
                setEndCardSource.call(this);
            } else {
                LOGGER.error("Can't find end card of type \"" + this.cardType + '"');
            }
        };
        var setEndCardSource = function() {
            var src;
            LOGGER.debug("Set end card source");
            switch(this.cardType) {
                case EndCardType.UP_NEXT:
                    src = this.player.adapter.getNextVideo();
                    break;
                case EndCardType.MOSAIC:
                    break;
            }
            this.endCard.setSource(src);
        };
        return{init:function(player) {
            LOGGER.debug("init");
            this.player = player;
            this.cardType = "next";
            EC.bind(player.adapter, PlayerEvent.VIDEO_START, onVideoStart.bind(this));
        }, eventGroup:null};
    }());
    vdb.override.AdEngineOverrider = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("AEG Overrider");
        return{init:function(overrider) {
            LOGGER.debug("init");
            this._result = {slot:{}};
            this._aeg = [];
            this._overrider = overrider;
        }, override:function(aeg) {
            if (vdb.Utils.isEmpty(this._overrider)) {
                return aeg;
            }
            var result;
            this._aeg = aeg;
            if (vdb.Utils.isArray(this._aeg)) {
                if (!this._overrider["vendor"]) {
                    this._overrider["vendor"] = vdb.Props["aeg.default_vendor"];
                }
                if (this._aeg.length > 0 && this._aeg[0].length > 0) {
                    var first = this._aeg[0][0];
                    delete first["url"];
                    delete first["vastXml"];
                    this._aeg[0][0] = vdb.Utils.extend(first, this._overrider);
                } else {
                    this._aeg[0] = [];
                    this._aeg[0].push(this._overrider);
                }
                result = this._aeg;
            }
            return result;
        }};
    }());
    vdb.override.ExtraOverrider = vdb.core.Class.extend(function() {
        function getCoreExtras() {
            var coreExtras = ["moat", "atp"];
            var extras = [];
            for (var i = 0;i < coreExtras.length;i++) {
                if (vdb.utils.UrlUtils.getParameterByName("o2" + coreExtras[i]) !== "0") {
                    this._addCoreExtra(extras, coreExtras[i]);
                }
            }
            return extras;
        }
        var LOGGER = vdb.log.getLogger("ExtraOverrider");
        return{init:function(context) {
            this._context = context;
            this._allPlayerExtras = [];
            this._overrider = context.getOverrider(vdb.enums.ClientOverrideEnum.EXTRAS);
        }, override:function(config) {
            var uiTemplate = config["playerTemplate"];
            var extras = uiTemplate["extras"] || [];
            extras.push.apply(extras, getCoreExtras.call(this));
            if (vdb.Utils.isArray(this._overrider)) {
                extras = extras.concat(this._overrider);
                LOGGER.info("added client extras", this._overrider);
            }
            var duplicates = this._removeDuplicates(extras, "CORE");
            if (duplicates.length > 0) {
                LOGGER.info("removed duplicated core extras", duplicates);
            }
            uiTemplate["extras"] = extras;
        }, _addCoreExtra:function(extras, name) {
            extras.push({"name":name, "urls":{"CORE":this._context.getCdnUrl("js/extras/" + name + ".js")}});
            LOGGER.info("added core extra", name);
        }, _removeDuplicates:function(extras, type) {
            var names = [];
            var unique = [];
            var duplicates = [];
            var allowDuplicatesFor = ["extensionloader"];
            for (var i = 0;i < extras.length;i++) {
                var extra = extras[i];
                var url = extra["urls"][type];
                var match = /([^\/]+)\.js$/.exec(url);
                if (!match) {
                    unique.push(extra);
                } else {
                    var name = match[1];
                    if (vdb.Utils.indexOf(names, name) === -1 || vdb.Utils.indexOf(allowDuplicatesFor, name) > -1) {
                        names.push(name);
                        unique.push(extra);
                    } else {
                        duplicates.push(extra);
                    }
                }
            }
            extras.length = 0;
            extras.push.apply(extras, unique);
            return duplicates;
        }};
    }());
    vdb.override.MacroOverrider = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("MacroOverrider");
        var ValueParser = new vdb.ValueParser;
        var PARSER_TYPE = ValueParser.PARSER_TYPE;
        var PlayerMacros = vdb.constants.PlayerMacros;
        var OVERRIDE_MAP = {};
        var _overrideMacro = function(object, macro) {
            var value = this._context.getMacro(macro);
            if (value !== undefined) {
                var override = OVERRIDE_MAP[macro];
                value = ValueParser.parse(value, override.parser);
                if (value !== undefined) {
                    LOGGER.info("propery has been ovverriden by macro, " + macro + ", " + value);
                    if (vdb.Utils.isArray(override.param)) {
                        var i = 0;
                        for (var len = override.param.length;i < len;++i) {
                            object[override.param[i]] = value;
                        }
                    } else {
                        object[override.param] = value;
                    }
                }
            }
        };
        OVERRIDE_MAP[PlayerMacros.PLAYBACK] = {param:["initialization", "mobileInit"], parser:PARSER_TYPE.STRING};
        OVERRIDE_MAP[PlayerMacros.AUTO_PLAY_IN_VIEW] = {param:"autoplayInView", parser:PARSER_TYPE.NUMBER};
        OVERRIDE_MAP[PlayerMacros.INITIALVOLUME] = {param:"initialVolume", parser:PARSER_TYPE.FLOAT};
        OVERRIDE_MAP[PlayerMacros.SOUND] = {param:"sound", parser:PARSER_TYPE.STRING};
        OVERRIDE_MAP[PlayerMacros.ISRESPONSIVE] = {param:"isResponsive", parser:PARSER_TYPE.BOOLEAN};
        OVERRIDE_MAP[PlayerMacros.ENABLE_SUBSCRIPT] = {param:"enableSubscript", parser:PARSER_TYPE.STRING};
        OVERRIDE_MAP[PlayerMacros.LANGUAGEAUTODETECTION] = {param:"languageAutoDetection", parser:PARSER_TYPE.STRING};
        OVERRIDE_MAP[PlayerMacros.PREVIEWPOSTER] = {param:"previewPoster", parser:PARSER_TYPE.STRING};
        OVERRIDE_MAP[PlayerMacros.TIMELINEPREVIEW] = {param:"timelinepreview", parser:PARSER_TYPE.BOOLEAN};
        return{init:function(context) {
            LOGGER.debug("init");
            this._context = context;
        }, override:function(object) {
            for (var macro in OVERRIDE_MAP) {
                if (Object.prototype.hasOwnProperty.call(OVERRIDE_MAP, macro)) {
                    _overrideMacro.call(this, object, macro);
                }
            }
        }};
    }());
    vdb.reporter = {};
    vdb.reporter.VideoProgressCalculator = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("VideoProgressCalculator");
        var _duration;
        var setVideoDuration = function(duration) {
            _duration = duration;
        };
        var init = function(duration) {
            LOGGER.debug("init");
            if (duration) {
                setVideoDuration(duration);
            }
        };
        var _getPortion = function(currentTime, portionCount) {
            var portionTime = _duration / portionCount;
            return Math.floor(currentTime / portionTime);
        };
        var getQuartile = function(currentTime) {
            return _getPortion(currentTime, 4);
        };
        var getDecile = function(currentTime) {
            return _getPortion(currentTime, 10);
        };
        return{init:init, setVideoDuration:setVideoDuration, getQuartile:getQuartile, getDecile:getDecile};
    }());
    vdb.reporter.ThirdPartyContentTracker = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("ThirdPartyContentTracker");
        var init = function(player, resolver) {
            LOGGER.debug("init");
            this._player = player;
            this._videoProgressCalculator = new vdb.reporter.VideoProgressCalculator;
            bindEvents.call(this, resolver);
        };
        var bindEvents = function(resolver) {
            var pixelTracker = vdb.tracking.PixelTracker;
            var playerContentEvents = vdb.constants.PlayerEvent.getContentEventList();
            var contentEventKeys = playerContentEvents.keys();
            var contentEventPrefix = vdb.constants.PlayerEvent.CONTENT_PREFIX;
            for (var contentEventKey;contentEventKeys.hasNext();) {
                contentEventKey = contentEventKeys.next();
                this._player.addEventListener(playerContentEvents.get(contentEventKey), function(event) {
                    if (!event["data"]) {
                        return;
                    }
                    var type = event["type"];
                    var data = event["data"];
                    type = type.indexOf(contentEventPrefix) === 0 ? type.substr(contentEventPrefix.length) : type;
                    type += data["quartile"] ? data["quartile"] : "";
                    var contentType = "";
                    for (var dataKey in data) {
                        if (dataKey.toLowerCase() === type) {
                            contentType = dataKey;
                            break;
                        }
                    }
                    if (contentType.length > 0) {
                        var pixels = typeof data[contentType] === "string" ? [data[contentType]] : data[contentType];
                        for (var i = 0;pixels && i < pixels.length;i++) {
                            pixelTracker.callExternalPixel(resolver.resolve(pixels[i]));
                        }
                    }
                });
            }
        };
        var setVideo = function(video) {
            this._currentVideo = video || null;
            this._currentQuartile = 0;
        };
        var setVideoDuration = function(duration) {
            this._videoProgressCalculator.setVideoDuration(duration);
        };
        var fireVideoTimeUpdate = function(currentTime) {
            if (currentTime > 0) {
                var quartile = this._videoProgressCalculator.getQuartile(currentTime);
                if (this._currentQuartile < quartile && quartile < 4) {
                    this._currentQuartile++;
                    fireContentQuartile.call(this, this._currentQuartile);
                    fireVideoTimeUpdate.call(this, currentTime);
                }
            }
        };
        var fireContentImpression = function() {
            this._player.dispatchEvent({"type":vdb.constants.PlayerEvent.CONTENT_IMPRESSION, "data":this._currentVideo.metadata.content});
        };
        var fireContentView = function() {
            this._player.dispatchEvent({"type":vdb.constants.PlayerEvent.CONTENT_VIEW, "data":this._currentVideo.metadata.content});
        };
        var fireContentClick = function() {
            this._player.dispatchEvent({"type":vdb.constants.PlayerEvent.CONTENT_CLICK, "data":this._currentVideo.metadata.content});
        };
        var fireContentQuartile = function(quartile) {
            var data = this._currentVideo.metadata["content"] ? JSON.parse(JSON.stringify(this._currentVideo.metadata["content"])) : {};
            data["quartile"] = quartile;
            this._player.dispatchEvent({"type":vdb.constants.PlayerEvent.CONTENT_QUARTILE, "data":data});
        };
        return{init:init, setVideo:setVideo, setVideoDuration:setVideoDuration, fireVideoTimeUpdate:fireVideoTimeUpdate, fireContentImpression:fireContentImpression, fireContentView:fireContentView, fireContentClick:fireContentClick, fireContentQuartile:fireContentQuartile};
    }());
    vdb.tracking.ErrorTracker = vdb.tracking.PrimalTracker.extend(function() {
        var MAX_DETAILS_LENGTH = 3E3;
        var Dependencies = vdb.enums.Dependencies;
        return{init:function(dependencies) {
            var config = dependencies[Dependencies.CONFIG];
            var debugInfo = dependencies[Dependencies.DEBUG_INFO];
            var urls = dependencies[Dependencies.URLS];
            this._super(config, debugInfo, urls);
            this._environment = dependencies[Dependencies.ENVIRONMENT];
        }, trackError:function(type, subtype, details, code) {
            var detailsStr = vdb.Utils.jsonStringify(details) || "";
            var integration = this._environment.getIntegration();
            this.callPixel("error.gif", {"et":type, "st":subtype, "dt":detailsStr.substring(0, MAX_DETAILS_LENGTH), "ec":code || "", "itg":integration, "sact":this._config.getSact()});
        }, trackNoParameters:function(parameters, additionalInfo) {
            var details = {"params":parameters};
            vdb.Utils.copy(additionalInfo, details);
            this.trackError("no_params", undefined, details);
        }, unavailable:function() {
            this.callPixel("not-available.gif");
        }};
    }(), [vdb.enums.Dependencies.ENVIRONMENT, vdb.enums.Dependencies.CONFIG, vdb.enums.Dependencies.DEBUG_INFO, vdb.enums.Dependencies.URLS]);
    vdb.reporter.VidibleContentTracker = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("VidibleContentTracker");
        var init = function(player, ctx) {
            LOGGER.debug("init");
            this._videoProgressCalculator = new vdb.reporter.VideoProgressCalculator;
            this._player = player;
            this._videoTracker = ctx.createVideoTracker();
            this._beOnTrackParams = null;
            this._context = ctx.ctx;
            this.tracker = this._context.getInjector().resolveSync(vdb.enums.Dependencies.PIXEL_TRACKER);
            this._errorTracker = this._context.getInjector().resolveSync(vdb.enums.Dependencies.ERROR_TRACKER);
            this.trackParameters = {"pid":this._context.playerId, "bcid":this._context.buyerCompanyId, "r":this._context.getReferrer()};
            this.beOnPixelsSent = [];
            this.video3secTimer = new vdb.utils.Timer;
            player.addEventListener(vdb.constants.PlayerEvent.VIDEO_SELECTED, function() {
                this.tracker.callPixel("video-impression.gif", this.trackParameters);
            }.bind(this));
        };
        var fireBeOnContentImpression = function() {
            var pixel = "vast-impression.gif";
            if (this.beOnContentImpressionSent) {
                return;
            }
            if (this.asid && this.acid) {
                this.tracker.callPixel(pixel, this._beOnTrackParams);
                this.beOnContentImpressionSent = true;
                this.beOnPixelsSent.push(pixel);
            }
        };
        var populateTrackingParamsForBeOn = function(video) {
            this.asid = video.metadata["asid"] || undefined;
            this.acid = video.metadata["acid"] || undefined;
            this.trackParameters["acid"] = this.acid;
            this.trackParameters["asid"] = this.asid;
            this.trackParameters["vid"] = video.id;
            this._beOnTrackParams = this.trackParameters;
            fireBeOnContentImpression.call(this);
        };
        var setVideo = function(video) {
            this._currentVideo = video || null;
            populateTrackingParamsForBeOn.call(this, this._currentVideo);
        };
        var setVideoDuration = function(duration) {
            this._duration = duration;
            this._videoProgressCalculator.setVideoDuration(duration);
        };
        var _trackVideoPlay = function(video) {
            this._videoTracker.trackPlay(video);
        };
        var _trackVideoAutoPause = function(video) {
            this._videoTracker.trackAutoPause(video);
        };
        var _callExternalPixel = function(pixelURL) {
            var tracker = vdb.dom.createElement("img");
            LOGGER.debug("PIXEL", pixelURL);
            tracker.src = pixelURL;
            this.beOnPixelsSent.push(pixelURL);
        };
        var _trkAdPixel = function(baseUrl, parameters) {
            var pixelParams = {};
            var pixelURL;
            vdb.Utils.copy(this._context.getParameters(), pixelParams);
            vdb.Utils.copy(parameters, pixelParams);
            pixelURL = baseUrl + (pixelParams ? "?" + vdb.Utils.serialize(pixelParams) : "");
            if (this._context.preview) {
                LOGGER.debug("PIXEL (log only)", pixelURL);
            } else {
                _callExternalPixel.call(this, pixelURL);
            }
        };
        var _trackVideoPlayForBeOn = function() {
            if (this.asid && this.acid) {
                _trkAdPixel.call(this, this._context.getAdServerUrl("ads/ad-start.gif"), this.trackParameters);
                _trkAdPixel.call(this, this._context.getAdServerUrl("ads/av-view.gif"), this.trackParameters);
            }
        };
        var _on3secTimer = function() {
            this.video3secTimer.clean();
            this._videoTracker.track3sec(this._currentVideo);
        };
        var fireStartPlaying = function() {
            this._currentQuartile = 0;
            this._currentDecile = 0;
            _trackVideoPlay.call(this, this._currentVideo);
            _trackVideoPlayForBeOn.call(this, this._currentVideo);
            this.video3secTimer.schedule(_on3secTimer.bind(this), 3E3);
        };
        var _trackDecile = function() {
            var data = {progress:this._currentDecile};
            this._videoTracker.trackDecile(data, this._currentVideo);
        };
        var _trackQuartile = function() {
            var data = {progress:this._currentQuartile};
            this._videoTracker.trackQuartile(data, this._currentVideo);
            if (this._beOnTrackParams && [1, 2, 3, 4].indexOf(data.progress) > -1 && this.acid && this.asid) {
                this._beOnTrackParams["q"] = data.progress;
                this.tracker.callPixel("vast-quartile.gif", this._beOnTrackParams);
            }
        };
        var fireCompletePlaying = function(currentTime, completed) {
            if (completed) {
                this._currentQuartile = 4;
                this._currentDecile = 10;
                _trackDecile.call(this);
                _trackQuartile.call(this);
                this.video3secTimer.pause();
            }
        };
        var _fireQuartile = function(currentTime) {
            var quartile = this._videoProgressCalculator.getQuartile(currentTime);
            this._currentQuartile = this._currentQuartile || 0;
            if (this._currentQuartile < quartile && quartile < 4) {
                this._currentQuartile++;
                _trackQuartile.call(this);
                _fireQuartile.call(this, currentTime);
            }
        };
        var _fireDecile = function(currentTime) {
            var decile = this._videoProgressCalculator.getDecile(currentTime);
            if (this._currentDecile < decile && decile < 10) {
                this._currentDecile++;
                _trackDecile.call(this);
                _fireDecile.call(this, currentTime);
            }
        };
        var firePlaybackPixels = function(currentTime) {
            if (currentTime > 0) {
                _fireDecile.call(this, currentTime);
                _fireQuartile.call(this, currentTime);
            }
        };
        var fireVideoAutoPause = function() {
            _trackVideoAutoPause.call(this, this._currentVideo);
        };
        var onError = function(error) {
            this._errorTracker.trackError("video", undefined, error.message);
        };
        var onVideoPlay = function() {
            this.video3secTimer.resume();
        };
        var onVideoPause = function() {
            this.video3secTimer.pause();
        };
        return{init:init, setVideo:setVideo, setVideoDuration:setVideoDuration, fireStartPlaying:fireStartPlaying, firePlaybackPixels:firePlaybackPixels, fireCompletePlaying:fireCompletePlaying, fireVideoAutoPause:fireVideoAutoPause, onError:onError, onVideoPause:onVideoPause, onVideoPlay:onVideoPlay};
    }());
    vdb.reporting.VideoTracker = vdb.tracking.PlayerPixelTrackerBase.extend(function() {
        function onAdapterCreated(adapter) {
            this._adapter = adapter;
        }
        function onVideoSelected() {
            this._tracked = [];
        }
        function addCommonParams(params, video) {
            this.bufferedParams(params);
            this.videoParams(params, video);
            this.viewabilityParams(params);
        }
        return{init:function(ctx, context) {
            this._super(context);
            this._context = context;
            this._adapter = context.api.adapter;
            this._tracked = [];
            if (context.api.adapter) {
                onAdapterCreated.call(this, context.api.adapter);
            } else {
                context.addEventListener(context.ctx.adapter.CREATED, onAdapterCreated.bind(this));
            }
            context.addEventListener(vdb.constants.PlayerEvent.VIDEO_SELECTED, onVideoSelected.bind(this));
        }, trackPlay:function(video) {
            var params = {};
            var trackerKey = ["play-", video ? video.id : ""].join("");
            this.sizeParams(params);
            this.skinParams(params);
            addCommonParams.call(this, params, video);
            if (this._tracked.indexOf(trackerKey) === -1) {
                this.callPixel("video-play.gif", params);
                this._tracked.push(trackerKey);
            }
        }, trackQuartile:function(data, video) {
            var params = {"q":data.progress};
            addCommonParams.call(this, params, video);
            this.callPixel("video-quartile.gif", params);
        }, trackDecile:function(data, video) {
            var params = {"d":data.progress};
            addCommonParams.call(this, params, video);
            this.callPixel("video-decile.gif", params);
        }, track3sec:function(video) {
            var params = {};
            var trackerKey = ["3sec-", video ? video.id : ""].join("");
            addCommonParams.call(this, params, video);
            if (this._tracked.indexOf(trackerKey) === -1) {
                this.callPixel("video-3sec.gif", params);
                this._tracked.push(trackerKey);
            }
        }, trackAutoPause:function(video) {
            var params = {};
            this.sizeParams(params);
            this.skinParams(params);
            addCommonParams.call(this, params, video);
            this.callPixel("video-auto-pause.gif", params);
        }};
    }());
    vdb.define(function(ctx, context) {
        ctx.createVideoTracker = function() {
            return new vdb.reporting.VideoTracker(ctx, context);
        };
    });
    vdb.tracking.HwmTracker = vdb.tracking.PlayerPixelTrackerBase.extend(function() {
        function _onAdStart(e) {
            this._adData = {"txid":e.data["transactionId"], "rid":e.data["rid"], "adid":e.data["adImpressionId"] || e.data["adId"], "acid":e.data["adCampaignId"] || "", "asid":e.data["adSetId"] || "", "usid":e.data["usid"] || "", "t":0, "al":Math.floor(e.data["duration"])};
        }
        function _onAdTimeUpdate(e) {
            if (this._adData) {
                this._adData["t"] = Math.floor(e.data.currentTime);
            }
        }
        function _trackAdViewTime() {
            if (this._adData) {
                this._adData["vid"] = this._adapter.getCurrentVideoId();
                this.callPixel("ad-view-time.gif", this._adData);
                this._adData = null;
            }
        }
        function _removeEvents() {
            if (this._eventsGroup) {
                this._eventsGroup.unbind();
            }
            if (this._disposeFunc) {
                vdb.events.removeEventListener($win, "beforeunload", this._disposeFunc);
            }
        }
        function _resetVideoId() {
            this.currentVideoId = null;
        }
        function errorTracker() {
            if (!this._errorTracker) {
                this._errorTracker = this._context.getInjector().resolveSync(vdb.enums.Dependencies.ERROR_TRACKER);
            }
            return this._errorTracker;
        }
        function _trackVideoStats(data) {
            var params = {"nv":data.videosPlayed || 0, "t":Math.floor(data.videosPlayedTime) || 0};
            this.bufferedParams(params);
            this.videoParams(params);
            this.viewabilityParams(params);
            this.callPixel("video-stats.gif", params);
        }
        function _trackHWM(data) {
            var video = this._adapter.getCurrentVideo();
            var params = {"pct":data.percentage || 0};
            this.videoPlayedTimeParam(params);
            this.bufferedParams(params);
            this.videoParams(params, video);
            this.viewabilityParams(params);
            this.callPixel("video-time.gif", params);
        }
        function _trackHwmAndStats() {
            if (this._adapter) {
                var state;
                try {
                    state = this._adapter.getPlayerState();
                } catch (error) {
                    LOGGER.error("Can't get player state", error);
                    return;
                }
                LOGGER.debug("UNLOAD", "playerState", state);
                if (this.currentVideoId && this.currentVideoId === state["videoId"]) {
                    LOGGER.debug("Same video - no tracking");
                    return;
                }
                this.currentVideoId = state["videoId"];
                _trackVideoStats.call(this, {videosPlayed:state["totalVideoCount"], videosPlayedTime:state["totalPlayTime"]});
                if (state["videoId"]) {
                    _trackHWM.call(this, {videoId:state["videoId"], percentage:state["currentPercent"], vpt:state["vpt"], seq:state["sequence"]});
                } else {
                    errorTracker.call(this).trackNoParameters("videoId", {"t":Math.floor(state["currentTime"])});
                }
            } else {
                LOGGER.debug("UNLOAD", "(without player adapter)");
            }
        }
        function _bindEvents() {
            var bind = vdb.events.EventContext.bind;
            this._eventsGroup = new vdb.events.EventContextBindGroup(bind(this._adapter, PlayerEvent.AD_START, _onAdStart.bind(this)), bind(this._adapter, PlayerEvent.AD_TIMEUPDATE, _onAdTimeUpdate.bind(this)), bind(this._adapter, PlayerEvent.AD_END, _trackAdViewTime.bind(this)), bind(this._adapter, PlayerEvent.CONTEXT_STARTED, _resetVideoId.bind(this)), bind(this._adapter, PlayerEvent.VIDEO_END, _trackHwmAndStats.bind(this)));
            this._disposeFunc = this.dispose.bind(this);
            vdb.events.addEventListener($win, vdb.Utils.browser.isIos() ? "pagehide" : "beforeunload", this._disposeFunc);
        }
        var PlayerEvent = vdb.constants.PlayerEvent;
        var LOGGER = vdb.log.getLogger("HwmTracker");
        return{init:function(context, adapter) {
            this._super(context);
            this._context = context;
            this._adapter = adapter;
            _bindEvents.call(this);
        }, dispose:function() {
            _trackHwmAndStats.call(this);
            _trackAdViewTime.call(this);
            _removeEvents.call(this);
        }};
    }());
    vdb.tracking.QoETracker = vdb.tracking.PlayerPixelTrackerBase.extend(function() {
        var LOGGER = vdb.log.getLogger("QoETracker");
        var PlayerEvent = vdb.constants.PlayerEvent;
        var EventContext = vdb.events.EventContext;
        var cutQueryString = function(url) {
            return url && url.split("?")[0];
        };
        var onContextIntent = function() {
            this._intentTimestamp = (new Date).getTime();
            var video = this._adapter.getCurrentVideo() || {};
            this._videoUrl = video.videoUrls && video.videoUrls[0];
            this.sendPixel("intent.gif");
        };
        var onVideoStarted = function(event) {
            this._videoUrl = event["data"] && event["data"]["url"];
            this.sendPixel("start.gif", {"ct":"video"});
        };
        var onAdStarted = function(event) {
            this._videoUrl = event["data"] && event["data"]["url"];
            this.sendPixel("start.gif", {"ct":"ad"});
        };
        var onBufferStart = function(isContent, event) {
            var contentType = isContent ? "video" : "ad";
            this._videoUrl = event && event["data"] && event["data"]["url"] || this._videoUrl;
            this._bufferStartTimestamp[contentType] = (new Date).getTime();
            this.sendPixel("buffer-start.gif", {"ct":contentType});
        };
        var onTimeUpdate = function(isContent, event) {
            var contentType = isContent ? "video" : "ad";
            if (contentType === "ad") {
                this._adCurrentTime = event && event["data"] && event["data"]["currentTime"];
            }
            if (this._bufferStartTimestamp[contentType]) {
                this.sendPixel("buffer-end.gif", {"bt":(new Date).getTime() - this._bufferStartTimestamp[contentType], "ct":contentType});
                this._bufferStartTimestamp[contentType] = null;
            }
        };
        var onRayLoad = function(event) {
            this.sendPixel("ray-load.gif", {"lvl":event["level"]});
        };
        var getContentType = function() {
            return this._adapter && this._adapter.isAd() ? "ad" : "video";
        };
        var bindTrackers = function() {
            EventContext.bind(this._adapter, PlayerEvent.CONTEXT_INTENT, onContextIntent.bind(this));
            EventContext.bind(this._adapter, PlayerEvent.AD_START, onAdStarted.bind(this));
            EventContext.bind(this._adapter, PlayerEvent.VIDEO_START, onVideoStarted.bind(this));
            EventContext.bind(this._adapter, PlayerEvent.AD_WAITING, onBufferStart.bind(this, false));
            EventContext.bind(this._adapter, PlayerEvent.VIDEO_WAITING, onBufferStart.bind(this, true));
            EventContext.bind(this._adapter, PlayerEvent.VIDEO_TIMEUPDATE, onTimeUpdate.bind(this, true));
            EventContext.bind(this._adapter, PlayerEvent.AD_TIMEUPDATE, onTimeUpdate.bind(this, false));
            EventContext.bind(this._context, PlayerEvent.LEVEL_SWITCHED, onRayLoad.bind(this));
        };
        var onAdapterCreated = function(adapter) {
            this._adapter = adapter;
            if (this.isCaseOfQoETracking || this.alwaysEnabled || vdb.utils.UrlUtils.getParameterByName("forceqoe")) {
                bindTrackers.call(this);
            }
        };
        return{init:function(context, alwaysEnabled) {
            this._super(context);
            LOGGER.debug("init");
            this._context = context;
            this.alwaysEnabled = alwaysEnabled;
            this._trackingUrl = this._context.urls.TRACKING_QOE_URL;
            this._bufferStartTimestamp = [];
            this.isCaseOfQoETracking = Math.random() < .1;
            if (context.api.adapter) {
                onAdapterCreated.call(this, context.api.adapter);
            } else {
                context.addEventListener(context.ctx.adapter.CREATED, onAdapterCreated.bind(this));
            }
        }, sendPixel:function(name, additionalParameters) {
            this._video = this._adapter && this._adapter.getCurrentVideo() || {};
            var contentType = additionalParameters && additionalParameters["contentType"] || getContentType.call(this);
            var time = contentType === "ad" ? this._adCurrentTime : this._adapter && this._adapter.getPlayerState()["currentTime"];
            time = ~~(time * 1E3);
            var parameters = {"it":(new Date).getTime() - this._intentTimestamp || 0, "vid":this._video.id, "t":time || "", "ct":contentType, "url":cutQueryString(this._videoUrl || this._video.urlToPlay || "")};
            this.callPixel(name, vdb.Utils.extend(parameters, additionalParameters));
        }, trackError:function(error) {
            if (error && error.message) {
                this.sendPixel("error.gif", {"msg":error.message, "ec":error.code || ""});
            }
        }};
    }());
    vdb.utils.BootstrapUtils = function() {
        function isYahooRequired(ctx) {
            var YAHOO_MODULE_MACRO = vdb.constants.PlayerMacros.YAHOO_MODULE;
            var url = vdb.utils.WindowUtil.getTopMostLocation();
            var param = vdb.utils.UrlUtils.getParameterByName(YAHOO_MODULE_MACRO, url);
            var macro = ctx.getMacro(YAHOO_MODULE_MACRO);
            return vdb.Utils.parseBoolean(param || macro);
        }
        return{isYahooRequired:isYahooRequired};
    }();
    vdb.utils.ChromeModeHack = vdb.core.Class.extend(function() {
        var $ = vdb.Utils;
        var shouldSetChromeModeContainerStyles = function() {
            var cmh = vdb.utils.ChromeModeHack;
            var chromeMode = $.browser["chrome"] && !$.mobileOs() && $.browser["version"] >= cmh.CHROME_MODE_BROWSER_VERSION && this._config.getMacro(vdb.constants.PlayerMacros.CHROMEMODE) !== "false";
            var isSmallPlayer = this.container.clientWidth < cmh.CHROME_MODE_MIN_WIDTH || this.container.clientHeight < cmh.CHROME_MODE_MIN_HEIGHT;
            return chromeMode && isSmallPlayer;
        };
        var setChromeModeContainerStyles = function() {
            var cmh = vdb.utils.ChromeModeHack;
            this.containerWidth = this.container.style.width;
            this.containerHeight = this.container.style.height;
            this.containerMaxWidth = this.container.style.maxWidth;
            this.containerMaxHeight = this.container.style.maxHeight;
            this.containerPosition = this.container.style.position;
            this.containerVisibility = this.container.style.visibility;
            var frame = this.container;
            for (this.frameData = [];frame;) {
                try {
                    frame = frame.ownerDocument.defaultView.frameElement;
                    addSpinnerIfNeeded.call(this, frame);
                    if (frame) {
                        this.frameData.push({frame:frame, width:frame.width, height:frame.height, visibility:frame.style.visibility, cssWidth:frame.style.width, cssHeight:frame.style.height});
                        $.setStyle(frame, {"width":cmh.CHROME_MODE_MIN_WIDTH + "px", "height":cmh.CHROME_MODE_MIN_HEIGHT + "px", "visibility":"hidden"});
                        frame.width = cmh.CHROME_MODE_MIN_WIDTH;
                        frame.height = cmh.CHROME_MODE_MIN_HEIGHT;
                    }
                } catch (e) {
                    frame = null;
                }
            }
            $.setStyle(this.container, {"width":cmh.CHROME_MODE_MIN_WIDTH + "px", "height":cmh.CHROME_MODE_MIN_HEIGHT + "px", "max-width":"", "max-height":"", "position":"fixed", "visibility":"hidden"});
        };
        var addSpinnerIfNeeded = function(frame) {
            if (frame !== this._rootContainer.ownerDocument.defaultView.frameElement) {
                return;
            }
            this.spinner = vdb.Utils.createElement("div", {"class":"vdb-chrome-hack-background", "style":"background-color: #000000; width: " + frame.clientWidth + "; height: " + frame.clientHeight + ";"});
            var loader = vdb.Utils.createElement("div", {"class":"vdb-player-spinner"}, this.spinner);
            $.setStyle(loader, {"left":frame.clientWidth / 2 - 33 + "px", "top":frame.clientHeight / 2 - 33 + "px"});
            frame.parentNode.insertBefore(this.spinner, frame);
        };
        var removeSpinner = function() {
            vdb.Utils.removeFromParent(this.spinner);
        };
        var resetContainerStyles = function() {
            removeSpinner.call(this);
            var frame = this.container;
            for (var i = 0;i < this.frameData.length;i++) {
                try {
                    var data = this.frameData[i];
                    frame = data.frame;
                    if (frame) {
                        frame.style.visibility = data.visibility;
                        if (data.width) {
                            frame.width = data.width;
                        } else {
                            frame.removeAttribute("width");
                        }
                        if (data.height) {
                            frame.height = data.height;
                        } else {
                            frame.removeAttribute("height");
                        }
                        $.setStyle(frame, {"width":data.cssWidth, "height":data.cssHeight, "visibility":data.visibility});
                    }
                } catch (e) {
                }
            }
            this.frameData = null;
            $.setStyle(this.container, {"width":this.containerWidth, "height":this.containerHeight, "max-width":this.containerMaxWidth, "max-height":this.containerMaxHeight, "position":this.containerPosition, "visibility":this.containerVisibility});
        };
        return{init:function(config, container, rootContainer) {
            this._config = config;
            this.container = container;
            this._rootContainer = rootContainer || container;
            if (shouldSetChromeModeContainerStyles.call(this)) {
                setChromeModeContainerStyles.call(this);
                $.addClass(this._rootContainer.parentElement, vdb.utils.ChromeModeHack.CHROME_MODE_HACK_CLASS_NAME);
            }
        }, resetSettings:function() {
            if (this.frameData) {
                resetContainerStyles.call(this);
                $.removeClass(this._rootContainer.parentElement, vdb.utils.ChromeModeHack.CHROME_MODE_HACK_CLASS_NAME);
            }
        }};
    }());
    vdb.utils.ChromeModeHack.CHROME_MODE_BROWSER_VERSION = 45;
    vdb.utils.ChromeModeHack.CHROME_MODE_MIN_WIDTH = 500;
    vdb.utils.ChromeModeHack.CHROME_MODE_MIN_HEIGHT = 300;
    vdb.utils.ChromeModeHack.CHROME_MODE_HACK_CLASS_NAME = "chrome-mode-hack-on";
    vdb.utils.Common = function() {
        var LOGGER = vdb.log.getLogger("Html5CommonUtils");
        var utl = vdb.Utils;
        var IMAGE_SERVICE_MAX_WIDTH = 4096;
        var IMAGE_SERVICE_MAX_HEIGHT = 2160;
        var TEST_VIDEO = vdb.dom && vdb.dom.createElement("video") || document.createElement("video");
        return{getTestVideo:function() {
            return TEST_VIDEO;
        }, isDescendant:function(descendant, ancestor) {
            for (;descendant && descendant.tagName.toLowerCase() !== "html";) {
                if (descendant === ancestor) {
                    return true;
                }
                descendant = descendant.parentNode;
            }
            return false;
        }, isExecCommandSupported:typeof document.execCommand !== "undefined", getOffset:function(elem) {
            var docElem;
            var box = {top:0, left:0};
            var doc = elem && elem.ownerDocument;
            var offset;
            if (doc) {
                docElem = doc.documentElement;
                if (elem.getBoundingClientRect !== undefined) {
                    box = elem.getBoundingClientRect();
                }
                offset = {top:box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0), left:box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)};
            }
            return offset;
        }, show:function(elems) {
            elems = utl.toCollection(elems);
            for (var i = 0;i < elems.length;++i) {
                if (elems[i].style.display === "none") {
                    if (utl.isIE) {
                        elems[i].style.removeProperty("display");
                    }
                    elems[i].style.display = null;
                }
                if (elems[i].style.visibility === "hidden") {
                    if (utl.isIE) {
                        elems[i].style.removeProperty("visibility");
                    }
                    elems[i].style.visibility = null;
                }
                if (getComputedStyle(elems[i]).display === "none") {
                    elems[i].style.display = "block";
                }
                if (getComputedStyle(elems[i]).visibility === "hidden") {
                    elems[i].style.visibility = "visible";
                }
            }
        }, hide:function(elems, preserveSpace) {
            elems = utl.toCollection(elems);
            for (var i = 0;i < elems.length;++i) {
                if (preserveSpace) {
                    elems[i].style.visibility = "hidden";
                } else {
                    elems[i].style.display = "none";
                }
            }
        }, toggle:function(elems, condition) {
            if (condition) {
                vdb.utils.Common.show(elems);
            } else {
                vdb.utils.Common.hide(elems);
            }
        }, isHidden:function(elem) {
            return!!(elem.style.display === "none" || elem.style.visibility === "hidden");
        }, formatTime:function(timeInSecs, displayHours, displayMilliseconds) {
            var roundedTimeInSecs = Math.round(timeInSecs);
            var hours = ~~(roundedTimeInSecs / 3600);
            var timeMinusHours = roundedTimeInSecs - hours * 3600;
            var minutes = ~~(timeMinusHours / 60);
            var milliseconds = displayMilliseconds ? +(timeInSecs % 1).toFixed(3).substring(2) : 0;
            var seconds = ~~(timeMinusHours - minutes * 60) - (milliseconds > 500 ? 1 : 0);
            return(hours > 0 || displayHours ? (hours < 10 ? "0" : "") + hours + ":" : "") + (minutes < 10 ? "0" : "") + minutes + ":" + (seconds < 10 ? "0" : "") + seconds + (milliseconds ? "." + milliseconds : "");
        }, openLinkInNewTab:function(url) {
            var newTab;
            if (utl.isString(url)) {
                newTab = window.open(url, "_blank");
                newTab.focus();
            } else {
                LOGGER.error("Failed to open new tab due to invalid url", url);
            }
            return newTab;
        }, isWebkitFullscreenVideoSupported:"webkitEnterFullScreen" in document.createElement("video"), getFirstValue:function(obj) {
            return obj[Object.keys(obj)[0]];
        }, getObjectSize:function(obj) {
            return Object.keys(obj).length;
        }, addParameterToURL:function(url, param, value) {
            return url + (utl.indexOf(url, "?") > -1 ? "&" : "?") + param + "=" + value;
        }, getThumbnailModifiedUrl:function(url, fullSizeUrl, width, height, isSecure) {
            var cdnDomain = isSecure ? vdb.Props["cdn.domain.secure"] : vdb.Props["cdn.domain"];
            var cdn2Domain = vdb.Props["cdn2.domain.secure"];
            var imageServiceUrl = isSecure ? vdb.Props["imageservice.url.secure"] : vdb.Props["imageservice.url"];
            if (fullSizeUrl) {
                var modifiedUrl;
                if (fullSizeUrl.indexOf(cdnDomain) > -1) {
                    modifiedUrl = fullSizeUrl.replace(cdnDomain, imageServiceUrl);
                } else {
                    if (fullSizeUrl.indexOf(cdn2Domain) > -1) {
                        modifiedUrl = fullSizeUrl.replace(cdn2Domain, imageServiceUrl);
                    } else {
                        if (fullSizeUrl.indexOf(imageServiceUrl) > -1) {
                            modifiedUrl = fullSizeUrl;
                        }
                    }
                }
                if (modifiedUrl) {
                    modifiedUrl = this.addParameterToURL(modifiedUrl, "w", Math.min(width, IMAGE_SERVICE_MAX_WIDTH));
                    modifiedUrl = this.addParameterToURL(modifiedUrl, "h", Math.min(height, IMAGE_SERVICE_MAX_HEIGHT));
                    url = modifiedUrl;
                }
            }
            if (!url) {
                return fullSizeUrl;
            }
            if (url.indexOf("thumbnails.5min.com") === -1) {
                return url;
            }
            var sizePart = "_" + width + "_" + height;
            var parts = url.split("/");
            var nameParts = parts.pop().split(".");
            var extension = "." + nameParts.pop();
            nameParts = nameParts.pop().split("_");
            if (nameParts.length < 2) {
                return url;
            }
            return parts.join("/") + "/" + nameParts.slice(0, 2).join("_") + sizePart + extension;
        }, hexColorFromInt:function(num) {
            var hax = num.toString(16);
            for (var zeros = [];hax.length + zeros.length < 6;) {
                zeros.push("0");
            }
            return "#" + zeros.join("") + hax;
        }, shuffleArray:function(array) {
            var n = array.length;
            for (var i = n - 1;i > 0;i--) {
                var j = ~~(Math.random() * (i + 1));
                var itemToExchangeTo = array[i];
                array[i] = array[j];
                array[j] = itemToExchangeTo;
            }
            return array;
        }, queryStringFromObject:function(obj, partial, order) {
            var strArr = [];
            if (order) {
                for (var i = 0;i < order.length;++i) {
                    var key = order[i];
                    strArr.push(encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]));
                }
            } else {
                for (var p in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, p)) {
                        strArr.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                    }
                }
            }
            return(partial ? "" : "?") + strArr.join("&");
        }, getSimplifiedParams:function(params, prefix) {
            if (!prefix || prefix.length === 0) {
                return params;
            }
            var prefixLength = prefix.length;
            var simplifiedParams = {};
            for (var key in params) {
                if (Object.prototype.hasOwnProperty.call(params, key)) {
                    if (key.indexOf(prefix) === 0) {
                        simplifiedParams[key.substring(prefixLength)] = params[key];
                    }
                }
            }
            return simplifiedParams;
        }, toDataUrl:function(url, callback, outputFormat) {
            var img = new Image;
            img.crossOrigin = "Anonymous";
            img.onload = function() {
                var canvas = document.createElement("CANVAS");
                var ctx = canvas.getContext("2d");
                var dataURL;
                canvas.height = this.height;
                canvas.width = this.width;
                ctx.drawImage(this, 0, 0);
                dataURL = canvas.toDataURL(outputFormat);
                callback(dataURL);
                canvas = null;
            };
            img.src = url;
        }, makeEvent:function(type, data) {
            var event = document.createEvent("Events");
            event.initEvent(type, true, true);
            vdb.Utils.copy(data, event);
            return event;
        }, sendKeyDown:function(element, keyCode) {
            element.dispatchEvent(this.makeEvent("keydown", {keyCode:keyCode, which:keyCode}));
        }, inherit:function(subClass, superClass) {
            var Class = function() {
            };
            Class.prototype = superClass.prototype;
            subClass.prototype = new Class;
            subClass.prototype.constructor = subClass;
        }, isCarouselThumbVisible:function(elem) {
            if (elem.nodeName === "BODY") {
                return false;
            }
            var p = elem;
            for (var isOverflow = false;(p = p.parentNode) && p.nodeName !== "BODY";) {
                if (window.getComputedStyle(p)["overflow"] === "hidden") {
                    isOverflow = true;
                    break;
                }
            }
            if (isOverflow) {
                var er = elem.getBoundingClientRect();
                var pr = p.getBoundingClientRect();
                return er.left < pr.right && er.top < pr.bottom;
            }
            return false;
        }, isTouchClick:function(e) {
            return e.pointerType === "touch";
        }, isSupported:function(mimeType) {
            return!!this.getCanPlayType(mimeType);
        }, isHlsSupported:function() {
            return this.isSupported("application/vnd.apple.mpegurl");
        }, getCanPlayType:function(mimeType) {
            var testVideo = this.getTestVideo();
            try {
                return testVideo && typeof testVideo.canPlayType === "function" && (!mimeType || testVideo.canPlayType(mimeType));
            } catch (e) {
                return false;
            }
        }};
    }();
    vdb.extras.BasePublisherPromo = vdb.extras.Html5Extra.extend(function() {
        var LOGGER = vdb.log.getLogger("PublisherPromo");
        var utl = vdb.Utils;
        var ANIMATION_TIME = 500;
        var FULLSCREEN_MULTIPLIER = 2;
        var CONSTANT_BOTTOM = 44;
        var CONSTANT_FULLSCREEN_BOTTOM = 74;
        var CONSTANT_LEFT = 40;
        var _removeProtocol = function(str) {
            return str ? str.replace("https:", "").replace("http:", "") : str;
        };
        var _isMp4Asset = function() {
            return utl.getExtensionFromUrl(this.promoUrl) === "mp4";
        };
        var _getClosedAssets = function() {
            var storedClosedAssets = vdb.localStorage.getItem("fpa");
            return storedClosedAssets ? storedClosedAssets.split(",") : [];
        };
        var _createClickThroughAnchor = function() {
            if (this.clickThroughUrl) {
                var clickThroughAnchor = utl.createElement("a", {"href":this.clickThroughUrl, "target":"_blank"}, this.assetContainer);
                clickThroughAnchor.addEventListener("click", function() {
                    this.controller.pause();
                }.bind(this));
            }
        };
        var _clear = function() {
            clearTimeout(this.insertTimeout);
            clearTimeout(this.displayTimeout);
            this.insertTimeout = null;
            this.displayTimeout = null;
            if (this.assetContainer) {
                utl.addClass(this.assetContainer, "invisible");
                setTimeout(function() {
                    if (this.assetContainer.parentNode) {
                        this.assetContainer.parentNode.removeChild(this.assetContainer);
                    }
                }.bind(this), this.animationTime);
            }
        };
        var _startDuration = function() {
            setTimeout(function() {
                utl.removeClass(this.assetContainer, "invisible");
            }.bind(this), 100);
            this.displayTimeout = setTimeout(_clear.bind(this), this.durationToDisplay - this.animationTime);
        };
        var _createVideoAsset = function() {
            var assetEl = utl.createElement("video", {"src":this.promoUrl, "autoplay":"autoplay", "loop":"loop", "muted":"muted"}, this.assetContainer);
            assetEl.addEventListener("play", _startDuration.bind(this));
        };
        var _onImageAssetLoad = function() {
            this.imageAsset.removeEventListener("load", this.onImageAssetLoad);
            _startDuration.call(this);
            this.imageAsset.src = this.promoUrl;
        };
        var _createImageAsset = function() {
            this.imageAsset = utl.createElement("img", {"src":this.promoUrl}, this.assetContainer);
            this.onImageAssetLoad = _onImageAssetLoad.bind(this);
            this.imageAsset.addEventListener("load", this.onImageAssetLoad);
        };
        var _closeAsset = function() {
            _clear.call(this);
            var closedAssets = _getClosedAssets();
            var indexOfCurrentAssestInClosedAssests = closedAssets.indexOf(this.promoUrl);
            if (indexOfCurrentAssestInClosedAssests === -1) {
                closedAssets.push(this.promoUrl);
            }
            vdb.localStorage.setItem("fpa", closedAssets.join(","));
        };
        var _createCloseBtn = function() {
            if (this.showCloseButton) {
                var closeBtn = utl.createElement("div", {"class":"close-btn"}, this.assetContainer, '<svg class="player-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 5 5"><path d="M2,2h1v1H2V2z"/><path d="M1,1h1v1H1V1z"/><path d="M0,0h1v1H0V0z"/><path d="M1,3h1v1H1V3z"/><path d="M0,4h1v1H0V4z"/><path d="M3,1h1v1H3V1z"/><path d="M4,0h1v1H4V0z"/><path d="M3,3h1v1H3V3z"/><path d="M4,4h1v1H4V4z"/></svg>');
                closeBtn.addEventListener("click", _closeAsset.bind(this));
            }
        };
        var _createAsset = function(skin) {
            var rndNum = ~~(Math.random() * 1E6);
            var assetContainerId = "asset-container-" + rndNum;
            this.assetContainer = utl.createElement("div", {"id":assetContainerId, "class":"asset-container invisible", "style":"height:" + (this.height > 0 ? this.height + "px;" : "auto;")});
            var cssText = "#" + assetContainerId + "{width: " + this.width + "px;bottom: " + (CONSTANT_BOTTOM + this.y) + "px;left: " + (CONSTANT_LEFT + this.x) + "px;}" + ".fullscreen-mode #" + assetContainerId + "{width: " + this.fullScreenWidth + "px;bottom: " + (CONSTANT_FULLSCREEN_BOTTOM + this.y) + "px;}";
            vdb.dom.embedCssToHead(cssText, this.head);
            if (_isMp4Asset.call(this)) {
                _createVideoAsset.call(this);
            } else {
                _createImageAsset.call(this);
            }
            _createClickThroughAnchor.call(this);
            _createCloseBtn.call(this);
            skin.controlsBarContainer.insertBefore(this.assetContainer, skin.controlBarWrapper);
        };
        var _addAsset = function() {
            if (_getClosedAssets().indexOf(this.promoUrl) === -1) {
                this.controller.getSkin().then(_createAsset.bind(this));
            }
        };
        var _onVideoStart = function() {
            this.insertTimeout = setTimeout(_addAsset.bind(this), this.insertAfter);
        };
        var _attachPlayerEvents = function() {
            this.player.addEventListener(vdb.constants.PlayerEvent.VIDEO_START, _onVideoStart.bind(this));
            this.player.addEventListener(vdb.constants.PlayerEvent.AD_META, _clear.bind(this));
            this.player.addEventListener(vdb.constants.PlayerEvent.VIDEO_END, _clear.bind(this));
        };
        return{initExtra:function(config, playerController) {
            this._super(config, playerController);
            this.config = config["config"];
            this.region = config["region"];
            var showOnMobile = this.config["showOnMobile"];
            var isMobile = utl.mobileOs();
            if (isMobile && !showOnMobile) {
                LOGGER.debug("mobile = ", isMobile, "showOnMobile = ", showOnMobile, " -> no promo");
                return;
            }
            LOGGER.debug("init");
            this.animationTime = ANIMATION_TIME;
            this.x = this.region["x"];
            this.y = this.region["y"];
            this.width = this.region["w"];
            this.fullScreenWidth = this.width * FULLSCREEN_MULTIPLIER;
            this.height = this.region["h"];
            this.promoUrl = _removeProtocol(this.config["promoUrl"]);
            this.clickThroughUrl = _removeProtocol(this.config["clickThroughUrl"]);
            this.insertAfter = 1E3 * (this.config["insertAfter"] || 0);
            this.durationToDisplay = 1E3 * (this.config["durationToDisplay"] || 0);
            if (this.durationToDisplay > this.animationTime) {
                this.durationToDisplay -= this.animationTime;
            }
            this.showCloseButton = this.config["showCloseButton"] !== "false";
            this.player = playerController.getPlayer();
            this.controller = playerController;
            _attachPlayerEvents.call(this);
        }};
    }());
    vdb.utils.HtmlInjector = vdb.core.Class.extend(function() {
        function waitAndInject(iframe, html, opts) {
            var isolateErrors = opts.isolateErrors;
            var onLoaded = opts.onLoaded;
            var prepareCB = opts.prepareCB;
            var doc = iframe.contentDocument;
            var win = iframe.contentWindow;
            if (!doc) {
                setTimeout(waitAndInject.bind(this, iframe, html, opts), 0);
                return;
            }
            doc.open();
            if (prepareCB) {
                prepareCB(iframe);
            }
            if (onLoaded) {
                win["onLoaded"] = function() {
                    onLoaded(iframe);
                };
                var isIE8OrLess = vdb.Utils.isIE && vdb.Utils.browser["version"] <= 8;
                if (!isolateErrors && !isIE8OrLess) {
                    win["onerror"] = function(errorMsg, url, lineNumber, column) {
                        vdb.log.getLogger("IframeError").error([errorMsg, "Url: ", url, "Line: ", lineNumber, "Column: ", column].join(", "));
                    };
                }
            }
            doc.write(html);
            doc.close();
        }
        return{init:function(container) {
            this._container = container;
        }, injectPlainHTML:function(html) {
            function onScriptLoaded(script) {
                return function() {
                    var idx = scriptsLoading.indexOf(script);
                    var i = 0;
                    if (idx != -1) {
                        scriptsLoading.splice(idx, 1);
                        if (scriptsLoading.length == 0) {
                            if (navigator.userAgent.indexOf("Firefox/3.") !== -1) {
                                return;
                            }
                            for (i = 0;i < scriptsLocal.length;++i) {
                                eval(scriptsLocal[i].text);
                            }
                        }
                    }
                };
            }
            function currentScripts() {
                var result = [];
                var scripts = document.scripts;
                if (scripts === undefined) {
                    scripts = document.getElementsByTagName("script") || [];
                }
                for (var i = 0;i < scripts.length;i++) {
                    result.push(scripts[i]);
                }
                return result;
            }
            var scriptsBefore = [];
            var scriptsAfter = [];
            var scriptsLocal = [];
            var scriptsLoading = [];
            var i$$0 = 0;
            scriptsBefore = currentScripts();
            this._container.innerHTML = html;
            scriptsAfter = currentScripts();
            for (i$$0 = 0;i$$0 < scriptsAfter.length;i$$0++) {
                var script$$0 = scriptsAfter[i$$0];
                if (scriptsBefore.indexOf(script$$0) == -1) {
                    if (script$$0.text != null && script$$0.text.length > 0) {
                        scriptsLocal.push(script$$0);
                    } else {
                        scriptsLoading.push(script$$0);
                        vdb.dom.loadScript(script$$0.src).then(onScriptLoaded.bind(this, script$$0));
                        this._container.removeChild(script$$0);
                    }
                }
            }
        }, injectIFrame:function(html, opts) {
            opts = opts || {};
            var width = opts.width;
            var height = opts.height;
            width = width ? width + "px" : "100%";
            height = height ? height + "px" : "100%";
            var iframe = vdb.Utils.createElement("iframe", {"src":"javascript:void(0)", "width":width, "height":height, "scrolling":"no", "frameBorder":0, "marginHeight":0, "marginWidth":0}, this._container);
            waitAndInject.call(this, iframe, html, opts);
            return iframe;
        }};
    }());
    vdb.modules.ModuleLoader = vdb.core.Class.extend(function() {
        function loadScripts(html, onLoaded, prepare) {
            this.iframe = (new vdb.utils.HtmlInjector(this.container)).injectIFrame(html, {onLoaded:onLoaded, prepareCB:prepare, isolateErrors:this.isolateErrors});
        }
        var LOGGER = vdb.log.getLogger("ModuleLoader");
        var loadIsolated = function(callback) {
            LOGGER.debug("loadIsolated");
            var prepare = function(iframe) {
                var iwin = iframe.contentWindow;
                var idoc = iframe.contentDocument;
                iframe.setAttribute("allowfullscreen", "");
                if (this.hidden) {
                    iframe.style.cssText = "display:none;";
                } else {
                    iframe.style.cssText = this.style || "width:100%;height:100%;border:0;";
                }
                this.windowPreparer.prepareIsolated(iwin, idoc);
            }.bind(this);
            var onLoaded = function(iframe) {
                var iwin = iframe.contentWindow;
                var idoc = iframe.contentDocument;
                var loadCtr = 0;
                var initModule = function() {
                    var initFuncPath = vdb.Utils.toCollection(this.initFunctionName);
                    var fn = vdb.Utils.getValueOrDefault(iwin, initFuncPath, iwin["init"]);
                    if (fn) {
                        LOGGER.debug("Initializing module", this.scriptUrls);
                        if (callback) {
                            callback(iwin, idoc, this.iframe);
                        }
                    } else {
                        LOGGER.debug("Waiting for module script to be loaded... [" + loadCtr++ + "]", initFuncPath.join("."));
                        if (loadCtr < 30) {
                            setTimeout(initModule, 100);
                        } else {
                            LOGGER.debug("Module failed to load.");
                        }
                    }
                }.bind(this);
                initModule();
            }.bind(this);
            var links = "";
            for (var j = 0;j < this.cssUrls.length;++j) {
                links += '<link rel="stylesheet" type="text/css" href="' + this.cssUrls[j] + '"/>';
            }
            var scripts = "";
            for (var k = 0;k < this.scriptUrls.length;++k) {
                scripts += "<scr" + 'ipt type="text/javascript" src="' + this.scriptUrls[k] + '"></scr' + "ipt>";
            }
            if (this.codeToEval) {
                scripts += "<scr" + 'ipt type="text/javascript">' + this.codeToEval + "</scr" + "ipt>";
            }
            var html = '<!DOCTYPE html><html style="height:100%"><head><meta charset="utf-8">' + '<meta name="viewport" content="initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"/>' + links + '</head><body style="margin:0;height:100%">' + this.html + scripts + "<scr" + 'ipt type="text/javascript">setTimeout(onLoaded,0);</scr' + "ipt>" + "</body></html>";
            var doc = this.container.ownerDocument;
            if (vdb.Utils.isIE && doc.readyState !== "complete") {
                vdb.events.addEventListener(doc, "readystatechange", function() {
                    if (doc.readyState === "complete") {
                        loadScripts.call(this, html, onLoaded, prepare);
                    }
                }.bind(this));
            } else {
                loadScripts.call(this, html, onLoaded, prepare);
            }
        };
        var loadSimple = function(callback) {
            LOGGER.debug("loadSimple");
            this.windowPreparer.prepareSimple(this.window);
            var dom = new vdb.Dom(document);
            dom.loadScript(this.scriptUrls).then(function() {
                if (callback) {
                    setTimeout(vdb.Utils.mkCaller(callback, this.window, $doc), 0);
                }
            });
        };
        return{init:function(opts) {
            this.container = opts.container;
            this.cssUrls = vdb.Utils.toCollection(opts.cssUrls);
            this.scriptUrls = vdb.Utils.toCollection(opts.scriptUrls);
            this.initFunctionName = opts.initFuncName;
            this.codeToEval = opts.codeToEval;
            this.isolated = true;
            this.isolateErrors = false;
            this.html = "";
            this.windowPreparer = opts.windowPreparer || new vdb.modules.WindowPreparer;
            this.window = opts.window || window;
        }, appendHtml:function(html) {
            this.html = html || "";
            return this;
        }, setStyle:function(s) {
            this.style = s;
            return this;
        }, setHidden:function(b) {
            this.hidden = b;
            return this;
        }, setIsolated:function(b) {
            this.isolated = b;
            return this;
        }, setIsolateErrors:function(b) {
            this.isolateErrors = b;
            return this;
        }, load:function(callback) {
            callback = callback || function() {
            };
            LOGGER.debug("load");
            if (this.isolated) {
                loadIsolated.call(this, callback);
            } else {
                this.isolated = false;
                loadSimple.call(this, callback);
            }
            return this;
        }, dispose:function() {
            vdb.Utils.removeFromParent(this.iframe);
        }};
    }());
    vdb.modules.ContextWindowPreparer = vdb.modules.WindowPreparer.extend(function() {
        function init(opts) {
            this._ctx = opts.ctx;
            this._context = opts.context;
        }
        function prepareSimple(win) {
            if (this._ctx.ctx && this._ctx.ctx.isVPAID) {
                window["vidible"].dom = vdb.dom;
                window.vdb.dom = vdb.dom;
            }
            for (var n in $win) {
                if (Object.prototype.hasOwnProperty.call($win, n)) {
                    try {
                        if (vdb.Utils.indexOf(deprecatedWindowFunctions, n) < 0) {
                            if ($win[n] === $win.vdb) {
                                win[n] = vdb.Utils.copy(this._ctx, {});
                            } else {
                                if (win !== $win && $win[n] === undefined || $win[n] === null || $win[n] === true || $win[n] === false) {
                                    win[n] = $win[n];
                                }
                            }
                        }
                    } catch (e) {
                    }
                }
            }
        }
        function prepareIsolated(win, doc) {
            vdb.core.bindFix(win);
            this._ctx.dom = vdb.utils.DomUtils.initDOM(doc);
            this._ctx.ctx = this._context;
            this.prepareSimple(win);
        }
        var deprecatedWindowFunctions = ["webkitStorageInfo", "webkitIndexedDB"];
        return{init:init, prepareSimple:prepareSimple, prepareIsolated:prepareIsolated};
    }());
    vdb.define(function(ctx, context) {
        ctx.createModuleLoader = function(opts) {
            opts.window = $win;
            opts.windowPreparer = new vdb.modules.ContextWindowPreparer({ctx:ctx, context:context});
            return new vdb.modules.ModuleLoader(opts);
        };
    });
    vdb.api.PlayerAPI = vdb.core.Class.extend(function() {
        function executeDeferCommands() {
            for (var cmd;cmd = this.deferCommands.shift();) {
                cmd();
            }
        }
        function onAdapterInitiated(adapter) {
            this.adapter = adapter;
            if (!this.eventProxyAdapter) {
                this.eventProxyAdapter = new vdb.EventProxyAdapter(this);
            }
            this._adapterFuture.resolve(adapter);
        }
        function onAdapterCreated(adapter) {
            LOGGER.debug("onAdapterCreated", adapter);
            onAdapterInitiated.call(this, adapter);
            this.player = this.adapter.player;
            this.hwmTracker = new vdb.tracking.HwmTracker(this._context, this.adapter);
            for (var event in this.handlers) {
                if (Object.hasOwnProperty.call(this.handlers, event) && typeof this.handlers[event] !== "function") {
                    var listener = this.handlers[event];
                    this.adapter.addEventListener(event, listener.handler);
                }
            }
            executeDeferCommands.call(this);
            if (adapter.getPlayerType() === vdb.enums.PlayerType.HTML5) {
                new vdb.modules.EndCardManager(this);
            }
            new vdb.reporting.ContextReporting(this._context);
            vdb.events.EventContext.bindOnce(adapter, PlayerEvent.PLAYER_READY, function() {
                this._context.pageTracker = this._context.pageTracker || new vdb.tracking.PageTracker(this._context);
                this._context.pageTracker.pageInfo();
            }.bind(this));
            adapter.addEventListener(PlayerEvent.CONTEXT_ENDED, function() {
                this._context.setVvuid();
            }.bind(this));
            adapter.addEventListener(PlayerEvent.ENTER_FULLSCREEN, function() {
                this._context.isFullscreen = true;
            }.bind(this));
            adapter.addEventListener(PlayerEvent.EXIT_FULLSCREEN, function() {
                this._context.isFullscreen = false;
            }.bind(this));
        }
        function onConfigLoad(config) {
            this.updateConfig(config);
        }
        function onPlayerError(error) {
            error = error || {};
            error.type = PlayerEvent.PLAYER_ERROR;
            this.dispatchEvent(error);
        }
        function onBidLoad(bid) {
            if (this.adapter && bid["videos"] && bid["videos"]["length"] > 0) {
                this.bid = bid;
                this.adapter.onBidUpdated(bid);
            } else {
                var message = "Server did not return any videos";
                LOGGER.debug(message);
                onPlayerError.call(this, {subtype:vdb.events.PlayerErrorEvent.BID_UPDATE_FAILED, data:message});
            }
        }
        function disposeAdapter() {
            if (this.adapter) {
                this.adapter.dispose();
                this.adapter = undefined;
                this._adapterFuture = new vdb.Future;
            }
        }
        function exposePublicProperties() {
            var api = this;
            this._container["vdb_Context"] = api._context;
            this._container["vdb_Player"] = api;
            this._context["getPlayer"] = function() {
                return api;
            };
            this["div"] = this._container;
        }
        function triggerOnLoadCallback() {
            var onLoad = this._context.getMacro(PlayerMacros.ONLOAD);
            if (onLoad && typeof window[onLoad] === "function") {
                try {
                    window[onLoad](this);
                } catch (e) {
                    LOGGER.error(e);
                }
            }
        }
        function getVideoAspectRatio() {
            var aspectRatioComponents = (this.uiTemplate["aspectRatio"] + "").split(":");
            return aspectRatioComponents.length === 2 && aspectRatioComponents[0] !== "0" ? +aspectRatioComponents[1] / +aspectRatioComponents[0] : vdb.utils.Constants.STANDARD_VIDEO_ASPECT_RATIO;
        }
        function makeResponsive() {
            var isIE = utl.browser["ie"];
            var isAndroid = utl.browser["platform"]["android"];
            var platformVersion = utl.browser["platform"]["version"];
            var browserVersion = utl.browser["version"];
            var containerStyle = this._container.style;
            var playerWrapperStyle = this._playerWrapper.style;
            var containerParent = this._container.parentNode;
            var nonVideoPlayerHeight = this.nonVideoHeight;
            var containerParentInnerHeight;
            var calculatedHeight;
            var useAspectRatio = true;
            containerStyle.width = "100%";
            playerWrapperStyle.width = "100%";
            if (isIE && browserVersion < 8 || isAndroid && platformVersion < 4.4 && utl.browser["safari"]) {
                playerWrapperStyle.height = this.videoAspectRatio * this._container.clientWidth + nonVideoPlayerHeight + "px";
                return;
            }
            if (containerParent !== $win && (containerParentInnerHeight = utl.getInnerHeight(containerParent)) > 0 && containerParentInnerHeight < (calculatedHeight = utl.getInnerWidth(containerParent) * this.videoAspectRatio) + calculatedHeight * .01 && !containerParent.innerText && utl.getSiblings(this._container, true, true).length === 0) {
                containerStyle.height = "100%";
                playerWrapperStyle.height = "100%";
                if (this._container.clientHeight === containerParentInnerHeight) {
                    useAspectRatio = false;
                } else {
                    containerStyle.height = "";
                }
            }
            if (useAspectRatio) {
                playerWrapperStyle.height = nonVideoPlayerHeight + "px";
                playerWrapperStyle.paddingBottom = this.videoAspectRatio * 100 + "%";
            }
            playerWrapperStyle.position = "relative";
            playerWrapperStyle.boxSizing = "content-box";
            playerWrapperStyle.webkitBoxSizing = "content-box";
            playerWrapperStyle.MozBoxSizing = "content-box";
            this._element = utl.createElement("div", {"style":"position: absolute; width: 100%; height: 100%; top: 0; left: 0;"}, this._playerWrapper);
        }
        function getResponsiveLocation(width, height, relationalWidth, top, left) {
            return{paddingBottom:height / width * 100, marginTop:top / relationalWidth * 100, marginLeft:left / relationalWidth * 100};
        }
        function onWinResize() {
            if (this.elementResizeEnabled) {
                var width = this._element.offsetWidth;
                var oldHeight = this._element.offsetHeight;
                var extraHeightForFixedCarousel = this.player && this.player.carouselHeight * (1 - width / this.playerWidth) || 0;
                var newHeight = Math.round(width / this.playerAspectRatio) + extraHeightForFixedCarousel;
                if (oldHeight !== newHeight) {
                    this._element.style.height = newHeight + "px";
                }
            }
            if (this.adapter) {
                this.adapter.onWinResize();
            }
        }
        function makeResizable(maxWidth, maxHeight) {
            var style = this._element.style;
            style.maxWidth = maxWidth + "px";
            style.maxHeight = maxHeight + "px";
            style.width = "100%";
            this.elementResizeEnabled = true;
            this._resizeHandler = onWinResize.bind(this);
            vdb.events.addEventListener($win, "resize", this._resizeHandler);
            this._resizeHandler();
            this._context.isResizable = true;
        }
        function hasError() {
            var serverError = this.config["error"];
            if (serverError) {
                return{subtype:vdb.events.PlayerErrorEvent.SERVER_ERROR, data:serverError.description, message:{title:serverError.title, description:serverError.description, code:serverError.code}};
            }
            var noVideosError = !this._context.preview && !this.playerWidget["adOnly"] && (!this.bid["videos"] || this.bid["videos"].length === 0);
            if (noVideosError) {
                return{subtype:vdb.events.PlayerErrorEvent.NO_VIDEOS_TO_PLAY, data:"No videos to play"};
            }
            return null;
        }
        function loadCoreExtras(callback) {
            var isMoatDisabled = this._context.getMacro(PlayerMacros.DISABLE_MOAT) === "1";
            var coreExtras;
            this._extraManager = new vdb.modules.ExtraManager(vdb.extras.ExtraManagerType.CORE, document, this._ctx, this._context);
            this._extraManager.addEventListener(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_LOADED, function() {
                this._extraManager.initExtras(this._context);
            }.bind(this));
            this._extraManager.addEventListener(vdb.events.PlayerModuleEvent.BLOCKING_EXTRAS_RELEASED, function() {
                if (callback) {
                    callback();
                }
            });
            coreExtras = (new vdb.extras.ExtrasResolver(this.uiTemplate)).getCoreExtras();
            if (isMoatDisabled) {
                coreExtras = utl.filterArr(coreExtras, function(extra) {
                    return extra.name !== "moat";
                });
            }
            this._extraManager.loadExtras(coreExtras);
        }
        function createAdapter() {
            disposeAdapter.call(this);
            var loadingPlaceholderContainer = this.loadingPlaceholder && this.loadingPlaceholder.getContainer();
            for (var i = 0;i < this._element.childNodes.length;++i) {
                if (this._element.childNodes[i] !== loadingPlaceholderContainer) {
                    this._element.removeChild(this._element.childNodes[i]);
                }
            }
            if (this._vpaidAPI) {
                new this._ctx.adapter.VpaidJsAdapter(this._element, this.playerWidget, this.uiTemplate, this.adConfig, this.bid, this.geo, this._vpaidAPI, this._vpaidOptions);
            } else {
                this._ctx.adapter.AdapterFactory.createAdapter(this._element, this.playerWidget, this.uiTemplate, this.adConfig, this.bid, this.geo);
            }
        }
        function hasInReadExpander(uiTemplate) {
            var extrasResolver = new vdb.extras.ExtrasResolver(uiTemplate);
            return extrasResolver.hasExtra("inreadexpander.js");
        }
        function hideForInReadExpander() {
            var height = this._context.isResponsive ? this._playerWrapper.offsetHeight + "px" : this._playerWrapper.style.maxHeight;
            this._container.setAttribute("data-height", height);
            this._container.style.maxHeight = "1px";
        }
        function prepare360Context() {
            this._context.hasVideo360 = vdb.Utils360.has360Videos(this.bid);
            var browser = utl.browser;
            var isIE10orLess = utl.isIE && browser["version"] <= 10;
            var isChrome53OrLessOniOS10 = browser.name === "chrome" && browser.version < 54 && utl.iPhoneOS() >= 10;
            var notSupported = isIE10orLess || isChrome53OrLessOniOS10 || !utl.webglSupport;
            this._context.video360Error = vdb.utils.UrlUtils.getParameterByName("forcets") !== "1" && notSupported;
        }
        function getAutoPlayInView(uiTemplate) {
            var PlaybackMode = vdb.enums.player.PlaybackMode;
            var isAutoplayInView = uiTemplate["initialization"] === PlaybackMode.AUTOPLAY_IN_VIEW;
            var hasDiscoveryPagePreview = vdb.Utils.getWithDefault(this._context.getMacro(PlayerMacros.DISCOVERY_PAGE_PREVIEW), false) === "true";
            var autoplayInView = uiTemplate["autoplayInView"] || 0;
            return!isAutoplayInView || hasDiscoveryPagePreview ? 0 : autoplayInView;
        }
        function getAutoPauseOutOfView(uiTemplate) {
            var autoPauseOutOfView = uiTemplate["autoPauseOutOfView"];
            return autoPauseOutOfView && autoPauseOutOfView.replace(/_/g, "").toLowerCase();
        }
        var LOGGER = vdb.log.getLogger("PlayerAPI");
        var PlayerEvent = vdb.constants.PlayerEvent;
        var InteractionType = vdb.enums.UserInteraction;
        var Dependencies = vdb.enums.Dependencies;
        var utl = vdb.Utils;
        var PlayerMacros = vdb.constants.PlayerMacros;
        var prototype = {init:function(container, vpaidAPI, vpaidOptions, ctx, context) {
            this._ctx = ctx;
            this._context = context;
            if (this._context.preview) {
                this["updateConfig"] = this.updateConfig;
            }
            vdb.constants.PlayerEvent.exposeGlobal();
            this._context.isFullscreen = false;
            this._context.api = this;
            this._context.isVPAID = !!vpaidAPI;
            this.deferCommands = [];
            if (vpaidAPI) {
                this._vpaidAPI = this._ctx.adapter.VpaidJsAdapter.initVpaidAPI(vpaidAPI, this);
                this._vpaidOptions = vpaidOptions;
            }
            this.ver = vdb.ver();
            this.handlers = {};
            this._container = container;
            this._adapterFuture = new vdb.Future;
            vdb.dom.setTargetDocument(container.ownerDocument);
            var element = utl.createElement("div", {"id":"vdb_" + this._context.id, "style":"position: relative; display: none;"}, container);
            this._element = element;
            this._playerWrapper = element;
            this._context.addEventListener(this._ctx.adapter.CREATED, onAdapterCreated.bind(this));
            this._context.addEventListener(this._ctx.adapter.INIT, onAdapterInitiated.bind(this));
            this._context.addEventListener(this._ctx.adapter.DESTROY, this.destroy.bind(this));
            this._context.addEventListener(vdb.loader.PlacementLoader.LOADED, onConfigLoad.bind(this));
            this.bidLoader = new vdb.loader.BidLoader(this._context);
            this.bidLoader.addEventListener(vdb.loader.BidLoader.LOADED, onBidLoad.bind(this));
            this._errorTracker = this._context.getInjector().resolveSync(Dependencies.ERROR_TRACKER);
            exposePublicProperties.call(this);
            triggerOnLoadCallback.call(this);
            if (this._context.playerId && !this._context.preview) {
                (new vdb.loader.PlacementLoader(this._context)).load();
            }
            this.postMessageApi = new vdb.api.PostMessageApi(context);
            this.postMessageApi.addListeners();
        }, reloadPlayer:function() {
            this._context.getInjector().setOptions({enforceUniqueProviders:false});
            this._lastConfig["playerTemplate"]["initialization"] = "autoplay";
            this.updateConfig(this._lastConfig);
        }, updateConfig:function(config) {
            LOGGER.debug("updateConfig", config);
            this._lastConfig = config;
            var baseUrls = config["baseUrls"];
            config = config["placement"] || config;
            if (baseUrls) {
                this._context.setBaseUrls(baseUrls);
            }
            if (navigator.cookieEnabled && config["uuid"]) {
                this._context.setLoggerParams({"uid":config["uuid"]});
            }
            this.config = config;
            var uiTemplate = config["playerTemplate"];
            var playerWidget = config["playerWidget"];
            var bid = config["bid"];
            this.bid = bid;
            var noVideos = !bid || !bid["videos"] || bid["videos"].length === 0;
            if (noVideos && (this._context.isVPAID || hasInReadExpander(uiTemplate))) {
                playerWidget["adOnly"] = true;
            }
            this.geo = config["geo"] || {};
            this.playerWidget = playerWidget;
            this.uiTemplate = uiTemplate;
            this._initialSound = uiTemplate["sound"];
            (new vdb.override.PlayerSizeOverrider(this._context)).override(uiTemplate);
            (new vdb.override.MacroOverrider(this._context)).override(uiTemplate);
            (new vdb.override.CompanionsSettingsOverrider(this._context)).override(config["adSettings"]);
            (new vdb.override.PlayerInitializationOverrider).override(uiTemplate, this.playsNativeInline());
            (new vdb.override.PlayerSoundOverrider).override(uiTemplate);
            this.flashVersion = vdb.Utils.findVersionInUrl(playerWidget["url"]);
            this._autoPlayInview = getAutoPlayInView.call(this, uiTemplate);
            this._autoPauseOutOfview = getAutoPauseOutOfView.call(this, uiTemplate);
            this._context.playbackMode = uiTemplate["initialization"];
            this._context.vrRenderer = uiTemplate["vrRenderer"] || vdb.enums.VrRendererType.O2;
            var isResponsive = uiTemplate["isResponsive"];
            this._context.isResponsive = isResponsive;
            var adConfig = config["adSettings"];
            this.adConfig = adConfig;
            var cfg = this._context.getInjector().resolveSync(vdb.enums.Dependencies.CONFIG);
            if (adConfig["blockContentOnAdBlocker"] || cfg.isAggressiveMode()) {
                this._context.triggerBlockContentCycle();
            }
            var bcInfo = config["bcInfo"] || {};
            this.bcInfo = bcInfo;
            var sid = this._context.getMacro(PlayerMacros.SID);
            if (sid) {
                bcInfo["sid"] = sid;
            }
            prepare360Context.call(this);
            (new vdb.override.VideoOverrider(this._context)).override(bid);
            this._context.overrideAeg(adConfig["aeg"] || []);
            (new vdb.override.ExtraOverrider(this._context)).override(config);
            uiTemplate["id"] = this._context.playerId;
            uiTemplate["ownerId"] = config["ownerId"] || "50f049a7737176354b98ae32";
            var width = parseInt(uiTemplate["playerWidth"]) || 500;
            this.playerWidth = width;
            uiTemplate["playerWidth"] = width;
            var height = parseInt(uiTemplate["playerHeight"]) || 300;
            uiTemplate["playerHeight"] = height;
            uiTemplate["playerMinWidth"] = parseInt(uiTemplate["playerMinWidth"]) || 320;
            this.playerAspectRatio = width / height;
            this.videoAspectRatio = getVideoAspectRatio.call(this);
            var videoLocation = uiTemplate["videoLocation"];
            var controlsSkinLocation = uiTemplate["controlsSkinLocation"];
            this.videoLocation = getResponsiveLocation(videoLocation["w"], videoLocation["h"], width, videoLocation["y"], videoLocation["x"]);
            this.controlsSkinLocation = uiTemplate["html5Skin"] && controlsSkinLocation["h"] ? getResponsiveLocation(controlsSkinLocation["w"], controlsSkinLocation["h"], width, controlsSkinLocation["y"], controlsSkinLocation["x"]) : this.videoLocation;
            this.absoluteVideoWrapper = !uiTemplate["controlsChromeless"] || this.videoLocation.paddingBottom + this.videoLocation.marginTop < this.controlsSkinLocation.paddingBottom + this.controlsSkinLocation.marginTop;
            this.videoWidth = Math.max(videoLocation["w"] + videoLocation["x"], controlsSkinLocation["w"] + controlsSkinLocation["x"]);
            this.nonVideoWidth = width - this.videoWidth;
            this.nonVideoHeight = height - Math.max(videoLocation["h"] + videoLocation["y"], controlsSkinLocation["h"] + controlsSkinLocation["y"]);
            var style = this._element.style;
            style.display = "";
            if (isResponsive) {
                makeResponsive.call(this);
                (new vdb.override.ResponsiveOverrider).override(uiTemplate, this._element);
            } else {
                if (this._context.isVPAID) {
                    style.width = "100%";
                    style.height = "100%";
                } else {
                    if (this._element.offsetWidth !== 0 && "max-width" in style) {
                        makeResizable.call(this, width, height);
                    } else {
                        style.width = width + "px";
                        style.height = height + "px";
                    }
                }
            }
            if (this._context.getMacro(PlayerMacros.LOADINGPLACEHOLDER) === "1" || vdb.utils.UrlUtils.getParameterByName(PlayerMacros.LOADINGPLACEHOLDER) === "1") {
                this.loadingPlaceholder = new vdb.modules.LoadingPlaceholder(this._context, this._playerWrapper);
                this.loadingPlaceholder.show(utl.getValueOrDefault(bid, ["videos", 0, "fullsizeThumbnail"]));
            }
            this._error = hasError.call(this);
            var hasInreadExtra = hasInReadExpander(this.uiTemplate);
            if (this._error) {
                this.eventProxyAdapter = new vdb.EventProxyAdapter(this);
                executeDeferCommands.call(this);
                if (!this._vpaidAPI) {
                    if (this._error.subtype !== vdb.events.PlayerErrorEvent.NO_VIDEOS_TO_PLAY || !hasInreadExtra) {
                        this._context.drawErrorMessage(this._element, this._error.message);
                    } else {
                        hideForInReadExpander.call(this);
                    }
                }
                onPlayerError.call(this, this._error);
                return;
            } else {
                if (hasInreadExtra) {
                    hideForInReadExpander.call(this);
                }
            }
            if (this._extensionsManager) {
                this._extensionsManager.destroy();
            }
            this._extensionsManager = new vdb.ext.Manager(this._context, this._context.extensions);
            loadCoreExtras.call(this, createAdapter.bind(this));
            var metaData = uiTemplate["metaData"] || {};
            var companyMetadataResolver = new vdb.utils.CompanyMetadataResolver;
            var pixelTracker = this._context.getInjector().resolveSync(Dependencies.PIXEL_TRACKER);
            var metaDataKey;
            var companyEvent;
            for (metaDataKey in metaData) {
                if (metaDataKey.indexOf("content.") !== 0) {
                    companyEvent = companyMetadataResolver.resolveEvent(metaDataKey);
                    if (Object.prototype.hasOwnProperty.call(metaData, metaDataKey)) {
                        if (typeof companyEvent !== "undefined") {
                            this.addEventListener(companyEvent, function(key) {
                                return function() {
                                    if (this.adapter) {
                                        key = this.adapter.resolvePlaceholders(key);
                                    }
                                    pixelTracker.callExternalPixel(key);
                                };
                            }(metaData[metaDataKey]));
                        } else {
                            LOGGER.warn("Event does not exist", metaDataKey);
                        }
                    }
                }
            }
        }, addEventListener:function(event, handler) {
            if (event && handler && typeof handler === "function") {
                if (!this.adapter && !this._error) {
                    this.deferCommands.push(function() {
                        this.addEventListener(event, handler);
                    }.bind(this));
                } else {
                    handler._registeredHandler = handler.bind(this);
                    this.eventProxyAdapter.addEventListener(event, handler._registeredHandler);
                }
            }
        }, removeEventListener:function(event, handler) {
            if (!this.adapter) {
                this.deferCommands.push(function() {
                    this.removeEventListener(event, handler);
                }.bind(this));
            } else {
                var handlerToRemove = handler && handler._registeredHandler || handler;
                this.eventProxyAdapter.removeEventListener(event, handlerToRemove);
            }
        }, dispatchEvent:function(event) {
            if (this.eventProxyAdapter) {
                this.eventProxyAdapter.dispatchEvent(event.type, event);
            }
        }, updateBid:function(bidModifier) {
            var query = bidModifier["query"];
            var isAol = false;
            var i = query ? query.indexOf("aolid:") : -1;
            if (i !== -1) {
                var sid = this.bcInfo["sid"];
                if (!sid) {
                    return;
                }
                bidModifier["query"] = "sid=" + sid + "&playlist=" + query.substr(i + 6);
                isAol = true;
            }
            var loadPromise = this.bidLoader.load(bidModifier, isAol);
            if (bidModifier.autoplay) {
                loadPromise.then(function() {
                    this.player.dispatchEvent(PlayerEvent.VIDEO_PLAY);
                }.bind(this));
            }
        }, getAutoPlayInView:function() {
            return this._autoPlayInview || 0;
        }, getAutoPauseOutOfView:function() {
            return this._autoPauseOutOfview;
        }, getFlashVersion:function() {
            if (this.adapter) {
                return this.adapter.getFlashVersion();
            }
            return undefined;
        }, getPixelsLog:function() {
            if (this.adapter) {
                return this.adapter.getPixelsLog();
            }
            return undefined;
        }, getRequestsLog:function() {
            if (this.adapter) {
                return this.adapter.getRequestsLog();
            }
            return undefined;
        }, play:function() {
            if (this.adapter) {
                this.adapter.dispatchPlayerApiInteractionEvent(InteractionType.PLAY);
                this.adapter.play();
            }
        }, pause:function() {
            if (this.adapter) {
                this.adapter.dispatchPlayerApiInteractionEvent(InteractionType.PAUSE);
                this.adapter.pause();
            }
        }, mute:function() {
            if (this.adapter) {
                this.adapter.dispatchPlayerApiInteractionEvent(InteractionType.MUTE);
                this.adapter.mute();
            }
        }, volume:function(vol) {
            if (this.adapter) {
                this.adapter.volume(vol);
            }
        }, seekTo:function(time) {
            if (this.adapter) {
                this.adapter.seekTo(time);
            }
        }, sendKey:function(keyCode) {
            if (this.adapter) {
                this.adapter.sendKey(keyCode);
            }
        }, sendBirthDate:function(date) {
            this.dispatchEvent({type:PlayerEvent.BIRTH_DATE_ENTERED, data:date});
        }, setVideosToPlay:function(num) {
            if (this.adapter) {
                this.adapter.setVideosToPlay(num);
            }
        }, getInitialSound:function() {
            return this._initialSound;
        }, destroy:function() {
            if (this.adapter) {
                if (this.hwmTracker) {
                    this.hwmTracker.dispose();
                }
                disposeAdapter.call(this);
                var hostContainer = this._container;
                hostContainer["vdb_Context"].eventBus.removeAllListeners();
                delete hostContainer["vdb_Context"];
                delete hostContainer["vdb_Player"];
                if (this._playerWrapper.parentNode) {
                    this._playerWrapper.parentNode.removeChild(this._playerWrapper);
                }
                vdb.removeContext(this._context.id);
                if (this._resizeHandler) {
                    vdb.events.removeEventListener($win, "resize", this._resizeHandler);
                }
                LOGGER.debug(this._context.id, "destroyed");
            }
        }, unavailable:function() {
            this._errorTracker.unavailable();
            if (this._vpaidAPI) {
                this._vpaidAPI.sendEvent("AdError", "Not Available");
            }
            this.destroy();
        }, version:function() {
            return this.ver;
        }, getContainer:function() {
            return this._container;
        }, getPlayerWrapper:function() {
            return this._playerWrapper;
        }, getElement:function() {
            return this._element;
        }, setElement:function(elem) {
            this.setPlayerElement(elem);
            this.setViewabilityElement(elem);
        }, setPlayerElement:function(elem) {
            this._element = elem;
        }, setViewabilityElement:function(elem) {
            this._context.moatViewability.setElement(elem);
            this._context.viewability.setElement(elem);
        }, getAdapterPromise:function() {
            return this._adapterFuture.getPromise();
        }, playsNativeInline:function() {
            var config = this._context.getInjector().resolveSync(Dependencies.CONFIG);
            return config.playsNativeInline();
        }, getExtensionManager:function() {
            return this._extensionsManager;
        }, getPlayerWidget:function() {
            return this.playerWidget;
        }, getPlayerInfo:function() {
            function getPlayerStatus() {
                var playerStatus = {PLAYING:"playing", PAUSED:"paused", STOPPED:"stoped", LOADING:"loading", ERROR:"error"};
                if (!adapter) {
                    return playerStatus.ERROR;
                } else {
                    if (this.adapter.isPlaying()) {
                        return playerStatus.PLAYING;
                    }
                }
                return playerStatus.PAUSED;
            }
            var adapter = this.adapter;
            var isAd = adapter ? this.adapter.isAd() : false;
            var bcid = this._context.buyerCompanyId;
            var playerId = this._context.playerId;
            return{"video":adapter && this.adapter.getCurrentVideo() ? this.adapter.getCurrentVideo().raw : null, "isAd":isAd, "playerStatus":getPlayerStatus.call(this), "playheadTime":adapter && !isAd ? this.adapter.getPlayerState().currentTime : null, "volume":adapter ? this.adapter.getVolume() : null, "bcid":bcid, "playerId":playerId};
        }, overrideMacro:function(macro, value) {
            var MACRO_PREFIX = "m.";
            macro = macro.indexOf(MACRO_PREFIX) !== -1 ? macro.substr(2) : macro;
            this._context.setParam(MACRO_PREFIX + macro, value);
        }};
        prototype["updateBid"] = prototype.updateBid;
        prototype["getFlashVersion"] = prototype.getFlashVersion;
        prototype["getPixelsLog"] = prototype.getPixelsLog;
        prototype["getRequestsLog"] = prototype.getRequestsLog;
        prototype["play"] = prototype.play;
        prototype["pause"] = prototype.pause;
        prototype["mute"] = prototype.mute;
        prototype["volume"] = prototype.volume;
        prototype["seekTo"] = prototype.seekTo;
        prototype["sendKey"] = prototype.sendKey;
        prototype["sendBirthDate"] = prototype.sendBirthDate;
        prototype["addEventListener"] = prototype.addEventListener;
        prototype["removeEventListener"] = prototype.removeEventListener;
        prototype["setVideosToPlay"] = prototype.setVideosToPlay;
        prototype["destroy"] = prototype.destroy;
        prototype["version"] = prototype.version;
        prototype["getPlayerInfo"] = prototype.getPlayerInfo;
        prototype["overrideMacro"] = prototype.overrideMacro;
        return prototype;
    }());
    vdb.define(function(ctx, context) {
        ctx.createPlayerAPI = function(container, vpaidAPI, vpaidOptions) {
            return new vdb.api.PlayerAPI(container, vpaidAPI, vpaidOptions, ctx, context);
        };
    });
    vdb.define(function(ctx, context) {
        ctx.adapter.AdapterFactory = {};
        ctx.adapter.AdapterFactory = vdb.core.Class.extend(function() {
            function showUnableToPlayFlashOrHtml5Message(container) {
                for (;container.firstChild;) {
                    container.removeChild(container.firstChild);
                }
                container.appendChild($doc.createTextNode("Unable to play video. Neither flash nor html5 is supported!"));
            }
            function createFlashAdapterWithHtml5Fallback(element, playerWidget, uiTemplate, adConfig, bid, geo) {
                function html5NotSupported() {
                    LOGGER.warn("html5 is not supported");
                    removeListeners();
                    showUnableToPlayFlashOrHtml5Message(element);
                }
                function flashNotSupported() {
                    LOGGER.warn("flash is not supported. Fallback to html5");
                    context.removeEventListener(ctx.adapter.NOT_SUPPORTED, flashNotSupported);
                    context.addEventListener(ctx.adapter.NOT_SUPPORTED, html5NotSupported);
                    new ctx.adapter.Html5Adapter(element, playerWidget, uiTemplate, adConfig, bid, geo);
                }
                function removeListeners() {
                    context.removeEventListener(ctx.adapter.CREATED, removeListeners);
                    context.removeEventListener(ctx.adapter.NOT_SUPPORTED, flashNotSupported);
                    context.removeEventListener(ctx.adapter.NOT_SUPPORTED, html5NotSupported);
                }
                context.addEventListener(ctx.adapter.CREATED, removeListeners);
                context.addEventListener(ctx.adapter.NOT_SUPPORTED, flashNotSupported);
                new ctx.adapter.FlashAdapter(element, playerWidget, uiTemplate, adConfig, bid, geo);
            }
            function createHtml5AdapterWithFlashFallback(element, playerWidget, uiTemplate, adConfig, bid, geo) {
                function flashNotSupported() {
                    LOGGER.warn("flash is not supported");
                    removeListeners();
                    showUnableToPlayFlashOrHtml5Message(element);
                }
                function html5NotSupported() {
                    LOGGER.warn("html5 is not supported. Fallback to flash");
                    context.removeEventListener(ctx.adapter.NOT_SUPPORTED, html5NotSupported);
                    context.addEventListener(ctx.adapter.NOT_SUPPORTED, flashNotSupported);
                    new ctx.adapter.FlashAdapter(element, playerWidget, uiTemplate, adConfig, bid, geo);
                }
                function removeListeners() {
                    context.removeEventListener(ctx.adapter.CREATED, removeListeners);
                    context.removeEventListener(ctx.adapter.NOT_SUPPORTED, html5NotSupported);
                    context.removeEventListener(ctx.adapter.NOT_SUPPORTED, flashNotSupported);
                }
                context.addEventListener(ctx.adapter.CREATED, removeListeners);
                context.addEventListener(ctx.adapter.NOT_SUPPORTED, html5NotSupported);
                new ctx.adapter.Html5Adapter(element, playerWidget, uiTemplate, adConfig, bid, geo);
            }
            function createYoukuAdapter(element, playerWidget, uiTemplate, adConfig, bid, geo) {
                function removeListeners() {
                    context.removeEventListener(ctx.adapter.CREATED, removeListeners);
                }
                context.addEventListener(ctx.adapter.CREATED, removeListeners);
                new ctx.adapter.YoukuAdapter(element, playerWidget, uiTemplate, adConfig, bid, geo);
            }
            var LOGGER = vdb.log.getLogger("AdapterFactory");
            return{createFlashAdapterWithHtml5Fallback:createFlashAdapterWithHtml5Fallback, createHtml5AdapterWithFlashFallback:createHtml5AdapterWithFlashFallback, createYoukuAdapter:createYoukuAdapter};
        }());
        ctx.adapter.AdapterFactory.instance = new ctx.adapter.AdapterFactory;
        ctx.adapter.AdapterFactory.createAdapter = function(element, playerWidget, uiTemplate, adConfig, bid, geo) {
            var inst = ctx.adapter.AdapterFactory.instance;
            var utl = vdb.Utils;
            var playerType = (playerWidget["playerType"] || "").toLowerCase();
            var isType = function(type) {
                return utl.getValueOrDefault(bid, ["videos", 0, "videoSourceType"], "").toLowerCase() === type;
            };
            if (vdb.utils.UrlUtils.getParameterByName("htmlplayerforce") || /html/.test((context.getMacro(vdb.constants.PlayerMacros.PLAYERTYPE) || "").toLowerCase()) || vdb.Utils360.has360Videos(bid)) {
                playerType = vdb.enums.PlayerType.HTML5;
            }
            if (vdb.utils.UrlUtils.getParameterByName("flashplayerforce")) {
                playerType = vdb.enums.PlayerType.FLASH;
            }
            if (isType(vdb.enums.VideoSourceType.YOUKU)) {
                playerType = vdb.enums.PlayerType.YOUKU;
            }
            switch(playerType) {
                case vdb.enums.PlayerType.YOUKU:
                    new inst.createYoukuAdapter(element, playerWidget, uiTemplate, adConfig, bid, geo);
                    break;
                case vdb.enums.PlayerType.FLASH:
                    new ctx.adapter.FlashAdapter(element, playerWidget, uiTemplate, adConfig, bid, geo);
                    break;
                case vdb.enums.PlayerType.HTML5:
                    inst.createHtml5AdapterWithFlashFallback(element, playerWidget, uiTemplate, adConfig, bid, geo);
                    break;
                case vdb.enums.PlayerType.SMART:
                    var htmlFirst = utl.browser.isMobile() || !context.getFlashDetector().isFlashAvailable() || (playerWidget["isAol"] || !utl.isIE);
                    if (htmlFirst) {
                        inst.createHtml5AdapterWithFlashFallback(element, playerWidget, uiTemplate, adConfig, bid, geo);
                    } else {
                        inst.createFlashAdapterWithHtml5Fallback(element, playerWidget, uiTemplate, adConfig, bid, geo);
                    }
                    break;
                default:
                    throw "Unknown player type: " + playerType;;
            }
        };
    });
    vdb.define(function(ctx, context) {
        ctx.adapter.FlashAdapter = {};
        ctx.adapter.FlashAdapter = ctx.adapter.BaseAdapter.extend(function() {
            function _addFlashListener(event, handler) {
                this.eventSource["addEventListener"](event, handler);
            }
            function _updateCurrentVideoInfo() {
                this.currentVideoInfo = this.flash["getCurrentVideoInfo"]();
                if (this.currentVideoInfo) {
                    var video = this.currentVideoInfo["video"];
                    if (typeof video === "string") {
                        this.currentVideoInfo["video"] = JSON.parse(video);
                    }
                }
                if (!_currentVideo || _currentVideo !== context.api.adapter.getCurrentVideo()) {
                    var state = this.getPlayerState();
                    _currentVideo = context.api.adapter.getCurrentVideo();
                    _thirdPartyContentTracker.setVideoDuration(state["videoLength"]);
                }
                _thirdPartyContentTracker.setVideo(_currentVideo);
            }
            function _onVideosUpdated(event) {
                if (event) {
                    var videos = event["data"];
                    var bidVideos = this._bid["videos"];
                    var i = 0;
                    for (var l = videos.length;i < l;i++) {
                        bidVideos.push(videos[i]);
                    }
                }
                this._playlist = new vdb.model.Bid(this._bid);
            }
            function prepareBid(bid) {
                var videos = bid["videos"];
                if (videos) {
                    for (var i = 0;i < videos.length;i++) {
                        var video = videos[i];
                        var urls = video["videoUrls"];
                        if (urls && urls.length) {
                            video["videoUrl"] = urls[0];
                        }
                    }
                }
            }
            function _handleBid(bid) {
                this._bid = bid;
                prepareBid(bid);
                _onVideosUpdated.call(this);
            }
            function _onVideoStart() {
                _thirdPartyContentTracker.fireContentView();
            }
            function _onVideoUpdated() {
                var state = this.getPlayerState();
                _thirdPartyContentTracker.fireVideoTimeUpdate(state["currentTime"]);
            }
            function _onVideoEnd() {
                _thirdPartyContentTracker.fireContentQuartile(4);
            }
            function _callFlash(method) {
                if (this.flash && typeof this.flash[method] === "function") {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (this._useSerializer) {
                        var i = 0;
                        for (var l = args.length;i < l;++i) {
                            args[i] = encodeURIComponent(JSON.stringify(args[i]));
                        }
                    }
                    var result = this.flash[method].apply(this.flash, args);
                    if (this._useSerializer) {
                        result = decodeURIComponent(result);
                        result = JSON.parse(result);
                    }
                    return result;
                }
                return null;
            }
            function _onLoggerParamsUpdated(e) {
                _callFlash.call(this, "updateLogInfo", e);
            }
            function _prepareListeners() {
                this.addEventListener(VIDEOS_UPDATED_EVENT, _onVideosUpdated.bind(this));
                this.addEventListener(PlayerEvent.VIDEO_START, _onVideoStart.bind(this));
                this.addEventListener(PlayerEvent.VIDEO_TIMEUPDATE, _onVideoUpdated.bind(this));
                this.addEventListener(PlayerEvent.VIDEO_END, _onVideoEnd.bind(this));
                this.addEventListener(PlayerEvent.CONTENT_BEFORE_IMPRESSION, function(e) {
                    _updateCurrentVideoInfo.call(this);
                    this.dispatchEvent({type:PlayerEvent.CONTENT_IMPRESSION, data:e.data});
                }.bind(this));
                this.addEventListener(AD_STARTED_EVENT, function() {
                    _updateCurrentVideoInfo.call(this);
                }.bind(this));
                this._eventsAdapter = new vdb.adapter.FlashEventsAdapter(this);
                context.addEventListener(ctx.LOGGER_PARAMS_UPDATED, _onLoggerParamsUpdated.bind(this));
            }
            function _rebindFlashListeners() {
                for (var event in this._eventListeners) {
                    if (Object.prototype.hasOwnProperty.call(this._eventListeners, event)) {
                        var functions = this._eventListeners[event];
                        var i = 0;
                        for (var l = functions.length;i < l;i++) {
                            var func = functions[i];
                            _addFlashListener.call(this, event, func);
                        }
                    }
                }
            }
            function _refuse() {
                if (this._alreadyRefused) {
                    return;
                }
                this._alreadyRefused = true;
                this.dispose.call(this);
                context.dispatchEvent(ctx.adapter.NOT_SUPPORTED, this);
            }
            function parseVolume(volume) {
                var v = parseFloat(volume);
                v = isNaN(v) ? 1 : v;
                v = v > 1 ? Math.min(v / 100, 1) : v;
                return v;
            }
            var LOGGER = vdb.log.getLogger("FlashAdapter");
            var PlayerEvent = vdb.constants.PlayerEvent;
            var _thirdPartyContentTracker;
            var _currentVideo;
            var VIDEOS_UPDATED_EVENT = "Videos.Updated";
            var AD_STARTED_EVENT = "AdEvent.AD_STARTED";
            return{init:function(container, playerWidget, uiTemplate, adConfig, bid, geo) {
                var Dependencies = vdb.enums.Dependencies;
                var config = context.getInjector().resolveSync(Dependencies.CONFIG);
                var urls = context.getInjector().resolveSync(Dependencies.URLS);
                var debugInfo = context.getInjector().resolveSync(Dependencies.DEBUG_INFO);
                var id = config.getId();
                var placement = config.getPlacement();
                var chromeHacker = new vdb.utils.ChromeModeHack(config, container);
                context.addEventListener(ctx.adapter.CREATED, function() {
                    chromeHacker.resetSettings();
                });
                this._super(uiTemplate, container);
                this.flashContainer = vdb.dom.nodeFromHTML("<div></div>");
                this.flashContainer.style.width = "100%";
                this.flashContainer.style.height = "100%";
                var flashId = "vdb_flash_" + id;
                container.appendChild(this.flashContainer);
                config.setPlayerType("flash");
                _handleBid.call(this, bid);
                var _this = this;
                var stringify = function(object) {
                    return encodeURIComponent(vdb.Utils.jsonStringify(object));
                };
                var flashVars = {"objectId":flashId, "playerTemplate":stringify(uiTemplate), "playerWidget":stringify(playerWidget), "adSettings":stringify(adConfig), "geo":stringify(geo), "bid":stringify(bid), "logInfoCallback":encodeURIComponent('vidible.getContext("' + id + '").getLoggerParams()'), "atpdataCallback":encodeURIComponent('vidible.getContext("' + id + '").getATPdata()'), "showAdBlockerOverlayCallback":encodeURIComponent('vidible.getContext("' + id + '").showAdBlockerOverlay()'), "adBlockerSnifferResult":encodeURIComponent('vidible.getContext("' +
                    id + '").adBlockerSnifferResult'), "getVisiblePercentCallback":encodeURIComponent('vidible.getContext("' + id + '").getVisiblePercent()'), "getMoatViewabilityCallback":encodeURIComponent('vidible.getContext("' + id + '").getMoatViewability()'), "isAdapterBoundCallback":encodeURIComponent('vidible.getContext("' + id + '").isAdapterBound()'), "bindAdapterCallback":encodeURIComponent('vidible.getContext("' + id + '").bindAdapter()'), "startAdChromeCallback":encodeURIComponent('vidible.getContext("' +
                    id + '").startAdChrome'), "detectIabViewabilityCallback":encodeURIComponent('vidible.getContext("' + id + '").detectIabViewability()'), "playerId":config.getPlayerId(), "bidId":config.getBidId(), "sessionId":id, "previewMode":"" + (config.getPreview() || false), "impressionTimestamp":config.getImpressionTimestamp(), "trackingBaseURL":encodeURIComponent(urls.TRACKING_BASE_URL), "adServerURL":encodeURIComponent(urls.AD_SERVER_URL), "trackingParams":stringify(config.getParams()), "baseUrls":stringify(context.getBaseUrls()),
                    "site":config.getReferrer(), "debug":debugInfo.isPixelsLogEnabled};
                if (placement) {
                    flashVars["bcInfo"] = stringify(placement["bcInfo"]);
                    flashVars["brandedContent"] = placement["brandedContent"];
                }
                if (config.getBuyerCompanyId()) {
                    flashVars["buyerCompanyId"] = config.getBuyerCompanyId();
                }
                if (context.needToOverrideAds) {
                    flashVars["overrideAeg"] = encodeURIComponent('vidible.getContext("' + id + '").overrideAeg');
                }
                var swfUrl = playerWidget && playerWidget["url"] || "unknown";
                var fe = vdb.flashembed.embed(_this.flashContainer, {"id":flashId, "src":swfUrl, version:[11, 1], "wmode":"transparent", "allowscriptaccess":"always", onFail:function() {
                    return "";
                }}, flashVars);
                var _flash = fe.getApi();
                _this.flash = _flash;
                context.addEventListener(ctx.adapter.BIND, function(event) {
                    var eventSource = _flash["vidiblePlayer"];
                    _this.eventSource = eventSource;
                    _this._useSerializer = _flash["_useSerializer"] !== undefined;
                    if (event.data.firstTime || event.data.isTagRecreation) {
                        _prepareListeners.call(_this);
                        context.dispatchEvent(ctx.adapter.CREATED, _this);
                        _thirdPartyContentTracker = new vdb.reporter.ThirdPartyContentTracker(context.api, {resolve:function(value) {
                            return _callFlash.call(_this, "resolvePlaceholders", value) || value;
                        }});
                    } else {
                        _rebindFlashListeners.call(_this);
                    }
                    var onPlayerReady = function() {
                        _updateCurrentVideoInfo.call(_this);
                        if (event.data.firstTime) {
                            _this.dispatchEvent({type:PlayerEvent.PLAYER_READY, data:{}});
                        }
                    };
                    if (typeof eventSource["readyCallback"] === "function") {
                        eventSource["addEventListener"]("Player.Initialized", onPlayerReady);
                        eventSource["readyCallback"]();
                    } else {
                        onPlayerReady();
                    }
                });
                if (!_flash || _flash && _flash.tagName.toLowerCase() !== "object") {
                    _refuse.call(_this);
                } else {
                    var intervalTimer;
                    var checkFlash = function() {
                        var percent;
                        try {
                            percent = _this.flash["PercentLoaded"]();
                        } catch (e) {
                            LOGGER.debug("Error occurred", e);
                        }
                        if (percent !== undefined) {
                            if (percent >= 100 && !_callFlash.call(_this, "checkAvailable")) {
                                _refuse.call(_this);
                                clearInterval(intervalTimer);
                            }
                        } else {
                            clearInterval(intervalTimer);
                        }
                    };
                    var invokeFlashCheck = function() {
                        intervalTimer = setInterval(checkFlash, 1E3);
                    };
                    if (window["document"]["hasFocus"]()) {
                        invokeFlashCheck();
                    } else {
                        vdb.events.EventContext.bindOnce(window, "focus", function() {
                            invokeFlashCheck();
                        });
                    }
                }
            }, addEventListener:function(event, handler) {
                _addFlashListener.call(this, event, handler);
                this._super(event, handler);
            }, dispatchEvent:function(event) {
                this._super(event);
                context.dispatchEvent(event.type, event);
            }, removeEventListener:function(event, handler) {
                if (!event || !handler) {
                    return;
                }
                this.eventSource["removeEventListener"](event, handler);
                this._super(event, handler);
            }, onBidUpdated:function(bid) {
                _callFlash.call(this, "onBidUpdated", bid);
                _handleBid.call(this, bid);
            }, play:function() {
                _callFlash.call(this, "doPlay");
            }, inView:function() {
                this._super();
                _callFlash.call(this, "inView");
            }, outOfView:function() {
                this._super();
                _callFlash.call(this, "outOfView");
            }, pause:function() {
                _callFlash.call(this, "pause");
            }, mute:function() {
                _callFlash.call(this, "mute");
            }, volume:function(vol) {
                _callFlash.call(this, "volume", parseVolume(vol));
            }, caption:function() {
            }, seekTo:function(time) {
                _callFlash.call(this, "seekTo", time);
            }, resolvePlaceholders:function(value) {
                return _callFlash.call(this, "resolvePlaceholders", value) || value;
            }, rewind:function() {
            }, enterFullscreen:function() {
            }, exitFullscreen:function() {
            }, getPixelsLog:function() {
                var pixelsLog = _callFlash.call(this, "getPixelsLog");
                return this._super(pixelsLog);
            }, getRequestsLog:function() {
                var requestsLog = _callFlash.call(this, "getRequestsLog");
                return this._super(requestsLog);
            }, getFlashVersion:function() {
                return _callFlash.call(this, "getVersion");
            }, getPlayerState:function() {
                var newState = _callFlash.call(this, "getPlayerState") || undefined;
                if (newState) {
                    this.oldState = newState;
                }
                return newState || this.oldState;
            }, setResponsive:function(responsive) {
                _callFlash.call(this, "setResponsive", responsive);
            }, getCurrentVideo:function() {
                return this._playlist.getVideo(this.getCurrentVideoIndex());
            }, getCurrentVideoId:function() {
                return this.currentVideoInfo && this.currentVideoInfo["video"] && this.currentVideoInfo["video"]["videoId"] || "";
            }, getCurrentVideoIndex:function() {
                return this.currentVideoInfo ? this.currentVideoInfo["originalIndex"] || this.currentVideoInfo["index"] || 0 : 0;
            }, getVolume:function() {
                var vol = _callFlash.call(this, "getVolume") || 0;
                return Math.floor(vol * 100) / 100;
            }, getAdDuration:function() {
                return "";
            }, isAd:function() {
                return _callFlash.call(this, "isAd") || false;
            }, getPlayerType:function() {
                return vdb.enums.PlayerType.FLASH;
            }, dispose:function() {
                _callFlash.call(this, "dispose");
                if (this.flash && this.flash.parentNode) {
                    this.flash.parentNode.removeChild(this.flash);
                }
                var element = this.flashContainer;
                if (element && element.parentNode) {
                    LOGGER.debug("Dispose flash adapter");
                    element.parentNode.removeChild(element);
                }
            }, isPlaying:function() {
                return _callFlash.call(this, "isItPlaying") || false;
            }, showUIExtras:function() {
                this._super();
                try {
                    _callFlash.call(this, "showUIExtras");
                } catch (e) {
                    LOGGER.debug("Error occurred", e);
                }
            }, hideUIExtras:function() {
                this._super();
                try {
                    _callFlash.call(this, "hideUIExtras");
                } catch (e) {
                    LOGGER.debug("Error occurred", e);
                }
            }, adBlockerCheckCallback:function(hasAdBlocker) {
                _callFlash.call(this, "adBlockerCheckCallback", hasAdBlocker);
            }, getVideoContainer:function() {
                return this.flashContainer;
            }};
        }());
    });
    vdb.define(function(ctx, context) {
        ctx.adapter.Html5Adapter = {};
        ctx.adapter.Html5Adapter = ctx.adapter.BaseAdapter.extend(function() {
            var InteractionType = vdb.enums.UserInteraction;
            var PlayerEvent = vdb.constants.PlayerEvent;
            var EVENTS = {};
            var loader;
            var isVideosNotSupported = function(videos) {
                var hasOnlyHls = vdb.Utils.hasOnlyHls(videos);
                var hlsSupportedByBrowser = vdb.utils.Common.isHlsSupported();
                var hlsPluginSupported = vdb.Utils.hlsPluginSupported();
                return!vdb.utils.Common.isSupported() || hasOnlyHls && !hlsSupportedByBrowser && !hlsPluginSupported;
            };
            return{init:function(container, playerWidget, uiTemplate, adConfig, bid, geo, isolated) {
                var playerHtml5SourceCode = "${player-html5}";
                var useVidibleHtmlMinJs = playerHtml5SourceCode.length !== 15;
                var scriptUrls = useVidibleHtmlMinJs ? null : context.getHtml5PlayerUrl();
                var isIsolated = isolated != null ? isolated : true;
                var videos = vdb.Utils.getValueOrDefault(bid, ["videos"], []);
                this._super(uiTemplate, container);
                if (isVideosNotSupported(videos)) {
                    context.dispatchEvent(ctx.adapter.NOT_SUPPORTED, this);
                    return;
                }
                context.setPlayerType("html5");
                loader = ctx.createModuleLoader({container:container, scriptUrls:scriptUrls, initFuncName:"create", codeToEval:useVidibleHtmlMinJs ? playerHtml5SourceCode : null}).appendHtml('<div style="height:100%;position:relative"></div>').setIsolated(isIsolated).load(function(iwin, idoc) {
                    var opts = {playerWidget:playerWidget, uiTemplate:uiTemplate, adConfig:adConfig, bid:bid, autoplayInView:context.api.getAutoPlayInView()};
                    this.container = loader.isolated ? idoc.getElementsByTagName("div")[0] : container;
                    this.player = iwin["create"](this.container, opts, $win, $doc);
                    this._onLoaded();
                }.bind(this));
            }, _onLoaded:function() {
                context.dispatchEvent(ctx.adapter.CREATED, this);
            }, addEventListener:function(event, handler) {
                var html5Event = EVENTS[event] || event;
                this.player.addEventListener(html5Event, handler);
            }, dispatchEvent:function(event, data) {
                this.player.dispatchEvent(event, data);
            }, removeEventListener:function(event, handler) {
                if (!event || !handler) {
                    return;
                }
                var html5Event = EVENTS[event] || event;
                this.player.removeEventListener(html5Event, handler);
            }, onBidUpdated:function(bid) {
                if (this.player) {
                    this.player.onBidUpdated(bid);
                }
            }, play:function() {
                if (this.player) {
                    this.player.controller.resume();
                }
            }, playVideoByIndex:function(index) {
                var controller = this.player && this.player.controller;
                if (controller) {
                    controller.clearVideo();
                    controller.play(index);
                }
            }, pause:function() {
                if (this.player) {
                    this.player.controller.pause();
                }
            }, outOfView:function() {
                this._super();
                if (this.player) {
                    this.player.controller.outOfView();
                }
            }, inView:function() {
                this._super();
                if (this.player) {
                    this.player.controller.inView();
                }
            }, mute:function() {
                if (this.player) {
                    if (!this.player.controller.isMuted()) {
                        this.player.controller.mute();
                    } else {
                        this.player.controller.unMute();
                    }
                }
            }, volume:function(vol) {
                if (this.player) {
                    this.player.controller.setVolume(vol);
                }
            }, caption:function() {
            }, seekTo:function(time) {
                if (this.player) {
                    this.player.controller.seekTo(time);
                }
            }, sendKey:function(keyCode) {
                if (this.container) {
                    this.player.controller.sendKey(keyCode);
                }
            }, resolvePlaceholders:function(value) {
                if (this.player) {
                    return this.player.controller.getResolver().resolve(value);
                }
                return value;
            }, rewind:function() {
            }, enterFullscreen:function() {
            }, exitFullscreen:function() {
            }, getPlayerState:function() {
                var state;
                if (this.player) {
                    state = this.player.getPlayerState();
                    state["sellerId"] = this._uiTemplate["ownerId"];
                }
                return state;
            }, getCurrentVideo:function() {
                return this.player && this.player.controller && this.player.controller.getCurrentVideo();
            }, getCurrentVideoId:function() {
                return this.player && this.player.controller && this.player.controller.getCurrentVideoId();
            }, getCurrentVideoIndex:function() {
                return this.player && this.player.controller && this.player.controller.getCurrentVideoIndex();
            }, getNextVideo:function() {
                return this.player && this.player.controller && this.player.controller.getNextVideo();
            }, getNextVideoIndex:function() {
                return this.player && this.player.controller && this.player.controller.getNextVideoIndex();
            }, getVolume:function() {
                var volume;
                if (this.player && this.player.controller) {
                    volume = this.player.controller.isMuted() ? 0 : this.player.controller.getVolume();
                }
                return volume;
            }, setVideosToPlay:function(num) {
                this.player.controller.setVideosToPlay(num);
            }, getAdDuration:function() {
                var adDuration;
                if (this.player && this.player.controller) {
                    if (!this.player.controller.isAdBlockerStarted()) {
                        adDuration = null;
                    }
                    var _adController = this.player.controller.getAdController();
                    adDuration = _adController.getDuration();
                }
                return adDuration;
            }, getPlayerType:function() {
                return vdb.enums.PlayerType.HTML5;
            }, isAd:function() {
                return this.player && this.player.controller && this.player.controller.isAdBlockerStarted();
            }, dispose:function() {
                var element = this.container;
                if (element && element.parentNode) {
                    vdb.log.getLogger("Html5Adapter").debug("Dispose html5 adapter");
                    element.parentNode.removeChild(element);
                }
                if (loader) {
                    loader.dispose();
                }
            }, isPlaying:function() {
                return!!(this.player && this.player.controller && this.player.controller.isPlaying());
            }, getVideoContainer:function() {
                return this.player && this.player.controller && this.player.controller.getContainer();
            }, dispatchPlayerApiInteractionEvent:function(type) {
                if (this.player) {
                    if (type === InteractionType.MUTE) {
                        type = this.player.controller.isMuted() ? InteractionType.UNMUTE : InteractionType.MUTE;
                    }
                    this.player.dispatchEvent(PlayerEvent.PLAYER_API_INTERACTION, {"interactionType":type});
                }
            }, hideSpinner:function() {
                if (this.player && this.player.controller) {
                    this.player.controller.hideSpinner();
                }
            }};
        }());
    });
    vdb.define(function(ctx, context) {
        ctx.adapter.VpaidJsAdapter = {};
        ctx.adapter.VpaidJsAdapter = ctx.adapter.Html5Adapter.extend(function() {
            var LOGGER = vdb.log.getLogger("VpaidJsAdapter");
            var QUARTILES = [["AdVideoFirstQuartile", 1 / 4], ["AdVideoMidpoint", 1 / 2], ["AdVideoThirdQuartile", 3 / 4]];
            var _onInitAd = function(width, height, viewMode, desiredBitrate, creativeData, environmentVars) {
                LOGGER.debug("onInitAd", width, height, viewMode, desiredBitrate, creativeData, environmentVars);
                this._slot = environmentVars["slot"];
                this._videoSlot = environmentVars["videoSlot"];
                this._topOffsetPromise = environmentVars["topOffsetPromise"];
                this._vpaidAPI._width = width;
                this._vpaidAPI._height = height;
                this._vpaidAPI._viewMode = viewMode;
                this._quartiles = [];
                this._slot.appendChild(this._container);
                this._vpaidAPI.sendEvent("AdLoaded");
            };
            var _onReady = function() {
                var vpaidAPI = this._vpaidAPI;
                var adOnly = this._adOnly;
                var onCompleted = function() {
                    if (!adOnly) {
                        vpaidAPI.sendEvent(vdb.events.VpaidApiEvent.AD_VIDEO_COMPLETE);
                    }
                    setTimeout(function() {
                        LOGGER.debug("onCompleted");
                        contextBindGroup.unbind();
                        context.api.destroy();
                        vpaidAPI.sendEvent("AdStopped");
                    }, 0);
                };
                var contextBindGroup = new vdb.events.EventContextBindGroup(vdb.events.EventContext.bind(this.player, vdb.enums.Html5PlayerEventType.FORCE_STOP, onCompleted));
                this._currentVideoRemainingTime = 0;
                contextBindGroup.addContexts(vdb.events.EventContext.bind(this.player, vdb.constants.PlayerEvent.VIDEO_TIMEUPDATE, onTimeUpdate.bind(this)), vdb.events.EventContext.bind(this.player, vdb.constants.PlayerEvent.AD_TIMEUPDATE, onTimeUpdate.bind(this)), vdb.events.EventContext.bind(this.player, vdb.constants.PlayerEvent.VIDEO_VOLUME_CHANGED, onVolumeChanged.bind(this)));
                if (this._adOnly) {
                    contextBindGroup.addContext(vdb.events.EventContext.bind(this.player, vdb.constants.PlayerEvent.CONTEXT_ENDED, onCompleted));
                } else {
                    contextBindGroup.addContext(vdb.events.EventContext.bind(this.player, vdb.enums.Html5PlayerEventType.REPLAY, onCompleted));
                }
                vdb.events.EventContext.bindOnce(this.player, vdb.constants.PlayerEvent.CONTEXT_STARTED, _onContextStarted.bind(this));
                this.player.controller.setControls(false);
                vpaidAPI.sendEvent("AdStarted");
            };
            var onTimeUpdate = function(event) {
                var newDuration = this._vpaidAPI["getAdDuration"]();
                if (!this._duration || this._duration !== newDuration) {
                    this._duration = newDuration;
                    this._vpaidAPI.sendEvent("AdDurationChange");
                }
                var remainingTime = 0;
                var isAdEvent = event.type === vdb.constants.PlayerEvent.AD_TIMEUPDATE;
                if (isAdEvent) {
                    remainingTime = event.data["timeRemaining"];
                }
                if (!this._adOnly) {
                    var playlist = this.player.controller.getPlayList();
                    if (!isAdEvent) {
                        this._currentVideoRemainingTime = event.data["duration"] - event.data["currentTime"];
                    }
                    remainingTime += this._currentVideoRemainingTime;
                    for (var i = playlist.getCurrentVideoIndex() + 1;i < this._videos.length;i++) {
                        var video = this._videos[i];
                        remainingTime += video["metadata"]["duration"] / 1E3;
                    }
                }
                this._remainingTime = remainingTime;
                checkQuartile.call(this, (this._duration - this._remainingTime) / this._duration);
                this._vpaidAPI.sendEvent("AdRemainingTimeChange");
            };
            var onVolumeChanged = function() {
                this._vpaidAPI.sendEvent("AdVolumeChange");
            };
            var checkQuartile = function(current) {
                if (!this._adOnly) {
                    for (var i = 0;i < QUARTILES.length;++i) {
                        var q = QUARTILES[i];
                        var event = q[0];
                        if (current > q[1] && this._quartiles.indexOf(event) === -1) {
                            this._vpaidAPI.sendEvent(event);
                            this._quartiles.push(event);
                        }
                    }
                }
            };
            var _onContextStarted = function() {
                this._vpaidAPI.sendEvent("AdImpression");
                this._vpaidAPI.sendEvent("AdVideoStart");
                if (this._adOnly) {
                    new vdb.events.VpaidEventDispatcher(this.player.controller.getAdController(), this._vpaidAPI);
                }
            };
            var _exposeVpaidAPI = function() {
                LOGGER.debug("Expose VpaidAPI");
                var adapter = this;
                var vpaidAPI = this._vpaidAPI;
                var self = this;
                var updateSize = function() {
                    LOGGER.debug("updateSize", this._width, this._height, this._viewMode);
                    adapter._container.style.width = this._viewMode == "fullscreen" ? "100%" : this._width + "px";
                    adapter._container.style.height = this._viewMode == "fullscreen" ? "100%" : this._height + "px";
                }.bind(vpaidAPI);
                vpaidAPI["getAdDuration"] = function() {
                    var duration = -2;
                    if (adapter.player != undefined) {
                        var adController = adapter.player.controller.getAdController();
                        duration = adController.getDuration() || 0;
                        if (!this._adOnly) {
                            for (var i = 0;i < self._videos.length;i++) {
                                var video = self._videos[i];
                                duration += video["metadata"]["duration"] / 1E3;
                            }
                        }
                    }
                    if (isNaN(duration)) {
                        duration = -2;
                    }
                    LOGGER.debug("getAdDuration " + duration);
                    return duration;
                };
                vpaidAPI["startAd"] = function() {
                    LOGGER.debug("startAd");
                    updateSize();
                    adapter._started = true;
                    adapter._vpaidStartedFuture.resolve();
                    if (adapter._loaded) {
                        _onReady.call(adapter);
                    }
                };
                vpaidAPI["stopAd"] = function() {
                    adapter.player.controller.stop();
                };
                vpaidAPI["setAdVolume"] = function(val) {
                    LOGGER.debug("setAdVolume", val);
                    var player = adapter.player;
                    if (player) {
                        var controller = player.controller;
                        var oldVolume = controller.getVolume();
                        controller.setVolume(val);
                        var newVolume = controller.getVolume();
                        if (oldVolume != newVolume) {
                            this.sendEvent("AdVolumeChange");
                        }
                    }
                };
                vpaidAPI["getAdVolume"] = function() {
                    LOGGER.debug("getAdVolume");
                    var player = adapter.player;
                    if (player) {
                        return player.controller.isMuted() ? 0 : player.controller.getVolume();
                    }
                    return 1;
                };
                vpaidAPI["resizeAd"] = function(width, height, viewMode) {
                    LOGGER.debug("resizeAd", width, height, viewMode);
                    this._width = width;
                    this._height = height;
                    this._viewMode = viewMode;
                    updateSize();
                    this.sendEvent("AdSizeChange");
                };
                vpaidAPI["pauseAd"] = function() {
                    LOGGER.debug("pauseAd");
                    adapter.player.controller.pause();
                };
                vpaidAPI["resumeAd"] = function() {
                    LOGGER.debug("resumeAd");
                    if (adapter.player) {
                        adapter.player.controller.resume();
                    }
                };
                vpaidAPI["expandAd"] = function() {
                    LOGGER.debug("expandAd");
                };
                vpaidAPI["getAdLinear"] = function() {
                    LOGGER.debug("getAdLinear");
                    return true;
                };
                vpaidAPI["getAdIcons"] = function() {
                    LOGGER.debug("getAdIcons");
                    return false;
                };
                vpaidAPI["getAdExpanded"] = function() {
                    LOGGER.debug("getAdExpanded");
                    return false;
                };
                vpaidAPI["getAdRemainingTime"] = function() {
                    LOGGER.debug("getAdRemainingTime " + self._remainingTime);
                    return self._remainingTime;
                };
                vpaidAPI["getAdSkippableState"] = function() {
                    LOGGER.debug("getAdSkippableState");
                    return false;
                };
                vpaidAPI["collapseAd"] = function() {
                    LOGGER.debug("collapseAd");
                };
                vpaidAPI["skipAd"] = function() {
                    LOGGER.debug("skipAd");
                    vpaidAPI.sendEvent("AdSkipped");
                    vpaidAPI.sendEvent("AdStopped");
                };
                vpaidAPI["getAdWidth"] = function() {
                    LOGGER.debug("getAdWidth");
                    return adapter._container.offsetWidth;
                };
                vpaidAPI["getAdHeight"] = function() {
                    LOGGER.debug("getAdHeight");
                    return adapter._container.offsetHeight;
                };
            };
            return{init:function(container, playerWidget, uiTemplate, adConfig, bid, geo, vpaidAPI, vpaidOptions) {
                var extrasResolver = new vdb.extras.ExtrasResolver(uiTemplate);
                if (!extrasResolver.hasExtra("vpaidcountdownskip")) {
                    uiTemplate["initialization"] = "autoplay";
                }
                this._super(container, playerWidget, uiTemplate, adConfig, bid, geo, false);
                this._container = container;
                this._vpaidAPI = vpaidAPI;
                this._videos = bid["videos"];
                this._adOnly = !this._videos.length || playerWidget["adOnly"];
                this._vpaidStartedFuture = new vdb.Future;
                context.vpaidStartedPromise = this._vpaidStartedFuture.getPromise();
                _exposeVpaidAPI.call(this);
                _onInitAd.apply(this, vpaidOptions);
            }, _onLoaded:function() {
                this._super();
                LOGGER.debug("HTML5 player script loaded");
                this._loaded = true;
                if (this._started) {
                    _onReady.call(this);
                }
            }, getTopOffsetPromise:function() {
                return this._topOffsetPromise;
            }};
        }());
        ctx.adapter.VpaidJsAdapter.initVpaidAPI = function(vpaidAPI, playerAPI) {
            var LOGGER = vdb.log.getLogger("VpaidAPI");
            var subscribers = vpaidAPI["subscribers"];
            vpaidAPI.playerAPI = playerAPI;
            LOGGER.debug("subscribers", subscribers);
            vpaidAPI.sendEvent = function(event, message) {
                var eventSubscribers = subscribers[event] || [];
                for (var i = 0;i < eventSubscribers.length;i++) {
                    var subscriber = eventSubscribers[i];
                    subscriber["callback"].call(subscriber["context"], message);
                }
            };
            playerAPI.addEventListener(vdb.constants.PlayerEvent.PLAYER_ERROR, function(error) {
                vdb.Utils.callAsync(vpaidAPI.sendEvent.bind(this, "AdError", error.data));
            }.bind(this));
            playerAPI.addEventListener(vdb.constants.PlayerEvent.VIDEO_PAUSE, function(error) {
                vdb.Utils.callAsync(vpaidAPI.sendEvent.bind(this, "AdPaused", error.data));
            }.bind(this));
            playerAPI.addEventListener(vdb.constants.PlayerEvent.AD_PAUSED, function(error) {
                vdb.Utils.callAsync(vpaidAPI.sendEvent.bind(this, "AdPaused", error.data));
            }.bind(this));
            playerAPI.addEventListener(vdb.constants.PlayerEvent.VIDEO_PLAY, function(error) {
                vdb.Utils.callAsync(vpaidAPI.sendEvent.bind(this, "AdPlaying", error.data));
            }.bind(this));
            playerAPI.addEventListener(vdb.constants.PlayerEvent.AD_PLAY, function(error) {
                vdb.Utils.callAsync(vpaidAPI.sendEvent.bind(this, "AdPlaying", error.data));
            }.bind(this));
            return vpaidAPI;
        };
    });
    vdb.define(function(ctx, context) {
        ctx.adapter.YoukuAdapter = {};
        var LOGGER = vdb.log.getLogger("YoukuAdapter");
        ctx.adapter.YoukuAdapter = ctx.adapter.BaseAdapter.extend(function() {
            var PLAYER_TYPE = "youku";
            var PlayerEvent = vdb.constants.PlayerEvent;
            var EVENTS = {};
            var YOUKU_BASE_ELEMENT_ID = "vdb-youku-player-";
            var YOUKU_API_SRC = "http://player.youku.com/jsapi";
            var CHECK_INTERVAL = 500;
            var CLIENT_ID_MACRO = "ykucid";
            var DEFAULT_CLIENT_ID = "24e38390de550346";
            var AUTOPLAY = "autoplay";
            var createYouKuPlayerElement = function() {
                this.youkuPlayerElement = document.createElement("div");
                this.youkuPlayerElement.setAttribute("id", this.youkuElementId);
                this.youkuPlayerElement["style"]["width"] = "100%";
                this.youkuPlayerElement["style"]["height"] = "100%";
                this.container.appendChild(this.youkuPlayerElement);
            };
            var loadYouKuScript = function(callback) {
                var youkuScript = document.createElement("script");
                youkuScript.type = "text/javascript";
                if (youkuScript.readyState) {
                    youkuScript.onreadystatechange = function() {
                        if (this.readyState == "loaded" || this.readyState == "complete") {
                            this.onreadystatechange = null;
                            callback();
                        }
                    };
                } else {
                    youkuScript.onload = function() {
                        callback();
                    };
                }
                youkuScript.src = YOUKU_API_SRC;
                this.container.insertBefore(youkuScript, this.container.firstChild);
            };
            var getPlayerSize = function() {
                return{width:this.container.offsetWidth, height:this.container.offsetHeight};
            };
            var startTimeCheck = function() {
                var _this = this;
                this.ticker = setInterval(function() {
                    _this.percent = Math.ceil(_this.player["currentTime"]() / _this.player["totalTime"]() * 100);
                    onVideoUpdated.call(_this);
                }, CHECK_INTERVAL);
            };
            var stopTimerCheck = function() {
                clearInterval(this.ticker);
            };
            var onVideoUpdated = function() {
                this.contentTracker.firePlaybackPixels(this.player["currentTime"]());
            };
            var onPlayerReadyHandler = function() {
                if (this.youkuPlayer == null) {
                    this.youkuPlayer = this.player["player"]()["_player"];
                    context.dispatchEvent(ctx.adapter.CREATED, this);
                    this.player.getSize = getPlayerSize.bind(this);
                    this.tracker = ctx.createBasicTracker();
                    this.contentTracker = new vdb.reporter.VidibleContentTracker(this.player, ctx);
                    this.contentTracker.setVideoDuration(this.player["totalTime"]());
                    this.contentTracker.setVideo(this.bid.getVideos()[0]);
                    this.tracker.display(getPlayerSize.call(this));
                    this.dispatchEvent({type:PlayerEvent.PLAYER_READY, data:{}});
                }
            };
            var onPlayStartHandler = function() {
                if (!this.viewEvents["start"]) {
                    this.viewEvents["start"] = true;
                    this.contentTracker.fireStartPlaying();
                }
                this.tracker.action("play");
                this.isVideoPlaying = true;
                startTimeCheck.call(this);
            };
            var onPlayEndHandler = function() {
                stopTimerCheck.call(this);
                this.contentTracker.fireCompletePlaying(this.player["currentTime"](), true);
                this.isVideoPlaying = false;
            };
            var createPlayer = function(externalVideoId) {
                var _this = this;
                if (window["YKU"]) {
                    this.player = new window["YKU"]["Player"](this.youkuElementId, {"styleid":"0", "client_id":this.clientId, "vid":externalVideoId, "autoplay":context.playerAPI.config["playerTemplate"]["initialization"] === AUTOPLAY, "show_related":false, "events":{"onPlayerReady":onPlayerReadyHandler.bind(_this), "onPlayStart":onPlayStartHandler.bind(_this), "onPlayEnd":onPlayEndHandler.bind(_this)}});
                }
            };
            return{init:function(container, playerWidget, uiTemplate, adConfig, rawBid, geo, isolated) {
                this._super(uiTemplate, container);
                LOGGER.debug("*** Init youku adapter");
                context.setPlayerType(PLAYER_TYPE);
                this.viewEvents = {};
                this.isVideoPlaying = false;
                this.percent = 0;
                this.ticker = null;
                this.container = container;
                this.playerWidget = playerWidget;
                this.uiTemplate = uiTemplate;
                this.bid = new vdb.model.Bid(rawBid);
                this.tracker = null;
                this.contentTracker = null;
                var getWithDefault = vdb.Utils.getWithDefault;
                this.clientId = getWithDefault(rawBid["videos"][0]["externalContentId"], getWithDefault(context.getMacro(CLIENT_ID_MACRO), DEFAULT_CLIENT_ID));
                var externalVideoId = rawBid["videos"][0]["externalId"];
                this.youkuElementId = YOUKU_BASE_ELEMENT_ID + externalVideoId;
                createYouKuPlayerElement.call(this);
                loadYouKuScript.call(this, createPlayer.bind(this, externalVideoId));
            }, addEventListener:function(event, handler) {
                if (!event || !handler) {
                    return;
                }
                if (this.youkuPlayer != null) {
                    var youkuPlayerEvent = EVENTS[event] || event;
                    this.youkuPlayer.addEventListener(youkuPlayerEvent, handler);
                }
                this._super(event, handler);
            }, dispatchEvent:function(event, data) {
                this._super(event, data);
                context.dispatchEvent(event, data);
            }, removeEventListener:function(event, handler) {
                if (!event || !handler) {
                    return;
                }
                if (this.youkuPlayer != null) {
                    var youkuPlayerEvent = EVENTS[event] || event;
                    this.youkuPlayer.removeEventListener(youkuPlayerEvent, handler);
                }
                this._super(event, handler);
            }, onBidUpdated:function(bid) {
            }, inView:function() {
            }, outOfView:function() {
            }, play:function() {
                if (this.player) {
                    this.player.playVideo();
                    this.isVideoPlaying = true;
                }
            }, pause:function() {
                if (this.player) {
                    this.player.pauseVideo();
                    this.isVideoPlaying = false;
                }
            }, mute:function() {
            }, volume:function(vol) {
            }, caption:function() {
            }, seekTo:function(time) {
                if (this.player) {
                    this.player.seekTo(time);
                }
            }, rewind:function() {
            }, enterFullscreen:function() {
                if (this.player) {
                    this.player.switchFullScreen();
                }
            }, exitFullscreen:function() {
                if (this.player) {
                    this.player.switchFullScreen();
                }
            }, getPlayerState:function() {
                var state = {};
                state["sellerId"] = this._uiTemplate["ownerId"];
                return state;
            }, getCurrentVideo:function() {
                return this.bid.getVideo(0);
            }, getCurrentVideoIndex:function() {
                return 0;
            }, getVolume:function() {
            }, getAdDuration:function(prop) {
                return null;
            }, getPlayerType:function() {
                return PLAYER_TYPE;
            }, isAd:function() {
                return false;
            }, onResize:function() {
            }, dispose:function() {
                var element = this.container;
                if (element && element.parentNode) {
                    element.parentNode.removeChild(element);
                }
            }, isPlaying:function() {
                return this.isVideoPlaying;
            }};
        }());
    });
    vdb.define(function(ctx, context) {
        ctx.BasePlugin = {};
        ctx.BasePlugin = vdb.core.Class.extend({init:function(params) {
            this.params = params;
            this._tracker = ctx.createBasicTracker();
            this.contentTracker = new vdb.reporter.VidibleContentTracker(params["player"], ctx);
            this.placementLoader = new vdb.loader.PlacementLoader(context);
            context.addEventListener(vdb.loader.PlacementLoader.LOADED, this.placementLoaded.bind(this));
            this.placementLoader.load();
        }, placementLoaded:function(placement) {
            this.placement = placement;
            var _this = this;
            ctx.createModuleLoader({container:document.getElementsByTagName("head")[0], scriptUrls:context.getBaseUrls("cdn") + "/js/html5/player-latest-min.js", initFuncName:"create"}).setIsolated(true).load(function() {
                _this._tracker.display(_this.getPlayerSize());
                _this.placementReady();
            });
        }, placementVideos:function() {
            return this.placement && this.placement["bid"] && this.placement["bid"]["videos"];
        }, onVideoPlay:function(e) {
            var videos = this.placementVideos();
            this.contentTracker.setVideoDuration(this.getCurrentDuration());
            this.contentTracker.setVideo({id:videos && videos.length > 0 && videos[this.currentVideo]["videoId"]});
            this.contentTracker.fireStartPlaying();
        }, setVideoIndex:function(videoIndex) {
            this.currentVideo = videoIndex;
            var currentVideo = this.getCurrentVideo();
            if (currentVideo) {
                var clipUrl = currentVideo["videoUrls"][0];
                this.setVideo(clipUrl, currentVideo);
            }
        }, getCurrentVideo:function() {
            var videos = this.placementVideos();
            if (videos && videos.length > 0) {
                this.currentVideo %= videos.length;
                return videos[this.currentVideo];
            }
            return null;
        }, getPlayerSize:function() {
            var template = this.placement["playerTemplate"];
            return{width:template["playerWidth"], height:template["playerHeight"]};
        }, getCurrentDuration:function() {
            return 0;
        }, setVideo:function(url, video) {
        }, placementReady:function() {
        }});
    });
    vdb.modules.PlayerInViewManager = vdb.core.Class.extend(function() {
        var LOGGER = vdb.log.getLogger("PlayerInViewManager");
        var PlayerEvent = vdb.constants.PlayerEvent;
        var macros = vdb.constants.PlayerMacros;
        var types = vdb.enums.IN_VIEW_TYPES;
        var inViewAction = function() {
            LOGGER.debug("in view");
            this.context.dispatchEvent(PlayerEvent.IN_VIEW);
        };
        var outOfViewAction = function() {
            LOGGER.debug("out of view");
            this.context.dispatchEvent(PlayerEvent.OUT_OF_VIEW);
        };
        var onPlayerReady = function() {
            bindEvents.call(this);
            this._inViewManager.ready(this.inViewOptions.inViewPercent);
            if (this._inViewManager.isInView(this.inViewOptions.inViewPercent)) {
                inViewAction.call(this);
            } else {
                this.context.dispatchEvent(PlayerEvent.ALLOW_POSTER);
            }
        };
        var unbindEvents = function() {
            LOGGER.debug("unbind events");
            this._inViewManager.unbindInViewChangeEvent(this.inViewOptions);
        };
        var bindEvents = function() {
            LOGGER.debug("bind events", this.inViewOptions);
            this._inViewManager.bindInViewChangeEvent(this.inViewOptions);
            if (!this.keepInViewManager) {
                vdb.events.EventContext.bindOnce(this.adapter, PlayerEvent.DISABLE_INVIEW, unbindEvents.bind(this));
            }
        };
        return{init:function(adapter, context) {
            LOGGER.debug("init");
            this.adapter = adapter;
            this.context = context;
            var injector = this.context.getInjector();
            var inviewPercent = this.context.api.getAutoPlayInView();
            var autoPauseValue = inviewPercent > 0 && this.context.api.getAutoPauseOutOfView();
            var pauseIfTabSwitch = this.context.getMacro(macros.PAUSE_IF_TAB_SWITCH) || autoPauseValue;
            var pauseIfScrolledAway = this.context.getMacro(macros.PAUSE_IF_SCROLLED_AWAY) || autoPauseValue;
            var initInViewManager = inviewPercent > 0 || pauseIfScrolledAway || pauseIfTabSwitch;
            if (initInViewManager) {
                this._inViewManager = injector.resolveSync(vdb.enums.Dependencies.IN_VIEW_MANAGER);
                this._config = injector.resolveSync(vdb.enums.Dependencies.CONFIG);
                this._inViewManager.setPauseOnScroll(!this._config.getParam(vdb.enums.ContextParams.FLOATING_PLAYER));
                this.keepInViewManager = pauseIfTabSwitch && pauseIfTabSwitch !== types.NEVER || pauseIfScrolledAway && pauseIfScrolledAway !== types.NEVER;
                var defaultAutoPause = inviewPercent > 0 ? types.ALWAYS : types.NEVER;
                this.inViewOptions = {pauseIfTabSwitch:pauseIfTabSwitch || defaultAutoPause, pauseIfScrolledAway:pauseIfScrolledAway || defaultAutoPause, inViewPercent:inviewPercent, inViewAction:inViewAction.bind(this), outOfViewAction:outOfViewAction.bind(this)};
                this.adapter.addEventListener(PlayerEvent.PLAYER_READY, onPlayerReady.bind(this));
            }
        }};
    }());
    vdb.define(function(ctx, context) {
        context.addEventListener(context.ctx.adapter.CREATED, function(adapter) {
            new vdb.modules.PlayerInViewManager(adapter, context);
        });
    });
    vdb.reporting.PosterOptimisationTracker = vdb.tracking.PlayerPixelTrackerBase.extend(function() {
        var playContext;
        var clickContext;
        var currentVideo;
        var unbindPlayContext = function() {
            if (playContext) {
                playContext.unbind();
                playContext = null;
            }
        };
        var unbindAll = function() {
            unbindPlayContext();
            if (clickContext) {
                clickContext.unbind();
                clickContext = null;
            }
        };
        var report = function(impression) {
            if (!currentVideo || !currentVideo.thumbnailId) {
                return;
            }
            var pixelURL = this._context.getAdTrackingUrl("timg.gif");
            var pixelParams = {};
            vdb.Utils.copy(this._context.getParameters(), pixelParams);
            vdb.Utils.copy({"vid":currentVideo.id, "tid":currentVideo.thumbnailId, "e":impression ? "i" : "c"}, pixelParams);
            pixelURL += "?" + vdb.Utils.serialize(pixelParams);
            this.callExternalPixel(pixelURL);
        };
        var onPlay = function() {
            unbindAll();
            var video = this._adapter.getCurrentVideo();
            if (video.id !== currentVideo.id) {
                return;
            }
            report.call(this, false);
        };
        var onClick = function() {
            unbindPlayContext();
            playContext = vdb.events.EventContext.group(vdb.events.EventContext.bindOnce(this._adapter, "Controls.Replay", onPlay.bind(this)), vdb.events.EventContext.bindOnce(this._adapter, "Controls.Play", onPlay.bind(this)), vdb.events.EventContext.bindOnce(this._adapter, vdb.constants.PlayerEvent.CONTEXT_STARTED, onPlay.bind(this)), vdb.events.EventContext.bindOnce(this._adapter, vdb.constants.PlayerEvent.PLAY_TRIGGERED, onPlay.bind(this)));
            setTimeout(unbindPlayContext.bind(this), 200);
        };
        var onShowPoster = function() {
            unbindAll();
            currentVideo = this._adapter.getCurrentVideo();
            if (currentVideo) {
                report.call(this, true);
                clickContext = vdb.events.EventContext.bind(this._adapter, vdb.constants.PlayerEvent.PLAYER_CLICK, onClick.bind(this), true);
            }
        };
        var init = function(context, adapter) {
            this._super(context);
            this._context = context;
            this._adapter = adapter;
            vdb.events.EventContext.bind(this._adapter, vdb.constants.PlayerEvent.VIDEO_POSTER_READY, onShowPoster.bind(this));
        };
        return{init:init};
    }());
    vdb.define(function(ctx, context) {
        context.addEventListener(context.ctx.adapter.CREATED, function(adapter) {
            var Tracker = vdb.reporting.PosterOptimisationTracker;
            Tracker.instance = new Tracker(context, adapter);
        });
    });
    vdb.utils.PerformanceUtils = function() {
        var LOGGER = vdb.log.getLogger("PerformanceUtil");
        var PerformanceConstants = vdb.utils.PerformanceConstants;
        var api = PerformanceConstants.API;
        var performance = vdb.utils.WindowUtil.getPerformance();
        var isApi = function(obj, prop) {
            return obj && typeof obj[prop] === "function";
        };
        return{isSupported:function() {
            return isApi(performance, api.MARK) && isApi(performance, api.GET_ENTRIES_BY_TYPE);
        }, mark:function(name) {
            if (isApi(performance, api.MARK)) {
                LOGGER.info('mark("' + name + '")');
                performance[api.MARK](name);
            }
        }, getScripts:function() {
            if (isApi(performance, api.GET_ENTRIES_BY_TYPE)) {
                return performance[api.GET_ENTRIES_BY_TYPE](PerformanceConstants.ENTRY_TYPE.RESOURCE).filter(function(d) {
                    return d.initiatorType === PerformanceConstants.INITIATOR_TYPE.SCRIPT;
                });
            }
            return[];
        }, getXhr:function() {
            if (isApi(performance, api.GET_ENTRIES_BY_TYPE)) {
                return performance[api.GET_ENTRIES_BY_TYPE](PerformanceConstants.ENTRY_TYPE.RESOURCE).filter(function(d) {
                    return d.initiatorType === PerformanceConstants.INITIATOR_TYPE.XHR;
                });
            }
            return[];
        }, getMarkers:function() {
            if (isApi(performance, api.GET_ENTRIES_BY_TYPE)) {
                return performance[api.GET_ENTRIES_BY_TYPE](PerformanceConstants.ENTRY_TYPE.MARK);
            }
            return[];
        }, alignTimestamp:function(time) {
            var result;
            var performanceTiming = performance[api.TIMING];
            if (performanceTiming) {
                if (time <= performanceTiming[api.NAVIGATION_START]) {
                    result = time;
                } else {
                    result = time - performanceTiming[api.NAVIGATION_START];
                }
            }
            return result;
        }};
    }();
    vdb.loadTime.LoadTimeHelper = function() {
        var PlayerEvent = vdb.constants.PlayerEvent;
        var PlaybackMode = vdb.enums.player.PlaybackMode;
        var LoadTimeConstants = vdb.loadTime.LoadTimeConstants;
        var playerEventsToMark = [PlayerEvent.VIDEO_POSTER_READY, PlayerEvent.PLAYER_READY, PlayerEvent.PLAY_TRIGGERED, PlayerEvent.VIDEO_START, PlayerEvent.AD_START];
        var breakpointsMap = function() {
            var bp = {};
            bp[LoadTimeConstants.SCRIPTS.DELIVERY_URL] = "Loading Player Configuration";
            bp[LoadTimeConstants.SCRIPTS.VIDIBLE_MIN] = "Loading Player Script";
            bp[LoadTimeConstants.MARKERS.PLAYER_LOAD_TIME_START] = "Player Bootstrap";
            bp[LoadTimeConstants.MARKERS.CONTEXT_CREATED] = "Context Created";
            bp[LoadTimeConstants.MARKERS.ADAPTER_CREATED] = "Adapter Created";
            bp[PlayerEvent.VIDEO_POSTER_READY] = "Poster Ready";
            bp[PlayerEvent.PLAYER_READY] = "Player Ready";
            bp[PlayerEvent.CONTEXT_INTENT] = "Context Intent";
            bp[PlayerEvent.PLAY_TRIGGERED] = "Play Triggered";
            bp[PlayerEvent.AD_BLOCKER_COMPLETE] = "Ad System Done";
            bp[PlayerEvent.VIDEO_START] = "Video Start";
            bp[PlayerEvent.AD_START] = "Ad Start";
            bp[LoadTimeConstants.AD_MARKERS.AD_SYSTEM_INIT] = "Ad System Created";
            bp[LoadTimeConstants.AD_MARKERS.AD_SYSTEM_AD_START] = "Ad Started";
            bp[LoadTimeConstants.AD_MODEL.AD_SERVER_REQUESTS] = "Ad Server Request";
            bp[LoadTimeConstants.AD_MODEL.AD_CHAIN] = "Ad Request";
            bp[LoadTimeConstants.AD_MODEL.AD_MEDIA_FILES] = "Ad Media Request";
            return bp;
        }();
        var isModelCompleteEvent = function(event) {
            return event === PlayerEvent.AD_START || event === PlayerEvent.VIDEO_START;
        };
        var isModelReadyEvent = function(event) {
            return event === PlayerEvent.PLAYER_READY || event === PlayerEvent.VIDEO_POSTER_READY || event === PlayerEvent.AD_START || event === PlayerEvent.VIDEO_START;
        };
        var getDsTiming = function(bcid, pid) {
            var dsFilter = function(entry) {
                return entry.name.indexOf(LoadTimeConstants.SCRIPTS.DELIVERY_URL) > -1 && (!bcid || entry.name.indexOf(bcid) > -1) && (!pid || entry.name.indexOf(pid) > -1);
            };
            var ds = vdb.Utils.find(vdb.utils.PerformanceUtils.getScripts(), dsFilter) || vdb.Utils.find(vdb.utils.PerformanceUtils.getXhr(), dsFilter) || {};
            ds.origName = LoadTimeConstants.SCRIPTS.DELIVERY_URL;
            ds.type = LoadTimeConstants.BREAKPOINT_TYPE.PLAYER;
            return ds;
        };
        var getVidMinTiming = function() {
            var vidMinFilter = function(entry) {
                return entry.name.indexOf(LoadTimeConstants.SCRIPTS.VIDIBLE_MIN) > -1;
            };
            var vidMin = vdb.Utils.find(vdb.utils.PerformanceUtils.getScripts(), vidMinFilter) || {};
            vidMin.origName = LoadTimeConstants.SCRIPTS.VIDIBLE_MIN;
            vidMin.type = LoadTimeConstants.BREAKPOINT_TYPE.PLAYER;
            return vidMin;
        };
        var getMarkers = function(prefix) {
            return vdb.utils.PerformanceUtils.getMarkers().filter(function(marker) {
                return marker.name.indexOf(prefix) === 0;
            }).map(function(marker) {
                marker.origName = marker.name.substr(prefix.length);
                marker.type = LoadTimeConstants.BREAKPOINT_TYPE.PLAYER;
                return marker;
            });
        };
        var compareStartTime = function(a, b) {
            return a.startTime - b.startTime;
        };
        var isScriptApi = function(ds, vidMin) {
            return vidMin.responseEnd <= ds.startTime;
        };
        var isSecondPlayer = function(ds, vidMin) {
            return vidMin.startTime < ds.responseEnd;
        };
        var isAutoplay = function(playbackMode) {
            return!playbackMode || playbackMode === PlaybackMode.AUTOPLAY_AD_ONLY || playbackMode === PlaybackMode.AUTOPLAY;
        };
        var isUrl = function(url) {
            return url && url.indexOf("http") === 0;
        };
        var createBreakpoint = function(origName, type, start, end, url) {
            return{"name":origName, "label":breakpointsMap[origName], "type":type, "start":vdb.Utils.roundByDigit(start, 2), "end":vdb.Utils.roundByDigit(end, 2), "duration":vdb.Utils.roundByDigit(end - start, 2), "url":isUrl(url) ? url : null};
        };
        var calcModelState = function(breakpoints) {
            var i;
            var j;
            var marker;
            for (i = 0;i < breakpoints.length;i++) {
                for (j = breakpoints[i].length - 1;j >= 0;j--) {
                    marker = breakpoints[i][j];
                    if (j === breakpoints[i].length - 1 && marker.end > LoadTimeConstants.MODEL_READY_TIMEOUT) {
                        return LoadTimeConstants.MODEL_STATE.ERROR;
                    }
                    if (isModelReadyEvent(marker.name)) {
                        return LoadTimeConstants.MODEL_STATE.READY;
                    }
                }
            }
            return LoadTimeConstants.MODEL_STATE.LOADING;
        };
        var getPlayTriggeredTime = function(markers) {
            return markers.reduce(function(time, entry) {
                if (entry.origName === PlayerEvent.PLAY_TRIGGERED) {
                    return time || entry.startTime;
                }
                return time;
            }, null);
        };
        var getFinalMarkers = function(markers) {
            return markers.filter(function(entry) {
                return entry.origName !== LoadTimeConstants.MARKERS.PLAYER_LOAD_TIME_START && entry.origName !== PlayerEvent.PLAY_TRIGGERED;
            });
        };
        var createAdMarker = function(origName, time, url, type) {
            return{name:url || origName, startTime:vdb.utils.PerformanceUtils.alignTimestamp(time), origName:origName, type:type || LoadTimeConstants.BREAKPOINT_TYPE.AD};
        };
        var getAdsMarkers = function(adsModel) {
            var adMarkers = [];
            var mrk = LoadTimeConstants.AD_MARKERS;
            var mdl = LoadTimeConstants.AD_MODEL;
            if (adsModel) {
                adMarkers.push(createAdMarker(mrk.AD_SYSTEM_INIT, adsModel[mdl.INIT_TIME], null, LoadTimeConstants.BREAKPOINT_TYPE.PLAYER));
                adsModel[mdl.AD_SERVER_REQUESTS].forEach(function(adServerRequest) {
                    adServerRequest[mdl.AD_GROUPS].forEach(function(adGroup) {
                        adGroup[mdl.ADS].forEach(function(ad) {
                            ad[mdl.AD_CHAIN].forEach(function(adChain) {
                                adMarkers.push(createAdMarker(mdl.AD_CHAIN, adChain["end"], adChain["url"]));
                            });
                        });
                    });
                    adMarkers.push(createAdMarker(mdl.AD_SERVER_REQUESTS, adServerRequest["end"], adServerRequest["requestUrl"]));
                });
            }
            return adMarkers.filter(function(m) {
                return m.startTime;
            }).sort(compareStartTime);
        };
        var calcLoadTimeModel = function(bcid, pid, pre, playbackMode, adsModel) {
            var ds = getDsTiming(bcid, pid);
            var vidMin = getVidMinTiming();
            var markers = getMarkers(pre);
            var adMarkers = getAdsMarkers(adsModel);
            var breakpoints = [];
            var currentModel = [];
            var ctpSecondModelCreated = false;
            var secondPlayer = isSecondPlayer(ds, vidMin);
            var scriptApi = isScriptApi(ds, vidMin);
            var autoplay = isAutoplay(playbackMode);
            var mainModelZeroTime = scriptApi ? markers[0].startTime : ds.startTime;
            var playTriggeredTime = getPlayTriggeredTime(markers);
            var entries = getFinalMarkers(markers).concat(!(scriptApi || secondPlayer) ? [ds, vidMin] : [ds]).concat(adMarkers).sort(compareStartTime);
            if (scriptApi || secondPlayer) {
                currentModel.push(createBreakpoint(vidMin.origName, vidMin.type, 0, vidMin.responseEnd - vidMin.startTime, vidMin.name));
                breakpoints.push(currentModel);
                currentModel = [];
            }
            entries.forEach(function(entry, i) {
                var prevEntry = entries[i - 1];
                var prevTime;
                var currentTime = entry.responseEnd || entry.startTime;
                var currentZero;
                var ctpFirstModel = playTriggeredTime <= 0 || currentTime <= playTriggeredTime;
                if (autoplay || ctpFirstModel) {
                    prevTime = prevEntry ? prevEntry.responseEnd || prevEntry.startTime : mainModelZeroTime;
                    currentZero = mainModelZeroTime;
                } else {
                    prevTime = prevEntry && prevEntry.startTime > playTriggeredTime ? prevEntry.startTime : playTriggeredTime;
                    currentZero = playTriggeredTime;
                    if (!ctpSecondModelCreated) {
                        breakpoints.push(currentModel);
                        currentModel = [];
                        ctpSecondModelCreated = true;
                    }
                }
                currentModel.push(createBreakpoint(entry.origName, entry.type, prevTime - currentZero, currentTime - currentZero, entry.name));
            });
            breakpoints.push(currentModel);
            return{"state":calcModelState(breakpoints), "breakpoints":breakpoints};
        };
        return{PLAYER_EVENTS_MARKERS:playerEventsToMark, LABEL_MAP:breakpointsMap, isModelCompleteEvent:isModelCompleteEvent, isModelReadyEvent:isModelReadyEvent, calcLoadTimeModel:calcLoadTimeModel, calcModelState:calcModelState};
    }();
    vdb.loadTime.LoadTimeModel = vdb.core.Class.extend(function() {
        var LoadTimeConstants = vdb.loadTime.LoadTimeConstants;
        var LoadTimeHelper = vdb.loadTime.LoadTimeHelper;
        var EventContext = vdb.events.EventContext;
        var getLoadTime = function() {
            var adsLoadTimeModel = this.playerController.getAdController().getLoadTime();
            return LoadTimeHelper.calcLoadTimeModel(this.bcid, this.playerId, this.pre, this.playbackMode, adsLoadTimeModel);
        };
        var bindPlayerEvents = function(player) {
            LoadTimeHelper.PLAYER_EVENTS_MARKERS.forEach(function(event) {
                var callback = function() {
                    this.mark(event);
                    if (LoadTimeHelper.isModelReadyEvent(event)) {
                        this.future.resolve(getLoadTime.call(this));
                    }
                    if (LoadTimeHelper.isModelCompleteEvent(event)) {
                        this.eventGroup.unbind();
                    }
                }.bind(this);
                EventContext.bind(player, event, callback).link(this.eventGroup);
            }.bind(this));
        };
        var updatePlayerData = function(context) {
            var playerInfo = context.playerAPI["getPlayerInfo"]();
            this.bcid = playerInfo["bcid"];
            this.playerId = playerInfo["playerId"];
            this.playbackMode = context.getPlaybackMode();
        };
        return{init:function(id) {
            this.pre = "o2-" + id + "-";
            this.mark(LoadTimeConstants.MARKERS.PLAYER_LOAD_TIME_START);
            this.future = new vdb.Future;
            this.eventGroup = EventContext.empty();
        }, mark:function(name) {
            vdb.utils.PerformanceUtils.mark(this.pre + name);
        }, bindToContext:function(context) {
            this.mark(LoadTimeConstants.MARKERS.CONTEXT_CREATED);
            context.addEventListener(context.ctx.adapter.CREATED, function(adapter) {
                this.mark(LoadTimeConstants.MARKERS.ADAPTER_CREATED);
                this.playerController = adapter.player.controller;
                bindPlayerEvents.call(this, adapter.player);
                updatePlayerData.call(this, context);
                context.playerAPI["getLoadTime"] = getLoadTime.bind(this);
                context.playerAPI["getLoadTimePromise"] = function() {
                    return this.future.getPromise();
                }.bind(this);
            }.bind(this));
        }};
    }());
    vdb.utils.PlaceholdersResolverRule = vdb.core.Class.extend(function() {
        var init = function(result, placeholders) {
            if (!vdb.Utils.isArray(placeholders)) {
                placeholders = [placeholders];
            }
            this._result = result;
            this._placeholders = placeholders.slice(0);
        };
        var apply = function(string) {
            if (!string) {
                return string;
            }
            var result = string;
            var value = this._result;
            value = vdb.Utils.isFunction(value) ? value() : value;
            value = value != null ? value.toString() : "";
            for (var j = 0;j < this._placeholders.length;j++) {
                var placeholder = this._placeholders[j];
                var leftNonWord = placeholder.match(/^\W/g) != null;
                var rightNonWord = placeholder.match(/\W$/g) != null;
                var beginOrNonWord = "(\\W|^)";
                var endOrNonWord = "(\\W|$)";
                placeholder = placeholder.replace(/([{}\(\)\^$&.\*\?\/\+\|\[\\\\]|\]|\-)/g, "\\$1");
                var regExp = new RegExp((leftNonWord ? "" : beginOrNonWord) + placeholder + (rightNonWord ? "" : endOrNonWord), "g");
                result = result.replace(regExp, (leftNonWord ? "" : "$1") + value + (rightNonWord ? "" : "$2"));
            }
            return result;
        };
        return{init:init, apply:apply};
    }());
    vdb.utils.PlaceholdersResolver = vdb.core.Class.extend(function() {
        var init = function(rules) {
            this._rules = rules || [];
        };
        var join = function(next) {
            if (!next) {
                return this;
            }
            var pair = new vdb.utils.PlaceholdersResolver;
            var _left = this;
            var _right = next;
            pair.resolve = function(source) {
                return _right.resolve(_left.resolve(source));
            };
            return pair;
        };
        var resolve = function(source) {
            if (!source) {
                return source;
            }
            var result = source;
            for (var i = 0;i < this._rules.length;i++) {
                result = this._rules[i].apply(result);
            }
            return result;
        };
        return{init:init, join:join, resolve:resolve};
    }());
    (function(def) {
        def.create = function(config) {
            var rules = [];
            for (var i = 0;i < arguments.length;i++) {
                var confLine = arguments[i];
                var result = confLine.pop();
                rules.push(new vdb.utils.PlaceholdersResolverRule(result, confLine));
            }
            return new def(rules);
        };
        def.createRegEx = function(pattern, replaceFunc) {
            return new def([new vdb.utils.RegexResolverRule(pattern, replaceFunc)]);
        };
        def.fromObject = function(source, prefix, suffix) {
            prefix = prefix || "";
            suffix = suffix || "";
            var rules = [];
            for (var key in source) {
                if (source.hasOwnProperty(key)) {
                    rules.push([prefix + key + suffix, source[key]]);
                }
            }
            return def.create.apply(null, rules);
        };
    })(vdb.utils.PlaceholdersResolver);
    vdb.utils.MacrosResolver = vdb.core.Class.extend(function() {
        function _replaceMacros() {
            if (arguments.length < 3) {
                return "";
            }
            var key = arguments[2].replace(/^m\./, "");
            var placeholder = arguments[0];
            return _getParamValue.call(this, key) || placeholder;
        }
        function _replaceEncodedMacros() {
            if (arguments.length < 3) {
                return "";
            }
            var key = arguments[2].replace(/^m\./, "");
            return encodeURIComponent(_getParamValue.call(this, key));
        }
        function _getParamValue(key) {
            return this._config.getMacro(key) || "";
        }
        function _replaceMeta() {
            if (arguments.length < 3) {
                return "";
            }
            var key = arguments[2];
            return this._video && this._video.metadata[key];
        }
        var PlaceholdersResolver = vdb.utils.PlaceholdersResolver;
        var ReportingMacros = vdb.enums.ReportingMacros;
        var PlayerMacros = vdb.constants.PlayerMacros;
        var Dependencies = vdb.enums.Dependencies;
        var _resolveDependencies = function() {
            this._environment = this._injector.resolveSync(Dependencies.ENVIRONMENT);
            this._config = this._injector.resolveSync(Dependencies.CONFIG);
            this._viewability = this._injector.resolveSync(Dependencies.VIEWABILITY);
            this._smartViewability = this._injector.resolveSync(Dependencies.SMART_VIEWABILITY);
            this._flashDetector = this._injector.resolveSync(Dependencies.FLASH_DETECTOR);
            this._display = this._injector.resolveSync(Dependencies.DISPLAY);
        };
        var _createExternalMacrosResolver = function() {
            return PlaceholdersResolver.createRegEx(/(\[MACROS:)(.+?)(\])/g, _replaceMacros.bind(this)).join(PlaceholdersResolver.createRegEx(/(\|MACROS:)(.+?)(\|)/g, _replaceMacros.bind(this))).join(PlaceholdersResolver.createRegEx(/(\[ENC_MACROS:)(.+?)(\])/g, _replaceEncodedMacros.bind(this))).join(PlaceholdersResolver.createRegEx(/(\|ENC_MACROS:)(.+?)(\|)/g, _replaceEncodedMacros.bind(this)));
        };
        var _addMetaToRules = function() {
            return PlaceholdersResolver.createRegEx(/(\[META:)(.+?)(\])/g, _replaceMeta.bind(this)).join(PlaceholdersResolver.createRegEx(/(\|meta:)(.+?)(\|)/g, _replaceMeta.bind(this)));
        };
        return{init:function(injector, adsConfig) {
            this._injector = injector;
            this._adsConfig = adsConfig;
            this._rules = [];
            _resolveDependencies.call(this);
        }, initRules:function() {
            this._rules = [];
            this._video = this._environment.getCurrentVideo();
            var containerWidth;
            var containerHeight;
            var videoDuration;
            var playerState = this._environment.getPlayerState() || {};
            if (this._video) {
                containerWidth = playerState["w"];
                containerHeight = playerState["h"];
                var meta = this._video.metadata || {};
                videoDuration = meta["duration"] ? Math.round(meta["duration"] / 1E3) : "";
            } else {
                this._video = {};
                var size = this._environment.getSize() || {};
                containerWidth = size.width;
                containerHeight = size.height;
                videoDuration = "";
            }
            containerWidth = parseInt(containerWidth, 10) || 0;
            containerHeight = parseInt(containerHeight, 10) || 0;
            var maxDimension = Math.max(containerWidth, containerHeight);
            var playerSize = maxDimension === 0 ? -1 : maxDimension < 350 ? 1 : maxDimension < 500 ? 2 : 3;
            var pageUrl = encodeURIComponent(this._config.getMacro(PlayerMacros.URL) || vdb.utils.WindowUtil.getTopMostLocation(window));
            var getWithDefault = vdb.Utils.getWithDefault;
            this._rules.push(ReportingMacros.APID.concat(this._config.getATPData() ? this._config.getATPData()["utid"] || "" : ""), ReportingMacros.ASSETURI.concat(this._display.getAdMediaUrl()), ReportingMacros.AUTOPLAY.concat(this._adsConfig.autoplay ? 1 : 0), ReportingMacros.BEON_CW.concat(getWithDefault(this._config.getMacro(PlayerMacros.BEON_CW), 0)), ReportingMacros.BEON_VIDEO_ID.concat(getWithDefault(this._config.getMacro(PlayerMacros.BEON_VID), 1)), ReportingMacros.BID.concat(this._config.getBidId()),
                ReportingMacros.CACHE_BUSTER.concat(Math.random().toString(10).substr(2)), ReportingMacros.CONTAINER_HEIGHT.concat(containerHeight), ReportingMacros.CONTAINER_WIDTH.concat(containerWidth), ReportingMacros.CONTENTPLAYHEAD.concat(vdb.utils.Common.formatTime(this._display.getCurrentTime(), true, true)), ReportingMacros.DE_RSS_ID.concat(this._video.deRssId), ReportingMacros.DE_URL.concat(encodeURIComponent(pageUrl)), ReportingMacros.DOMAIN.concat(this.getDomainRoot(location.hostname)), ReportingMacros.DOMAIN_NAME.concat(location.host),
                ReportingMacros.FLASH_SUPPORT.concat(this._flashDetector.isFlashAvailable() ? 1 : 0), ReportingMacros.FOCUS.concat(vdb.utils.PageUtil.isVisible() ? 1 : 0), ReportingMacros.MOAT_VIEWABILITY.concat(this._smartViewability.getVisiblePercent()), ReportingMacros.MUTED.concat(this._display.isMuted() ? 1 : 0), ReportingMacros.NULLABLE.concat(""), ReportingMacros.PID.concat(this._config.getPlayerId()), ReportingMacros.PLAYER_SIZE.concat(playerSize), ReportingMacros.RSS_ID.concat(this._video.rssVideoId),
                ReportingMacros.TIMESTAMP.concat((new Date).getTime()), ReportingMacros.VIDEO_DESCRIPTION.concat(this._video.description), ReportingMacros.VIDEO_DETAIL_PAGE.concat(this._video.detailPage), ReportingMacros.VIDEO_DURATION.concat(videoDuration), ReportingMacros.VIDEO_FILE_URL.concat(this._video.videoUrls && this._video.videoUrls[0]), ReportingMacros.VIDEO_HEIGHT.concat(containerHeight), ReportingMacros.VIDEO_ID.concat(this._video.id), ReportingMacros.VIDEO_KEYWORDS.concat(this._video.keywords),
                ReportingMacros.VIDEO_PERCENT.concat(playerState.currentPercent), ReportingMacros.VIDEO_TITLE.concat(this._video.title), ReportingMacros.VIDEO_URL.concat(pageUrl), ReportingMacros.VIDEO_WIDTH.concat(containerWidth), ReportingMacros.ADAP_VIEWABLE_OPPORTUNITY.concat(this._viewability.getVisiblePercent()), ReportingMacros.VIEWABILITY.concat(this._viewability.getViewableOpportunity()), ReportingMacros.VIEWABLE_OPPORTUNITY.concat(this._smartViewability.getViewableOpportunity()), ReportingMacros.VVUID.concat(this._config.getLoggerParams()["vvuid"]),
                ReportingMacros.LOCATION_LAT.concat(this._config.getGeo() ? this._config.getGeo().latitude : ""), ReportingMacros.LOCATION_LON.concat(this._config.getGeo() ? this._config.getGeo().longitude : ""), ReportingMacros.DEPTH.concat(vdb.utils.WindowUtil.getIframeDepth()));
        }, resolve:function(source) {
            this.initRules();
            var placeholdersResolver = PlaceholdersResolver.create.apply(null, this._rules).join(_createExternalMacrosResolver.call(this)).join(_addMetaToRules.call(this));
            return placeholdersResolver.resolve(source);
        }, getDomainRoot:function(domain) {
            var domainParts = domain.split(/\./);
            switch(domainParts.length) {
                case 2:
                    return domainParts.slice(-2)[0];
                default:
                    return domainParts.slice(-3)[0];
            }
        }};
    }());
    vdb.utils.Synchronizer = vdb.core.Class.extend(function() {
        var _checkWaitingDone_ = function() {
            if (this._waitingObjects.length === 0) {
                this.reset();
                if (this._continuation) {
                    this._continuation();
                }
            }
        };
        var init = function(objects, continuation) {
            this._waitingObjects = objects.slice();
            this._continuation = continuation;
            this._listeners = [];
            _checkWaitingDone_.call(this);
        };
        var reset = function() {
            for (var i = 0;i < this._listeners.length;i++) {
                this._listeners[i].unbind();
            }
            this._listeners = [];
        };
        var release = function(o) {
            var idx = this._waitingObjects.indexOf(o);
            if (idx !== -1) {
                this._waitingObjects.splice(idx, 1);
                _checkWaitingDone_.call(this);
            }
        };
        var useReleaseEvent = function(eventType) {
            for (var i = 0;i < this._waitingObjects.length;i++) {
                var o = this._waitingObjects[i];
                var ctx = vdb.events.EventContext.bind(o, eventType, this.release.bind(this, o));
                this._listeners.push(ctx);
            }
            return this;
        };
        return{init:init, reset:reset, release:release, useReleaseEvent:useReleaseEvent};
    }());
    vdb.html5 = {};
    vdb.html5.events = {};
    vdb.html5.events.Event360 = vdb.events.Event.extend(function() {
        var init = function(type, data) {
            this._super(type);
            this.data = data;
        };
        var clone = function() {
            return new vdb.html5.events.Event360(this.type, this.data);
        };
        return{data:null, init:init, clone:clone};
    }());
    (function(def) {
        def.SET_ORIENTATION = "Event360.SetOrientation";
        def.RESET_ORIENTATION = "Event360.ResetOrientation";
        def.TOGGLE_GYRO = "Event360.ToggleGyro";
        def.TOGGLE_SKIN = "Event360.ToggleSkin";
        def.TOGGLE_STEREOSCOPIC = "Event360.ToggleStereoScopic";
        def.VIDEO_PRESS = "Event360.VideoPress";
        def.VIDEO_RELEASE = "Event360.VideoRelease";
        def.COMPASS_PRESS = "Event360.CompassPress";
        def.COMPASS_RELEASE = "Event360.CompassRelease";
        def.MOVED = "Event360.Moved";
        def.ERROR = "Event360.Error";
    })(vdb.html5.events.Event360);
    vdb.api.VRApi = vdb.core.Class.extend(function() {
        function onVideoStart() {
            this._vrReady.resolve();
        }
        function onAdapterReady(adapter) {
            try {
                adapter.player.addEventListener(vdb.constants.PlayerEvent.VIDEO_START, onVideoStart.bind(this));
                return this;
            } catch (e) {
                throw new Error("VRApi not available");
            }
        }
        var Event360 = vdb.html5.events.Event360;
        return{init:function(context) {
            this._context = context;
            this._vrReady = new vdb.Future;
            this._context.playerAPI.getAdapterPromise().then(onAdapterReady.bind(this));
        }, getPromise:function() {
            return this._context.playerAPI.getAdapterPromise().then(onAdapterReady.bind(this));
        }, "getOrientation":function() {
            return vdb.html5.player.Display.getInstance().getOrientation();
        }, "setOrientation":function(orientation) {
            this._vrReady.getPromise().then(function() {
                this._context.dispatchEvent(new vdb.html5.events.Event360(Event360.SET_ORIENTATION, orientation));
            }.bind(this));
        }, "resetOrientation":function() {
            this._vrReady.getPromise().then(function() {
                this._context.dispatchEvent(new vdb.html5.events.Event360(Event360.RESET_ORIENTATION));
            }.bind(this));
        }, "toggleGyro":function() {
            this._vrReady.getPromise().then(function() {
                this._context.dispatchEvent(new vdb.html5.events.Event360(Event360.TOGGLE_GYRO));
            }.bind(this));
        }, "toggleSkin":function() {
            this._vrReady.getPromise().then(function() {
                this._context.dispatchEvent(new vdb.html5.events.Event360(Event360.TOGGLE_SKIN));
            }.bind(this));
        }};
    }());

})(window);
document['bundledExtras'] = document['bundledExtras'] || {};
document['bundledExtras']['moat'] = function () {
    vdb.extras.MoatExtra = vdb.extras.CoreExtra.extend(function() {
        var AD_PARTNER_CODE = "aolvidible111409714438";
        var CONTENT_PARTNER_CODE = "aolvidiblecontent859375382";
        var BRANDED_CONTENT_PARTNER_CODE = "aolvidiblebrandedcontent845377573";
        var getAdIds = function(video, event) {
            var ids = getBaseIds.call(this, video);
            addAdSlicers(ids, event);
            return ids;
        };
        var getBaseIds = function(video) {
            var baseParams = this._context.getParameters();
            return{"level1":baseParams["bcid"], "level3":vdb.Utils.getS265Channel(), "level4":baseParams["pid"], "level5":video && video["id"] || "null", "slicer1":baseParams["vvuid"], "sid":this._context.id};
        };
        var addAdSlicers = function(ids, event) {
            ids["level2"] = event.data["adCampaignId"] || ids["level2"];
            ids["slicer3"] = event.data["adId"] || "-";
            ids["slicer4"] = event.data["creativeId"] || "-";
        };
        var onAdapterCreated = function() {
            var isBrandedContent = this._context.api.config["brandedContent"] === true;
            var contentPartnerCode = isBrandedContent ? BRANDED_CONTENT_PARTNER_CODE : CONTENT_PARTNER_CODE;
            new vdb.reporting.moat.AdTracker(this._context, AD_PARTNER_CODE, getAdIds.bind(this));
            new vdb.reporting.moat.VideoTracker(this._context, contentPartnerCode, getBaseIds.bind(this));
        };
        return{init:function() {
            this._super();
        }, initExtra:function(config, context) {
            this._context = context;
            this._context.api.getAdapterPromise().then(onAdapterCreated.bind(this));
            this._super(config, context);
        }};
    }());
    vdb["registerExtra"](vdb.extras.MoatExtra);


};

document['bundledExtras'] = document['bundledExtras'] || {};
document['bundledExtras']['atp'] = function () {
    vdb.extras.ATP = vdb.extras.CoreExtra.extend(function() {
        return{init:function() {
            this._super("empty");
        }, initExtra:function(config, context) {
            this._super(config, context);
        }};
    }());
    vdb["registerExtra"](vdb.extras.ATP);


};

document['bundledExtras'] = document['bundledExtras'] || {};
document['bundledExtras']['comscorevmx'] = function () {
    vdb.extras.ComScoreVmx = vdb.extras.CoreExtra.extend(function() {
        function currentVideoVar(value) {
            try {
                var currVideo = context.api.adapter.getCurrentVideo();
                return currVideo.raw[value];
            } catch (e) {
                return null;
            }
        }
        function isAolReport() {
            try {
                return(player.config["bcInfo"] || {})["oo"];
            } catch (e) {
                return false;
            }
        }
        function logComscoreData(paramsStr) {
            var url = document.location.protocol == "https:" ? COMSCORE_SECURE_URL : COMSCORE_URL;
            url += paramsStr;
            LOGGER.debug("ComScore :: " + url);
            this.pixelTracker.callExternalPixel(url);
        }
        function createImpressionString(strAddition, accountCode) {
            var arr = [];
            arr[1] = TYPE_IMPRESSION;
            arr[2] = accountCode || getAccountCode();
            arr[3] = getCategoryId() || "0";
            arr[4] = getChannelData(accountCode, "");
            arr[5] = "";
            arr[6] = "";
            if (strAddition != "") {
                overrideCaValues(arr);
            }
            return getLogString(arr, strAddition);
        }
        function getVideoOrConfigParam(param, videoData) {
            var res;
            if (videoData) {
                res = videoData[param];
            }
            return res || getConfigParam(param);
        }
        function getValueWithSpaces(value) {
            if (value) {
                value = value.split("+").join(" ");
            }
            return value;
        }
        function getConfigParam(param) {
            if (!config || !config["config"]) {
                return null;
            }
            return config["config"][param];
        }
        function createViewLogString(strAddition, viewId, accountCode) {
            var arr = [];
            arr[1] = TYPE_CONTENT_VIEW;
            arr[2] = accountCode || getAccountCode();
            arr[3] = getConfigParam("csc3") || currentVideoVar("partnerName") || currentVideoVar("studioName") || "";
            arr[4] = getChannelData(accountCode);
            arr[5] = viewId;
            arr[6] = currentVideoVar("catName") || "";
            if (strAddition != "") {
                overrideCaValues(arr);
            }
            return getLogString(arr, strAddition);
        }
        function overrideCaValues(arr) {
            var csVideoInfo = getCsVideoAccountInfo();
            var videoStackedAccountId = csVideoInfo["accountId"] || csVideoInfo["ca2"];
            if (arr[2] != videoStackedAccountId) {
                csVideoInfo = null;
            }
            arr[3] = getValueWithSpaces(getVideoOrConfigParam("ca3", csVideoInfo)) || arr[3];
            arr[4] = getValueWithSpaces(getVideoOrConfigParam("ca4", csVideoInfo)) || arr[4];
            arr[6] = getValueWithSpaces(getVideoOrConfigParam("ca6", csVideoInfo)) || arr[6];
        }
        function getCategoryId() {
            var ids = currentVideoVar("categoryIds");
            if (ids) {
                var arrIds = ids.split(",");
                if (arrIds && arrIds.length > 0) {
                    return arrIds[0];
                }
            }
            return null;
        }
        function getChannelData(accountCode, dataFivemin) {
            var res = "";
            var csAccountInfo = getCsAccountInfo();
            if (accountCode != undefined && accountCode == csAccountInfo.accountId) {
                if (!csAccountInfo.isOverride && csAccountInfo.ca4 != undefined) {
                    res = csAccountInfo.ca4;
                } else {
                    res = vdb.Utils.getDomain(context.getReferrer());
                }
            } else {
                if (isAolReport()) {
                    try {
                        res = vdb.Utils.getS265Channel() || DEFAULT_AOL_CHANNEL_NAME;
                    } catch (e) {
                        res = DEFAULT_AOL_CHANNEL_NAME;
                    }
                } else {
                    if (dataFivemin != "") {
                        res = vdb.Utils.getDomain(context.getReferrer());
                    }
                }
            }
            return escape(res);
        }
        function getCsVideoAccountInfo() {
            return currentVideoVar("cs") || {};
        }
        function getCsAccountInfo() {
            var csaccid = context.getMacro(PlayerMacros.CSACCID) || null;
            var csca2 = getConfigParam("csca2");
            var useCsca2 = csca2 && (!csaccid || getConfigParam("csca2p") == "true");
            return{accountId:useCsca2 ? csca2 : csaccid, isOverride:useCsca2, ca4:context.getMacro(PlayerMacros.CSC4) || null};
        }
        function getAccountCode() {
            return isAolReport() ? ACCOUNT_AOL : ACCOUNT_FIVEMIN;
        }
        function getLogString(data, val) {
            var cVal = "c" + val;
            var url = cVal + "1=" + data[1] + "&" + cVal + "2=" + data[2] + "&" + cVal + "3=" + data[3] + "&" + cVal + "4=" + data[4] + "&" + cVal + "5=" + data[5] + "&" + cVal + "6=" + data[6];
            return url;
        }
        function getStackedAccountId() {
            var csVideoInfo = getCsVideoAccountInfo();
            var videoStackedAccountId = csVideoInfo["accountId"] || csVideoInfo["ca2"];
            var videoStackedPriority = !!csVideoInfo["p"] || !!csVideoInfo["priority"];
            var csVideoPriority = videoStackedAccountId != undefined && videoStackedPriority;
            var accountId = csVideoPriority ? videoStackedAccountId : getCsAccountInfo().accountId || videoStackedAccountId;
            return accountId;
        }
        function comscoreImpression() {
            var logStr = createImpressionString("");
            var accountId = getStackedAccountId();
            if (accountId != undefined) {
                logStr += "&" + createImpressionString("a", accountId);
            }
            logComscoreData.call(this, logStr);
        }
        function comscoreGeneralView(logType) {
            var logStr = createViewLogString("", logType);
            var accountId = getStackedAccountId();
            if (accountId != undefined) {
                logStr += "&" + createViewLogString("a", logType, accountId);
            }
            logComscoreData.call(this, logStr);
        }
        function onAdapterCreated(_adapter) {
            adapter = _adapter;
            adapter.addEventListener(PlayerEvent.CONTEXT_INTENT, comscoreImpression.bind(this));
            adapter.addEventListener(PlayerEvent.AD_START, comscoreGeneralView.bind(this, VIEW_AD));
            adapter.addEventListener(PlayerEvent.VIDEO_START, comscoreGeneralView.bind(this, VIEW_CONTENT));
        }
        var LOGGER = vdb.log.getLogger("vdb.extras.ComScoreVmx");
        var PlayerMacros = vdb.constants.PlayerMacros;
        var PlayerEvent = vdb.constants.PlayerEvent;
        var COMSCORE_URL = "http://b.scorecardresearch.com/b?";
        var COMSCORE_SECURE_URL = "https://sb.scorecardresearch.com/b?";
        var DEFAULT_AOL_CHANNEL_NAME = "5Min_unknown_AOL";
        var VIEW_CONTENT = "040800";
        var VIEW_AD = "010000";
        var ACCOUNT_AOL = "1000009";
        var ACCOUNT_FIVEMIN = "6473742";
        var TYPE_CONTENT_VIEW = 1;
        var TYPE_IMPRESSION = 7;
        var config;
        var context;
        var player;
        var adapter;
        return{init:function() {
            this._super();
        }, initExtra:function(_config, _context) {
            LOGGER.debug("ComScoreVmx init");
            config = _config;
            context = _context;
            this.pixelTracker = _context.getInjector().resolveSync(vdb.enums.Dependencies.PIXEL_TRACKER);
            player = context["getPlayer"] && context["getPlayer"].call();
            if (context.api.adapter) {
                onAdapterCreated.call(this, context.api.adapter);
            } else {
                context.addEventListener(context.ctx.adapter.CREATED, onAdapterCreated.bind(this));
            }
            this._super(_config, _context);
        }};
    }());
    vdb["registerExtra"](vdb.extras.ComScoreVmx);


};

document['bundledExtras'] = document['bundledExtras'] || {};
document['bundledExtras']['nielsen_dcr'] = function () {
    vdb.extras.NielsenDcr = vdb.extras.CoreExtra.extend(function() {
        var LOGGER = vdb.log.getLogger("NielsenDcr");
        var PlayerEvent = vdb.constants.PlayerEvent;
        var DCR_KEYWORDS = ["aol on originals 2014 dpr", "nielsen dcr"];
        var nolggParams = {"apid":"PF84A89FC-E661-6BC4-E040-070AAD311D25", "apn":"AolPlayer", "sfcode":"dcr"};
        var alwaysEnableDcr = true;
        var onAdapterCreated = function(adapter) {
            var scriptUrl = this.context.urls.isSecure() ? "https://secure-dcr.imrworldwide.com/novms/js/2/ggcmb500.js" : "http://secure-dcr.imrworldwide.com/novms/js/2/ggcmb500.js";
            this.adapter = adapter;
            adapter.addEventListener(PlayerEvent.CONTEXT_INTENT, onContextIntent.bind(this));
            vdb.dom.loadScript(scriptUrl).then(onScriptLoaded.bind(this), onScriptError);
            LOGGER.debug("load script", scriptUrl);
        };
        var onScriptLoaded = function() {
            LOGGER.debug("script loaded!");
            if (vdb.log.Logger._logLevel === 0) {
                nolggParams["nol_sdkDebug"] = "console";
            }
            this.sdkInstance = window["NOLCMB"]["getInstance"](this.context.id);
            LOGGER.debug("NOLCMB.getInstance", this.context.id);
            this.sdkInstance["ggInitialize"](nolggParams);
            LOGGER.debug("ggInitialize", nolggParams);
        };
        var onScriptError = function(error) {
            LOGGER.error(error);
        };
        var bindEvents = function() {
            if (!this.contextBindGroup) {
                var bind = vdb.events.EventContext.bind;
                this.contextBindGroup = new vdb.events.EventContextBindGroup(bind(this.adapter, PlayerEvent.AD_START, onAdStart.bind(this)), bind(this.adapter, PlayerEvent.AD_TIMEUPDATE, onAdTimeUpdate.bind(this)), bind(this.adapter, PlayerEvent.AD_END, onAdEnd.bind(this)), bind(this.adapter, PlayerEvent.VIDEO_START, onVideoStart.bind(this)), bind(this.adapter, PlayerEvent.VIDEO_TIMEUPDATE, onVideoTimeUpdate.bind(this)), bind(this.adapter, PlayerEvent.VIDEO_END, onVideoEnd.bind(this)));
            }
        };
        var unbindEvents = function() {
            if (this.contextBindGroup) {
                this.contextBindGroup.unbind();
                this.contextBindGroup = null;
            }
        };
        var onContextIntent = function() {
            this.videoData = this.adapter.getCurrentVideo();
            this.isLive = this.videoData ? !!this.videoData.metadata["live"] : false;
            this.contentMetadataLoaded = false;
            this.videoStarted = false;
            this.afterMidroll = false;
            this.playheadPosition = null;
            if (shouldEnableDcr.call(this)) {
                bindEvents.call(this);
                LOGGER.debug("events enabled");
            } else {
                unbindEvents.call(this);
                LOGGER.debug("events disabled");
            }
        };
        var loadAdMetadata = function(adType, adId) {
            fireEvent.call(this, "loadMetadata", {"type":adType, "assetid":adId});
        };
        var loadContentMetadata = function() {
            if (this.videoData) {
                fireEvent.call(this, "loadMetadata", {"type":"content", "assetid":this.videoData.id, "program":this.videoData.studioName || "", "title":this.videoData.title || "", "length":this.isLive ? "86400" : Math.round((this.videoData.metadata["duration"] || 0) / 1E3) + "", "segB":this.videoData.partnerName || ""});
            }
            this.contentMetadataLoaded = true;
        };
        var onAdStart = function(e) {
            var adType = (e.data.type || "ad").toLowerCase();
            var adId = e.data["creativeId"] || e.data["adId"] || e.data["rid"] || e.data.id || "0";
            if (!this.contentMetadataLoaded) {
                loadContentMetadata.call(this);
            } else {
                if (adType === "midroll" && !this.afterMidroll) {
                    fireEvent.call(this, "stop", this.playheadPosition);
                }
            }
            loadAdMetadata.call(this, adType, adId);
            setPlayheadPosition.call(this, 0);
        };
        var onAdTimeUpdate = function(e) {
            setPlayheadPosition.call(this, +e.data.currentTime || 0);
        };
        var onAdEnd = function(e) {
            var adType = (e.data.type || "ad").toLowerCase();
            fireEvent.call(this, "stop", this.playheadPosition);
            this.afterMidroll = adType === "midroll";
            this.playheadPosition = null;
        };
        var onVideoStart = function() {
            this.videoStarted = true;
            loadContentMetadata.call(this);
            if (!this.isLive) {
                setPlayheadPosition.call(this, 0);
            }
        };
        var onVideoTimeUpdate = function(e) {
            if (!this.videoStarted) {
                return;
            }
            if (this.afterMidroll) {
                this.afterMidroll = false;
                loadContentMetadata.call(this);
            }
            setPlayheadPosition.call(this, this.isLive ? Date.now() / 1E3 : e.data.currentTime);
        };
        var onVideoEnd = function() {
            fireEvent.call(this, "stop", this.playheadPosition);
            fireEvent.call(this, "end", this.playheadPosition);
        };
        var setPlayheadPosition = function(pos) {
            if ((pos = Math.round(pos)) != this.playheadPosition) {
                this.playheadPosition = pos;
                fireEvent.call(this, "setPlayheadPosition", pos);
            }
        };
        var fireEvent = function(event, paramObj) {
            if (this.sdkInstance && paramObj !== null) {
                LOGGER.debug(event, paramObj);
                try {
                    this.sdkInstance["ggPM"](event, paramObj);
                } catch (e) {
                    LOGGER.error(event, paramObj, e);
                }
            }
        };
        var shouldEnableDcr = function() {
            if (alwaysEnableDcr) {
                return true;
            }
            if (!this.videoData) {
                return false;
            }
            var keywords = decodeURIComponent(this.videoData.keywords || this.videoData.metadata["keywords"] || "");
            var len = DCR_KEYWORDS.length;
            for (var i = -1;++i < len;) {
                if (keywords.indexOf(DCR_KEYWORDS[i]) != -1) {
                    return true;
                }
            }
            return false;
        };
        return{initExtra:function(config, context) {
            LOGGER.debug("init");
            if (context.getMacro(vdb.constants.PlayerMacros.DISABLEDCR) == "1") {
                LOGGER.debug("disabled by macro");
            } else {
                this.context = context;
                if (context.api.adapter) {
                    onAdapterCreated.call(this, context.api.adapter);
                } else {
                    context.addEventListener(context.ctx.adapter.CREATED, onAdapterCreated.bind(this));
                }
            }
            this._super(config, context);
        }};
    }());
    vdb["registerExtra"](vdb.extras.NielsenDcr);


};

document['bundledExtras'] = document['bundledExtras'] || {};
document['bundledExtras']['nielsen_ocr'] = function () {
    vdb.extras.NielsenLogger = vdb.core.Class.extend(function() {
        function replaceUrlValues(url, caValue, pcValue, ceValue) {
            url = url.replace("[CA]", caValue);
            url = url.replace("[PC]", pcValue);
            url = url.replace("[RAND]", Math.round((new Date).getTime() / 1E3));
            if (typeof ceValue !== "undefined") {
                url = url.replace("[CE]", ceValue);
            }
            return url;
        }
        var nielsenUrl = "//secure-gl.imrworldwide.com/cgi-bin/m?";
        var ocrUrl = nielsenUrl + "ci=nlsnci248&am=3&at=view&rt=banner&st=image&ca=[CA]&cr=crtve&pc=[PC]&ce=aol&r=[RAND]";
        var defaultDomain = "unknown";
        return{init:function() {
        }, getNielsenChannelUrl:function(channelName, campaignId) {
            var pcValue = channelName;
            var caValue = campaignId;
            var url = (document.location.protocol === "https:" ? "https:" : "http:") + ocrUrl;
            url = replaceUrlValues(url, caValue, pcValue);
            return url;
        }, getNielsenDomainUrl:function(campaignIdDomain) {
            var sKeyName = "";
            if (this.embededUrlData && this.embededUrlData[this.currentHtmlVideoIndex]) {
                sKeyName = this.embededUrlData[this.currentHtmlVideoIndex].skeyName;
            }
            var pcValue = sKeyName || defaultDomain;
            var caValue = campaignIdDomain;
            var url = (document.location.protocol === "https:" ? "https:" : "http:") + ocrUrl;
            url = replaceUrlValues(url, caValue, pcValue);
            return url;
        }, getCensusUrl:function(videoTitle, studioName) {
            var url = (document.location.protocol === "https:" ? "https:" : "http:") + nielsenUrl + "ci=us-500136&c6=vc,c28&cc=1&tl=dav0-" + videoTitle + "&cg=" + studioName + "&rnd=" + Math.round((new Date).getTime() / 1E3);
            return url;
        }};
    }());
    vdb.extras.NielsenOcr = vdb.extras.CoreExtra.extend(function() {
        function fireNielsenPixel(channel, campaignId) {
            if (channel && campaignId) {
                var url = this.logger.getNielsenChannelUrl(channel, campaignId);
                LOGGER.debug("Nielsen OCR/DAR Pixel URL: ", url);
                if (Math.random() < .05) {
                    vdb.tracking.PixelTracker.callExternalPixel(url);
                }
            }
        }
        function fireUrls() {
            var params = this.adapter._uiTemplate;
            var channel = vdb.Utils.getDomain(this._context.getReferrer());
            fireNielsenPixel.call(this, channel, params["nielsenSiteCampaign"]);
        }
        function setAdapter(adapter) {
            this.adapter = adapter;
        }
        function setPlayerApi(api) {
            var _this = this;
            if (this.eventContext) {
                this.eventContext.unbind();
            }
            this.eventContext = vdb.events.EventContext.bind(api, vdb.constants.PlayerEvent.CONTEXT_STARTED, function() {
                fireUrls.call(_this);
            });
        }
        var LOGGER = vdb.log.getLogger("NielsenOcr");
        return{init:function() {
            this._super("empty");
        }, initExtra:function(config, ctx, dependencies) {
            this._context = ctx;
            this.logger = new dependencies.NielsenLogger;
            if (ctx.api.adapter) {
                this.adapter = ctx.api.adapter;
            } else {
                this._context.addEventListener(this._context.ctx.adapter.CREATED, setAdapter.bind(this));
            }
            setPlayerApi.call(this, this._context.playerAPI);
            this._super(config, ctx);
        }};
    }());
    vdb["registerExtra"](vdb.extras.NielsenOcr, {NielsenLogger:vdb.extras.NielsenLogger});


};

document['bundledExtras'] = document['bundledExtras'] || {};
document['bundledExtras']['aoldatalayerbeacon'] = function () {
    vdb.extras.AolBeacon = vdb.extras.CoreExtra.extend(function() {
        var ACTION_DATA_LOADED = "dataLoaded";
        var ACTION_VIDEO_START = "startPlaying";
        var ACTION_VIDEO_PAUSE = "pausePlaying";
        var ACTION_VIDEO_PROGRESS = "progressPlaying";
        var LOGGER = vdb.log.getLogger("AolBeacon");
        var URL = location.protocol + "//b.aol.com/ping?";
        var onAdapterCreated = function(adapter) {
            this.adapter = adapter;
            setupHandlers.call(this);
        };
        var setupHandlers = function() {
            var PlayerEvent = vdb.constants.PlayerEvent;
            this.player.addEventListener(PlayerEvent.CONTEXT_INTENT, onContextIntent.bind(this));
            this.player.addEventListener(PlayerEvent.CONTEXT_STARTED, onContextStarted.bind(this));
            this.player.addEventListener(PlayerEvent.VIDEO_PAUSE, onVideoPause.bind(this));
            this.player.addEventListener(PlayerEvent.CONTENT_QUARTILE, onQuartileReached.bind(this));
        };
        var setupParams = function() {
            var video = this.adapter.getCurrentVideo();
            this.params = {"nm":"video", "vid_player":"5min", "vid_title":video.title, "vid_id":video.aolId || video.id, "vid_length":Math.round(video.metadata.duration / 1E3), "vid_series":vdb.Utils.getS265Channel() || "5Min_unknown_AOL", "vid_author":video.raw["studioName"] || "", "vid_category":video.catName || "", "vid_url":encodeURIComponent(vdb.utils.WindowUtil.getTopMostLocation())};
        };
        var onContextIntent = function() {
            setupParams.call(this);
            sendPixel.call(this, ACTION_DATA_LOADED);
        };
        var onContextStarted = function() {
            sendPixel.call(this, ACTION_VIDEO_START);
        };
        var onVideoPause = function(event) {
            var progress = this.context.api.getPlayerInfo()["playheadTime"];
            var duration = event["data"]["duration"];
            sendPixel.call(this, ACTION_VIDEO_PAUSE, Math.round(progress / duration * 100));
        };
        var onQuartileReached = function(event) {
            var quartile = event["data"]["quartile"];
            sendPixel.call(this, ACTION_VIDEO_PROGRESS, quartile * 25);
        };
        var sendPixel = function(playerAction, progress) {
            this.params["vid_progress"] = progress || "";
            this.params["vid_player_action"] = playerAction;
            var url = URL + vdb.Utils.serialize(this.params);
            LOGGER.debug(url);
            this.pixelTracker.callExternalPixel(url);
        };
        return{initExtra:function(config, context) {
            LOGGER.debug("Init extra");
            this.context = context;
            this.player = context["getPlayer"]();
            this.pixelTracker = this.context.getInjector().resolveSync(vdb.enums.Dependencies.PIXEL_TRACKER);
            if (!context.preview) {
                if (context.api.adapter) {
                    onAdapterCreated.call(this, context.api.adapter);
                } else {
                    context.addEventListener(context.ctx.adapter.CREATED, onAdapterCreated.bind(this));
                }
            } else {
                LOGGER.debug("Player is in Preview Mode - AolBeacon not initialized");
            }
            this._super(config);
        }, params:[]};
    }());
    vdb["registerExtra"](vdb.extras.AolBeacon);


};

document['bundledExtras'] = document['bundledExtras'] || {};
document['bundledExtras']['floater'] = function () {
    vdb.extras.FloaterTracker = vdb.core.Class.extend(function() {
        var PlayerEvent = vdb.constants.PlayerEvent;
        var FLOAT_START_ACTION = "floatstarted";
        var FLOAT_END_ACTION = "floatended";
        var addEvents = function() {
            this.adapter.addEventListener(PlayerEvent.AD_START, onAdTimeReset.bind(this));
            this.adapter.addEventListener(PlayerEvent.AD_END, onAdTimeReset.bind(this));
            this.adapter.addEventListener(PlayerEvent.AD_TIMEUPDATE, onAdTimeUpdate.bind(this));
            this.context.addEventListener(PlayerEvent.PLAYER_FLOATING, onPlayerFloating.bind(this));
            this.context.addEventListener(PlayerEvent.PLAYER_DOCKED, onPlayerDocked.bind(this));
        };
        var onAdTimeUpdate = function(e) {
            this.currentAdTime = e.data.currentTime;
        };
        var onAdTimeReset = function() {
            this.currentAdTime = 0;
        };
        var onPlayerFloating = function() {
            reportFloatModeChanged.call(this, FLOAT_START_ACTION);
            this.adapter.dispatchEvent(new vdb.events.Event(PlayerEvent.FLOAT_START_ACTION));
        };
        var onPlayerDocked = function() {
            reportFloatModeChanged.call(this, FLOAT_END_ACTION);
            this.adapter.dispatchEvent(new vdb.events.Event(PlayerEvent.FLOAT_END_ACTION));
        };
        var reportFloatModeChanged = function(action) {
            this.context.setParam(vdb.enums.ContextParams.IS_FLOATED, action == FLOAT_START_ACTION);
            var playerState = this.adapter.getPlayerState();
            var contentTime = playerState["currentTime"];
            var adTime = this.adapter.isAd() ? this.currentAdTime || 0 : null;
            contentTime = !isNaN(contentTime) ? contentTime : 0;
            this.tracker.action(action, adTime, contentTime);
        };
        return{init:function(context) {
            this.context = context;
            this.adapter = context.api.adapter;
            this.tracker = this.context.ctx.createBasicTracker();
            addEvents.call(this);
        }};
    }());
    vdb.extras.Floater = vdb.extras.CoreExtra.extend(function() {
        var LOGGER = vdb.log.getLogger("vdb.extras.Floater");
        var PlayerEvent = vdb.constants.PlayerEvent;
        var CssClass = vdb.constants.CssClass;
        var TRANSITION_TIMER_DURATION = 10;
        var HANDSET_HEIGHT_LIMIT_PRCT = .5;
        var ec = vdb.events.EventContext;
        var utl = vdb.Utils;
        var isHandset = utl.isHandset();
        var isMobile = !!utl.mobileOs();
        var isIE = utl.browser["ie"];
        var browserVersion = utl.browser["version"];
        var TransistionTypes = {NONE:0, SLIDE:1, SPIN:2, HORIZONTAL_FLIP:3, VERTICAL_FLIP:4};
        var CloseButtonVisibility = {HIDDEN:0, VISIBLE:1, VISIBLE_ON_HOVER:2};
        var inverseAlign = {"top":"bottom", "bottom":"top", "left":"right", "right":"left"};
        var getConfigValues = function(config) {
            var closeButtonOptions = config["closeButton"] || {};
            this.destinationElementId = isHandset ? null : config["destinationElementId"];
            this.useDestinationElementWidth = config["useDestinationElementWidth"] !== "false";
            this.percentViewableThreshold = config["percentViewableThreshold"] !== undefined ? config["percentViewableThreshold"] : 100;
            this.showExtras = config["showExtras"] !== "false";
            this.maintainAspectRatio = config["maintainAspectRatio"] !== "false";
            this.width = isHandset ? utl.getViewportWidth() : config["width"] || 320;
            this.height = isHandset ? getHeightBasedOnAspectRatio.call(this) : config["height"] || 180;
            this.hAlign = config["hAlign"] || "right";
            this.hAlignPosition = config["hAlignPosition"] !== undefined ? config["hAlignPosition"] : 20;
            this.vAlign = config["vAlign"] || "top";
            this.vAlignPosition = config["vAlignPosition"] !== undefined ? config["vAlignPosition"] : 20;
            this.zIndex = config["zIndex"] !== undefined ? config["zIndex"] : 999999;
            this.transitionType = isIE && browserVersion == 9 ? TransistionTypes.NONE : config["transitionType"] !== undefined ? config["transitionType"] : TransistionTypes.SLIDE;
            this.transitionDuration = config["transitionDuration"] || .4;
            this.fadeInOutOnTransition = this.transitionType !== TransistionTypes.NONE && config["fadeInOutOnTransition"] !== "false";
            this.fadeInOutOnTransitionColor = config["fadeInOutOnTransitionColor"] || "#000";
            this.reverseRotation = config["reverseRotation"] === "true";
            this.floatingRegionTopBoundary = config["floatingRegionTopBoundary"] || 0;
            this.floatingRegionBottomBoundary = config["floatingRegionBottomBoundary"] || 0;
            this.stickToTopScrollDistance = config["stickToTopScrollDistance"] || 0;
            this.floatBeforeViewable = !this.isAutoPlayInView && config["floatBeforeViewable"] !== "false";
            this.floatBeforePlayback = !this.isAutoPlayInView && config["floatBeforePlayback"] === "true";
            this.floatWhenPaused = config["floatWhenPaused"] === "true";
            this.placeholderBackground = config["placeholderBackground"] || "#000000";
            this.showDockButton = config["showFloaterDockButton"] === "true";
            this.closeButtonVisibility = closeButtonOptions["visibility"] !== undefined ? closeButtonOptions["visibility"] : CloseButtonVisibility.VISIBLE;
            if (this.closeButtonVisibility !== CloseButtonVisibility.HIDDEN) {
                this.closeButtonDiameter = closeButtonOptions["diameter"] || 16;
                this.closeButtonBackgroundColor = closeButtonOptions["backgroundColor"] || "#222";
                this.closeButtonBorderColor = closeButtonOptions["borderColor"] || "#111";
                this.closeButtonBorderWidth = closeButtonOptions["borderWidth"] !== undefined ? closeButtonOptions["borderWidth"] : 1;
                this.closeButtonXSize = closeButtonOptions["xSize"] || 10;
                this.closeButtonXColor = closeButtonOptions["xColor"] || "#fff";
                this.closeButtonXShadowColor = closeButtonOptions["xShadowColor"] || "#000";
                this.closeButtonOpacity = closeButtonOptions["opacity"] || .85;
            }
        };
        var getDestinationElement = function() {
            if (!this.destinationElement) {
                this.destinationElement = this.destinationElementId ? document.getElementById(this.destinationElementId) : null;
            }
            return this.destinationElement;
        };
        var getInitFloatWidth = function() {
            return isHandset ? this.width : this.placeholderElement.clientWidth - (this.showExtras ? 0 : this.api.nonVideoWidth);
        };
        var getInitFloatHeight = function() {
            return isHandset ? this.height : this.placeholderElement.clientHeight - (this.showExtras ? 0 : this.api.nonVideoHeight);
        };
        var getHeightBasedOnAspectRatio = function() {
            return this.api.videoAspectRatio * this.width + (this.showExtras ? this.api.nonVideoHeight : 0);
        };
        var buildFloater = function() {
            this.placeholderElement.style.background = this.placeholderBackground;
            this.outerFloatingContainer = document.createElement("div");
            utl.setStyle(this.outerFloatingContainer, {width:"100%", height:"100%", position:"absolute"});
            setHorizontalPosition(this.outerFloatingContainer, this.hAlign, 0);
            setVerticalPosition(this.outerFloatingContainer, this.vAlign, 0);
            this.innerFloatingContainer = document.createElement("div");
            this.innerFloatingContainer.className = CssClass.FLOATER.INNER_FLOATING_CONTAINER;
            utl.setStyle(this.innerFloatingContainer, {width:"100%", height:"100%", zIndex:1});
            if (this.fadeInOutOnTransition) {
                utl.setStyle(this.innerFloatingContainer, {webkitTransition:"opacity ease " + this.transitionDuration + "s", mozTransition:"opacity ease " + this.transitionDuration + "s", transition:"opacity ease " + this.transitionDuration + "s", opacity:1});
            }
            for (;this.placeholderElement.firstChild;) {
                this.innerFloatingContainer.appendChild(this.placeholderElement.firstChild);
            }
            this.api.setPlayerElement(this.innerFloatingContainer);
            if (!hasInReadExpander.call(this)) {
                setViewabilityElement.call(this);
            }
            if (this.closeButtonVisibility !== CloseButtonVisibility.HIDDEN) {
                buildCloseButton.call(this);
            }
            this.outerFloatingContainer.appendChild(this.innerFloatingContainer);
            this.placeholderElement.appendChild(this.outerFloatingContainer);
        };
        var hasInReadExpander = function() {
            var extrasResolver = new vdb.extras.ExtrasResolver(this.uiTemplate);
            return extrasResolver.hasExtra("inreadexpander.js");
        };
        var setViewabilityElement = function() {
            this.api.setViewabilityElement(this.innerFloatingContainer);
        };
        var buildCloseButton = function() {
            var closeButtonRadius = this.closeButtonDiameter / 2 + this.closeButtonBorderWidth;
            this.closeButton = document.createElement("div");
            this.closeButton.innerHTML = "X";
            this.closeButton.className = CssClass.FLOATER.SIDE_VIEW_CLOSE_BUTTON;
            utl.setStyle(this.closeButton, {width:this.closeButtonDiameter + "px", height:this.closeButtonDiameter + "px", padding:"0", position:"absolute", top:closeButtonRadius * -1 + "px", right:closeButtonRadius * -1 + "px", bottom:"auto", left:"auto", color:this.closeButtonXColor, backgroundColor:this.closeButtonBackgroundColor, border:this.closeButtonBorderWidth + "px solid " + this.closeButtonBorderColor, font:this.closeButtonXSize + "px/" + this.closeButtonDiameter + "px Arial", textShadow:"0 1px 0 " +
            this.closeButtonXShadowColor, textAlign:"center", verticalAlign:"middle", webkitBorderRadius:closeButtonRadius + "px", mozBorderRadius:closeButtonRadius + "px", borderRadius:closeButtonRadius + "px", opacity:this.closeButtonOpacity, cursor:"pointer", zIndex:2, webkitTransition:"all ease .2s", mozTransition:"all ease .2s", transition:"all ease .2s", webkitTransform:"scale(0)", mozTransform:"scale(0)", msTransform:"scale(0)", transform:"scale(0)", boxSizing:"content-box"});
            this.outerFloatingContainer.appendChild(this.closeButton);
        };
        var setPosition = function(elem, align, position) {
            elem.style[align] = position + "px";
            elem.style[inverseAlign[align]] = "auto";
        };
        var setHorizontalPosition = function(elem, align, destination) {
            var position;
            if (utl.isClientRect(destination)) {
                if (align === "right") {
                    position = utl.getViewportWidth() - destination.right;
                } else {
                    position = destination.left;
                }
            } else {
                position = destination;
            }
            setPosition(elem, align, position);
        };
        var getHorizontalPosition = function(elem, align) {
            return align === "right" ? utl.getViewportWidth() - elem.getBoundingClientRect().right : elem.getBoundingClientRect().left;
        };
        var setVerticalPosition = function(elem, align, destination) {
            var position;
            if (utl.isClientRect(destination)) {
                if (align === "bottom") {
                    position = utl.getViewportHeight() - destination.bottom;
                } else {
                    position = destination.top;
                }
            } else {
                position = destination;
            }
            setPosition(elem, align, position);
        };
        var onAdapterCreated = function(adapter) {
            this.adapter = adapter;
            adapter.setResponsive(true);
            new this.floaterTracker(this.context);
            if (this.maintainAspectRatio) {
                this.height = getHeightBasedOnAspectRatio.call(this);
            }
            if (this.fadeInOutOnTransition) {
                this.outerFloatingContainer.style.backgroundColor = this.fadeInOutOnTransitionColor;
            }
            vdb.events.EventContext.bindOnce(this.player, PlayerEvent.CONTEXT_STARTED, setPlaybackStarted.bind(this));
            if (vdb.Utils.browser.playsNativeInline()) {
                bindEvents.call(this);
                checkViewability.call(this);
            } else {
                this.player.addEventListener(PlayerEvent.AD_START, onAdStart.bind(this));
            }
        };
        var setPlaybackStarted = function() {
            this.playbackStarted = true;
        };
        var onAdStart = function(e) {
            if (e.data["isInline"]) {
                bindEvents.call(this);
                checkViewability.call(this, true);
            }
        };
        var onAdEnd = function() {
            unbindEvents.call(this);
            if (this.isStuckToTop) {
                dockPlayer.call(this);
            }
        };
        var bindEvents = function() {
            var bind = vdb.events.EventContext.bind;
            var that = this;
            if (this.bindGroup) {
                return;
            }
            this.bindGroup = new vdb.events.EventContextBindGroup;
            if (isHandset) {
                this.bindGroup.addContexts(bind(this.player, PlayerEvent.AD_END, onAdEnd.bind(this)), bind(window, "resize", onHandsetWinResize.bind(this)));
            } else {
                if (this.destinationElementId) {
                    this.bindGroup.addContext(bind(window, "resize", onWinResize.bind(this)));
                }
                if (this.closeButton) {
                    this.bindGroup.addContexts(bind(this.closeButton, "mouseenter", onCloseButtonMouseEnter.bind(this)), bind(this.closeButton, "mouseleave", onCloseButtonMouseLeave.bind(this)), bind(this.closeButton, "click", onCloseButtonClick.bind(this)));
                }
            }
            this.bindGroup.addContexts(bind(window, "scroll", function() {
                checkViewability.call(that);
            }), bind(window, "resize", function() {
                checkViewability.call(that);
            }), bind(this.player, PlayerEvent.AD_PLAY, function() {
                checkViewability.call(that, true);
            }), bind(this.player, PlayerEvent.VIDEO_PLAY, function() {
                checkViewability.call(that, true);
            }));
        };
        var unbindEvents = function() {
            if (!this.bindGroup) {
                return;
            }
            this.bindGroup.unbind();
            this.bindGroup = null;
        };
        var onWinResize = function() {
            if ((this.isFloated || this.isFloating) && getDestinationElement.call(this)) {
                setHorizontalPosition(this.outerFloatingContainer, this.hAlign, this.destinationElement.getBoundingClientRect());
                if (this.useDestinationElementWidth) {
                    this.width = this.destinationElement.clientWidth;
                    if (this.maintainAspectRatio) {
                        this.height = getHeightBasedOnAspectRatio.call(this);
                    }
                    utl.setStyle(this.outerFloatingContainer, {width:this.width + "px", height:this.height + "px"});
                }
            }
        };
        var onHandsetWinResize = function() {
            this.width = utl.getViewportWidth();
            this.height = getHeightBasedOnAspectRatio.call(this);
        };
        var onCloseButtonMouseEnter = function() {
            this.closeButton.style.opacity = 1;
        };
        var onCloseButtonMouseLeave = function() {
            this.closeButton.style.opacity = this.closeButtonOpacity;
        };
        var onCloseButtonClick = function() {
            this.adapter.pause();
            dockPlayer.call(this, true);
        };
        var onFloaterDockButtonClick = function() {
            if (this.isDocked) {
                this.userForcedFloat = true;
                floatPlayer.call(this);
            } else {
                dockPlayer.call(this);
            }
        };
        var checkViewability = function(isStarting) {
            var prctViewable = getPercentViewable.call(this);
            var isViewable = prctViewable && prctViewable >= this.percentViewableThreshold;
            var shouldDock = isViewable && !this.userForcedFloat || exceededHandsetHeightLimit.call(this);
            var isLightboxActive = this.context.getParam(vdb.enums.ContextParams.IS_LIGHTBOX_ACTIVE);
            if (isLightboxActive) {
                return;
            }
            this.wasViewable = this.wasViewable || isViewable;
            if (this.isStuckToTop) {
                if (!isHandset && pageYOffset - this.pageYOffsetOnStick >= this.stickToTopScrollDistance) {
                    sendToFloatDestination.call(this);
                } else {
                    if (shouldDock) {
                        dockPlayer.call(this);
                    }
                }
            } else {
                if (!isViewable && (this.isDocked || this.isDocking) && floatingPermitted.call(this, isStarting) && !exceededHandsetHeightLimit.call(this)) {
                    floatPlayer.call(this);
                } else {
                    if (this.isFloated || this.isFloating) {
                        if (shouldDock) {
                            dockPlayer.call(this);
                        } else {
                            if (getDestinationElement.call(this)) {
                                setHorizontalPosition(this.outerFloatingContainer, this.hAlign, this.destinationElement.getBoundingClientRect());
                            }
                        }
                    }
                }
            }
        };
        var floatingPermitted = function(isStarting) {
            return(this.floatBeforeViewable || this.wasViewable) && (this.floatBeforePlayback || this.playbackStarted) && (this.floatWhenPaused || isStarting || this.adapter.isPlaying() || !this.playbackStarted);
        };
        var exceededHandsetHeightLimit = function() {
            return isHandset && this.height > utl.getViewportHeight() * HANDSET_HEIGHT_LIMIT_PRCT;
        };
        var getPercentViewable = function() {
            var placeholderRect = this.placeholderElement.getBoundingClientRect();
            var topOffset = placeholderRect.top - this.floatingRegionTopBoundary;
            var aboveTheFold = topOffset < 0 ? topOffset * -1 : 0;
            var bottomOffset = utl.getViewportHeight() - this.floatingRegionBottomBoundary - placeholderRect.bottom;
            var belowTheFold = bottomOffset < 0 ? bottomOffset * -1 : 0;
            return Math.max(this.placeholderElement.clientHeight - aboveTheFold - belowTheFold, 0) / this.placeholderElement.clientHeight * 100;
        };
        var showCloseButton = function() {
            utl.setStyle(this.closeButton, {webkitTransform:"", mozTransform:"", msTransform:"", transform:""});
        };
        var hideCloseButton = function() {
            utl.setStyle(this.closeButton, {webkitTransform:"scale(0)", mozTransform:"scale(0)", msTransform:"scale(0)", transform:"scale(0)"});
        };
        var getTransitionPercentComplete = function() {
            var startValue = getInitFloatWidth.call(this);
            var endValue = this.width;
            var currentValue;
            var percent;
            var floating;
            if (startValue === endValue) {
                startValue = this.originHAlignPosition;
                endValue = this.destinationHAlignPosition;
                if (startValue === endValue) {
                    return 1;
                }
                currentValue = getHorizontalPosition(this.outerFloatingContainer, this.hAlign);
            } else {
                currentValue = this.outerFloatingContainer.clientWidth;
            }
            percent = (currentValue - endValue) / (startValue - endValue);
            floating = this.isFloating ? 1 - percent : 1;
            return this.isDocking ? percent : floating;
        };
        var setTransitions = function() {
            var transitionDuration = this.transitionDuration * (1 - getTransitionPercentComplete.call(this));
            if (this.fadeInOutOnTransition) {
                utl.setStyle(this.innerFloatingContainer, {webkitTransition:"opacity ease " + transitionDuration + "s", mozTransition:"opacity ease " + transitionDuration + "s", transition:"opacity ease " + transitionDuration + "s", opacity:+this.changedDirection});
            }
            utl.setStyle(this.outerFloatingContainer, {webkitTransition:"all ease " + transitionDuration + "s", mozTransition:"all ease " + transitionDuration + "s", transition:"all ease " + transitionDuration + "s"});
        };
        var floatPlayer = function() {
            var outerFloatingContainerRect = this.outerFloatingContainer.getBoundingClientRect();
            clearInterval(this.transitionTimer);
            if (!this.showExtras) {
                this.adapter.hideUIExtras();
            }
            if (this.isDocked) {
                this.isDocked = false;
                utl.setStyle(this.outerFloatingContainer, {width:getInitFloatWidth.call(this) + "px", height:getInitFloatHeight.call(this) + "px", position:"fixed", zIndex:this.zIndex});
            }
            if (this.isDocking) {
                this.isDocking = false;
                this.changedDirection = !this.changedDirection;
            }
            this.isFloated = false;
            this.isFloating = true;
            if (isHandset || this.stickToTopScrollDistance > 0) {
                setHorizontalPosition(this.outerFloatingContainer, this.hAlign, isHandset ? 0 : this.placeholderElement.getBoundingClientRect());
                setVerticalPosition(this.outerFloatingContainer, "top", this.floatingRegionTopBoundary);
                this.isStuckToTop = true;
                this.pageYOffsetOnStick = pageYOffset;
                if (isHandset) {
                    this.context.dispatchEvent(PlayerEvent.PLAYER_FLOATING);
                }
            } else {
                setHorizontalPosition(this.outerFloatingContainer, this.hAlign, outerFloatingContainerRect);
                setVerticalPosition(this.outerFloatingContainer, this.vAlign, outerFloatingContainerRect);
                sendToFloatDestination.call(this);
                this.context.dispatchEvent(PlayerEvent.PLAYER_FLOATING);
            }
        };
        var sendToFloatDestination = function() {
            this.isStuckToTop = false;
            this.originHAlignPosition = getHorizontalPosition(this.outerFloatingContainer, this.hAlign);
            this.destinationHAlignPosition = this.hAlignPosition;
            if (getDestinationElement.call(this)) {
                this.destinationHAlignPosition = this.destinationElement.getBoundingClientRect();
                if (this.useDestinationElementWidth) {
                    this.width = this.destinationElement.clientWidth;
                    if (this.maintainAspectRatio) {
                        this.height = getHeightBasedOnAspectRatio.call(this);
                    }
                }
            }
            if (this.transitionType === TransistionTypes.NONE) {
                onPlayerFloated.call(this);
            } else {
                setTransitions.call(this);
                var rotationAngle = this.reverseRotation ? -360 : 360;
                var transform;
                switch(this.transitionType) {
                    case TransistionTypes.SPIN:
                        transform = "rotate(" + rotationAngle + "deg)";
                        break;
                    case TransistionTypes.HORIZONTAL_FLIP:
                        transform = "perspective(500px) rotateY(" + rotationAngle + "deg)";
                        break;
                    case TransistionTypes.VERTICAL_FLIP:
                        transform = "perspective(500px) rotateX(" + rotationAngle + "deg)";
                        break;
                    default:
                        break;
                }
                if (transform) {
                    utl.setStyle(this.outerFloatingContainer, {webkitTransform:transform, mozTransform:transform, msTransform:transform, transform:transform});
                }
                this.transitionTimer = setInterval(function() {
                    if (getTransitionPercentComplete.call(this) === 1) {
                        onPlayerFloated.call(this);
                    }
                }.bind(this), TRANSITION_TIMER_DURATION);
            }
            utl.setStyle(this.outerFloatingContainer, {width:this.width + "px", height:this.height + "px"});
            setHorizontalPosition(this.outerFloatingContainer, this.hAlign, this.destinationHAlignPosition);
            setVerticalPosition(this.outerFloatingContainer, this.vAlign, this.vAlignPosition + (this.vAlign === "bottom" ? this.floatingRegionBottomBoundary : this.floatingRegionTopBoundary));
        };
        var onPlayerFloated = function() {
            clearInterval(this.transitionTimer);
            this.isDocked = false;
            this.isDocking = false;
            this.isFloated = true;
            this.isFloating = false;
            this.changedDirection = false;
            utl.setStyle(this.outerFloatingContainer, {webkitTransition:"", mozTransition:"", transition:""});
            if (this.closeButtonVisibility === CloseButtonVisibility.VISIBLE) {
                showCloseButton.call(this);
            } else {
                if (this.closeButtonVisibility === CloseButtonVisibility.VISIBLE_ON_HOVER) {
                    this.containerHoverEventGroup = new vdb.events.EventContextBindGroup(ec.bind(this.outerFloatingContainer, "mouseenter", showCloseButton.bind(this)), ec.bind(this.outerFloatingContainer, "mouseleave", hideCloseButton.bind(this)));
                }
            }
            this.outerFloatingContainer.className = CssClass.FLOATER.O2_IN_SIDE_VIEW;
            if (this.fadeInOutOnTransition) {
                this.innerFloatingContainer.style.opacity = 1;
            }
            this.context.dispatchEvent(PlayerEvent.PLAYER_FLOATED);
        };
        var dockPlayer = function(withoutTransition) {
            clearInterval(this.transitionTimer);
            this.userForcedFloat = false;
            if (this.isFloating) {
                this.isFloating = false;
                this.changedDirection = !this.changedDirection;
            }
            this.isDocked = false;
            this.isDocking = true;
            this.isFloated = false;
            this.isFloating = false;
            this.isStuckToTop = false;
            this.outerFloatingContainer.removeAttribute("class");
            if (this.closeButton) {
                hideCloseButton.call(this);
                if (this.containerHoverEventGroup) {
                    this.containerHoverEventGroup.unbind();
                    this.containerHoverEventGroup = null;
                }
            }
            if (this.transitionType === TransistionTypes.NONE || withoutTransition) {
                onPlayerDocked.call(this);
            } else {
                this.transitionTimer = setInterval(function() {
                    var outerFloatingContainerRect = this.outerFloatingContainer.getBoundingClientRect();
                    var placeholderRect = this.placeholderElement.getBoundingClientRect();
                    if (!this.isDocked && Math.abs(placeholderRect[this.hAlign] - outerFloatingContainerRect[this.hAlign]) < 1) {
                        onPlayerDocked.call(this);
                    } else {
                        chasePlaceholder.call(this, placeholderRect);
                    }
                }.bind(this), TRANSITION_TIMER_DURATION);
            }
        };
        var chasePlaceholder = function(placeholderRect) {
            if (this.transitionType !== TransistionTypes.NONE) {
                setTransitions.call(this);
                utl.setStyle(this.outerFloatingContainer, {webkitTransform:"", mozTransform:"", msTransform:"", transform:""});
            }
            utl.setStyle(this.outerFloatingContainer, {width:getInitFloatWidth.call(this) + "px", height:getInitFloatHeight.call(this) + "px"});
            setHorizontalPosition(this.outerFloatingContainer, this.hAlign, placeholderRect);
            setVerticalPosition(this.outerFloatingContainer, this.vAlign, placeholderRect);
        };
        var onPlayerDocked = function() {
            clearInterval(this.transitionTimer);
            this.isDocked = true;
            this.isDocking = false;
            this.isFloated = false;
            this.isFloating = false;
            this.changedDirection = false;
            utl.setStyle(this.outerFloatingContainer, {webkitTransition:"", mozTransition:"", transition:"", webkitTransform:"", mozTransform:"", msTransform:"", transform:"", width:"100%", height:"100%", position:"absolute", zIndex:""});
            if (!this.showExtras) {
                this.adapter.showUIExtras();
            }
            setHorizontalPosition(this.outerFloatingContainer, this.hAlign, 0);
            setVerticalPosition(this.outerFloatingContainer, this.vAlign, 0);
            if (this.fadeInOutOnTransition) {
                utl.setStyle(this.innerFloatingContainer, {webkitTransition:"opacity ease " + this.transitionDuration + "s", mozTransition:"opacity ease " + this.transitionDuration + "s", transition:"opacity ease " + this.transitionDuration + "s", opacity:1});
            }
            this.context.dispatchEvent(PlayerEvent.PLAYER_DOCKED);
        };
        var onSkinReady = function() {
            this.context.dispatchEvent(PlayerEvent.SHOW_DOCK_BUTTON);
        };
        return{initExtra:function(config, context, dependencies) {
            var cfg = config["config"] || {};
            LOGGER.debug("init");
            if (isIE && browserVersion < 9 || isMobile && cfg["disableOnTablets"] === "true") {
                LOGGER.debug("disabled due to browser/device restriction");
                this.unblockExtra();
                return;
            }
            this.floaterTracker = dependencies.FloaterTracker;
            this.context = context;
            this.api = context.api;
            this.player = context["getPlayer"]();
            this.uiTemplate = this.api.config["playerTemplate"];
            this.placeholderElement = this.api.getElement();
            this.isAutoPlayInView = this.api.getAutoPlayInView() > 0;
            this.isDocked = true;
            this.isDocking = false;
            this.isFloated = false;
            this.isFloating = false;
            this.isStuckToTop = false;
            this.changedDirection = false;
            this.pageYOffsetOnStick = 0;
            this.transitionTimer = null;
            this.containerHoverEventGroup = null;
            getConfigValues.call(this, cfg);
            buildFloater.call(this);
            if (this.api.elementResizeEnabled) {
                this.api.elementResizeEnabled = false;
            }
            context.isResponsive = true;
            context.setParam(vdb.enums.ContextParams.FLOATING_PLAYER, true);
            context.addEventListener(context.ctx.adapter.CREATED, onAdapterCreated.bind(this));
            if (this.showDockButton) {
                this.player.addEventListener(PlayerEvent.PLAYER_SKIN_READY, onSkinReady.bind(this));
                context.addEventListener(PlayerEvent.DOCK_BUTTON_CLICK, onFloaterDockButtonClick.bind(this));
            }
            this.player.addEventListener(PlayerEvent.PLAYER_EXPANDED, setViewabilityElement.bind(this));
            this._super(config);
            this.unblockExtra();
        }};
    }());
    vdb["registerExtra"](vdb.extras.Floater, {FloaterTracker:vdb.extras.FloaterTracker});


};

document['bundledExtras'] = document['bundledExtras'] || {};
document['bundledExtras']['extensionloader'] = function () {
    vdb.extras.ExtensionLoader = vdb.extras.CoreExtra.extend(function() {
        var LOGGER = vdb.log.getLogger("ExtensionLoader");
        return{init:function() {
            LOGGER.debug("init");
            this._super("empty");
        }, initExtra:function(config, context) {
            this._config = config["config"] || {};
            this._context = context;
            this._url = this._config["url"];
            var extConfig;
            try {
                extConfig = JSON.parse(this._config["extensionConfig"]);
            } catch (e) {
                extConfig = {};
            }
            this._context.api.getExtensionManager().loadExtension({"config":extConfig, "name":this._config["name"], "url":this._config["url"]});
            this._super(config);
        }};
    }());
    vdb["registerExtra"](vdb.extras.ExtensionLoader);


};